// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/equipmentiot"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentIotCreate is the builder for creating a EquipmentIot entity.
type EquipmentIotCreate struct {
	config
	mutation *EquipmentIotMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (eic *EquipmentIotCreate) SetVersion(i int64) *EquipmentIotCreate {
	eic.mutation.SetVersion(i)
	return eic
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableVersion(i *int64) *EquipmentIotCreate {
	if i != nil {
		eic.SetVersion(*i)
	}
	return eic
}

// SetCreatedBy sets the "created_by" field.
func (eic *EquipmentIotCreate) SetCreatedBy(d datasource.UUID) *EquipmentIotCreate {
	eic.mutation.SetCreatedBy(d)
	return eic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableCreatedBy(d *datasource.UUID) *EquipmentIotCreate {
	if d != nil {
		eic.SetCreatedBy(*d)
	}
	return eic
}

// SetCreatedAt sets the "created_at" field.
func (eic *EquipmentIotCreate) SetCreatedAt(i int64) *EquipmentIotCreate {
	eic.mutation.SetCreatedAt(i)
	return eic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableCreatedAt(i *int64) *EquipmentIotCreate {
	if i != nil {
		eic.SetCreatedAt(*i)
	}
	return eic
}

// SetUpdatedBy sets the "updated_by" field.
func (eic *EquipmentIotCreate) SetUpdatedBy(d datasource.UUID) *EquipmentIotCreate {
	eic.mutation.SetUpdatedBy(d)
	return eic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableUpdatedBy(d *datasource.UUID) *EquipmentIotCreate {
	if d != nil {
		eic.SetUpdatedBy(*d)
	}
	return eic
}

// SetUpdatedAt sets the "updated_at" field.
func (eic *EquipmentIotCreate) SetUpdatedAt(i int64) *EquipmentIotCreate {
	eic.mutation.SetUpdatedAt(i)
	return eic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableUpdatedAt(i *int64) *EquipmentIotCreate {
	if i != nil {
		eic.SetUpdatedAt(*i)
	}
	return eic
}

// SetEquipmentID sets the "equipment_id" field.
func (eic *EquipmentIotCreate) SetEquipmentID(d datasource.UUID) *EquipmentIotCreate {
	eic.mutation.SetEquipmentID(d)
	return eic
}

// SetIccid sets the "iccid" field.
func (eic *EquipmentIotCreate) SetIccid(s string) *EquipmentIotCreate {
	eic.mutation.SetIccid(s)
	return eic
}

// SetNillableIccid sets the "iccid" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableIccid(s *string) *EquipmentIotCreate {
	if s != nil {
		eic.SetIccid(*s)
	}
	return eic
}

// SetImei sets the "imei" field.
func (eic *EquipmentIotCreate) SetImei(s string) *EquipmentIotCreate {
	eic.mutation.SetImei(s)
	return eic
}

// SetNillableImei sets the "imei" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableImei(s *string) *EquipmentIotCreate {
	if s != nil {
		eic.SetImei(*s)
	}
	return eic
}

// SetRemoteAddress sets the "remote_address" field.
func (eic *EquipmentIotCreate) SetRemoteAddress(s string) *EquipmentIotCreate {
	eic.mutation.SetRemoteAddress(s)
	return eic
}

// SetNillableRemoteAddress sets the "remote_address" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableRemoteAddress(s *string) *EquipmentIotCreate {
	if s != nil {
		eic.SetRemoteAddress(*s)
	}
	return eic
}

// SetID sets the "id" field.
func (eic *EquipmentIotCreate) SetID(d datasource.UUID) *EquipmentIotCreate {
	eic.mutation.SetID(d)
	return eic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (eic *EquipmentIotCreate) SetNillableID(d *datasource.UUID) *EquipmentIotCreate {
	if d != nil {
		eic.SetID(*d)
	}
	return eic
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (eic *EquipmentIotCreate) SetEquipment(e *Equipment) *EquipmentIotCreate {
	return eic.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentIotMutation object of the builder.
func (eic *EquipmentIotCreate) Mutation() *EquipmentIotMutation {
	return eic.mutation
}

// Save creates the EquipmentIot in the database.
func (eic *EquipmentIotCreate) Save(ctx context.Context) (*EquipmentIot, error) {
	var (
		err  error
		node *EquipmentIot
	)
	eic.defaults()
	if len(eic.hooks) == 0 {
		if err = eic.check(); err != nil {
			return nil, err
		}
		node, err = eic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentIotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eic.check(); err != nil {
				return nil, err
			}
			eic.mutation = mutation
			if node, err = eic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(eic.hooks) - 1; i >= 0; i-- {
			if eic.hooks[i] == nil {
				return nil, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = eic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EquipmentIot)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EquipmentIotMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (eic *EquipmentIotCreate) SaveX(ctx context.Context) *EquipmentIot {
	v, err := eic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eic *EquipmentIotCreate) Exec(ctx context.Context) error {
	_, err := eic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eic *EquipmentIotCreate) ExecX(ctx context.Context) {
	if err := eic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eic *EquipmentIotCreate) defaults() {
	if _, ok := eic.mutation.Version(); !ok {
		v := equipmentiot.DefaultVersion
		eic.mutation.SetVersion(v)
	}
	if _, ok := eic.mutation.CreatedBy(); !ok {
		v := equipmentiot.DefaultCreatedBy
		eic.mutation.SetCreatedBy(v)
	}
	if _, ok := eic.mutation.CreatedAt(); !ok {
		v := equipmentiot.DefaultCreatedAt
		eic.mutation.SetCreatedAt(v)
	}
	if _, ok := eic.mutation.UpdatedBy(); !ok {
		v := equipmentiot.DefaultUpdatedBy
		eic.mutation.SetUpdatedBy(v)
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		v := equipmentiot.DefaultUpdatedAt
		eic.mutation.SetUpdatedAt(v)
	}
	if _, ok := eic.mutation.ID(); !ok {
		v := equipmentiot.DefaultID
		eic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eic *EquipmentIotCreate) check() error {
	if _, ok := eic.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`cwmodel: missing required field "EquipmentIot.version"`)}
	}
	if _, ok := eic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cwmodel: missing required field "EquipmentIot.created_by"`)}
	}
	if _, ok := eic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cwmodel: missing required field "EquipmentIot.created_at"`)}
	}
	if _, ok := eic.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cwmodel: missing required field "EquipmentIot.updated_by"`)}
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cwmodel: missing required field "EquipmentIot.updated_at"`)}
	}
	if _, ok := eic.mutation.EquipmentID(); !ok {
		return &ValidationError{Name: "equipment_id", err: errors.New(`cwmodel: missing required field "EquipmentIot.equipment_id"`)}
	}
	if _, ok := eic.mutation.EquipmentID(); !ok {
		return &ValidationError{Name: "equipment", err: errors.New(`cwmodel: missing required edge "EquipmentIot.equipment"`)}
	}
	return nil
}

func (eic *EquipmentIotCreate) sqlSave(ctx context.Context) (*EquipmentIot, error) {
	_node, _spec := eic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = datasource.UUID(id)
	}
	return _node, nil
}

func (eic *EquipmentIotCreate) createSpec() (*EquipmentIot, *sqlgraph.CreateSpec) {
	var (
		_node = &EquipmentIot{config: eic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: equipmentiot.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipmentiot.FieldID,
			},
		}
	)
	if id, ok := eic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eic.mutation.Version(); ok {
		_spec.SetField(equipmentiot.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := eic.mutation.CreatedBy(); ok {
		_spec.SetField(equipmentiot.FieldCreatedBy, field.TypeUint64, value)
		_node.CreatedBy = value
	}
	if value, ok := eic.mutation.CreatedAt(); ok {
		_spec.SetField(equipmentiot.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := eic.mutation.UpdatedBy(); ok {
		_spec.SetField(equipmentiot.FieldUpdatedBy, field.TypeUint64, value)
		_node.UpdatedBy = value
	}
	if value, ok := eic.mutation.UpdatedAt(); ok {
		_spec.SetField(equipmentiot.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := eic.mutation.Iccid(); ok {
		_spec.SetField(equipmentiot.FieldIccid, field.TypeString, value)
		_node.Iccid = &value
	}
	if value, ok := eic.mutation.Imei(); ok {
		_spec.SetField(equipmentiot.FieldImei, field.TypeString, value)
		_node.Imei = &value
	}
	if value, ok := eic.mutation.RemoteAddress(); ok {
		_spec.SetField(equipmentiot.FieldRemoteAddress, field.TypeString, value)
		_node.RemoteAddress = &value
	}
	if nodes := eic.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   equipmentiot.EquipmentTable,
			Columns: []string{equipmentiot.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EquipmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EquipmentIotCreateBulk is the builder for creating many EquipmentIot entities in bulk.
type EquipmentIotCreateBulk struct {
	config
	builders []*EquipmentIotCreate
}

// Save creates the EquipmentIot entities in the database.
func (eicb *EquipmentIotCreateBulk) Save(ctx context.Context) ([]*EquipmentIot, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eicb.builders))
	nodes := make([]*EquipmentIot, len(eicb.builders))
	mutators := make([]Mutator, len(eicb.builders))
	for i := range eicb.builders {
		func(i int, root context.Context) {
			builder := eicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EquipmentIotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = datasource.UUID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eicb *EquipmentIotCreateBulk) SaveX(ctx context.Context) []*EquipmentIot {
	v, err := eicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eicb *EquipmentIotCreateBulk) Exec(ctx context.Context) error {
	_, err := eicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eicb *EquipmentIotCreateBulk) ExecX(ctx context.Context) {
	if err := eicb.Exec(ctx); err != nil {
		panic(err)
	}
}
