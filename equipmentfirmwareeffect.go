// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/equipmentfirmwareeffect"
	"github.com/Kotodian/cwmodel/firmware"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentFirmwareEffect is the model entity for the EquipmentFirmwareEffect schema.
type EquipmentFirmwareEffect struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID datasource.UUID `json:"id,omitempty"`
	// 乐观锁
	Version int64 `json:"version,omitempty"`
	// 创建者
	CreatedBy datasource.UUID `json:"created_by,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改者
	UpdatedBy datasource.UUID `json:"updated_by,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 桩id
	EquipmentID datasource.UUID `json:"equipment_id,omitempty"`
	// 请求id
	RequestID int64 `json:"request_id,omitempty"`
	// 状态
	State int `json:"state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentFirmwareEffectQuery when eager-loading is set.
	Edges       EquipmentFirmwareEffectEdges `json:"-"`
	firmware_id *datasource.UUID
}

// EquipmentFirmwareEffectEdges holds the relations/edges for other nodes in the graph.
type EquipmentFirmwareEffectEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// Firmware holds the value of the firmware edge.
	Firmware *Firmware `json:"firmware,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentFirmwareEffectEdges) EquipmentOrErr() (*Equipment, error) {
	if e.loadedTypes[0] {
		if e.Equipment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: equipment.Label}
		}
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// FirmwareOrErr returns the Firmware value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentFirmwareEffectEdges) FirmwareOrErr() (*Firmware, error) {
	if e.loadedTypes[1] {
		if e.Firmware == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: firmware.Label}
		}
		return e.Firmware, nil
	}
	return nil, &NotLoadedError{edge: "firmware"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EquipmentFirmwareEffect) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipmentfirmwareeffect.FieldID, equipmentfirmwareeffect.FieldVersion, equipmentfirmwareeffect.FieldCreatedBy, equipmentfirmwareeffect.FieldCreatedAt, equipmentfirmwareeffect.FieldUpdatedBy, equipmentfirmwareeffect.FieldUpdatedAt, equipmentfirmwareeffect.FieldEquipmentID, equipmentfirmwareeffect.FieldRequestID, equipmentfirmwareeffect.FieldState:
			values[i] = new(sql.NullInt64)
		case equipmentfirmwareeffect.ForeignKeys[0]: // firmware_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EquipmentFirmwareEffect", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EquipmentFirmwareEffect fields.
func (efe *EquipmentFirmwareEffect) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipmentfirmwareeffect.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				efe.ID = datasource.UUID(value.Int64)
			}
		case equipmentfirmwareeffect.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				efe.Version = value.Int64
			}
		case equipmentfirmwareeffect.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				efe.CreatedBy = datasource.UUID(value.Int64)
			}
		case equipmentfirmwareeffect.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				efe.CreatedAt = value.Int64
			}
		case equipmentfirmwareeffect.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				efe.UpdatedBy = datasource.UUID(value.Int64)
			}
		case equipmentfirmwareeffect.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				efe.UpdatedAt = value.Int64
			}
		case equipmentfirmwareeffect.FieldEquipmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_id", values[i])
			} else if value.Valid {
				efe.EquipmentID = datasource.UUID(value.Int64)
			}
		case equipmentfirmwareeffect.FieldRequestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				efe.RequestID = value.Int64
			}
		case equipmentfirmwareeffect.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				efe.State = int(value.Int64)
			}
		case equipmentfirmwareeffect.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field firmware_id", values[i])
			} else if value.Valid {
				efe.firmware_id = new(datasource.UUID)
				*efe.firmware_id = datasource.UUID(value.Int64)
			}
		}
	}
	return nil
}

// QueryEquipment queries the "equipment" edge of the EquipmentFirmwareEffect entity.
func (efe *EquipmentFirmwareEffect) QueryEquipment() *EquipmentQuery {
	return (&EquipmentFirmwareEffectClient{config: efe.config}).QueryEquipment(efe)
}

// QueryFirmware queries the "firmware" edge of the EquipmentFirmwareEffect entity.
func (efe *EquipmentFirmwareEffect) QueryFirmware() *FirmwareQuery {
	return (&EquipmentFirmwareEffectClient{config: efe.config}).QueryFirmware(efe)
}

// Update returns a builder for updating this EquipmentFirmwareEffect.
// Note that you need to call EquipmentFirmwareEffect.Unwrap() before calling this method if this EquipmentFirmwareEffect
// was returned from a transaction, and the transaction was committed or rolled back.
func (efe *EquipmentFirmwareEffect) Update() *EquipmentFirmwareEffectUpdateOne {
	return (&EquipmentFirmwareEffectClient{config: efe.config}).UpdateOne(efe)
}

// Unwrap unwraps the EquipmentFirmwareEffect entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (efe *EquipmentFirmwareEffect) Unwrap() *EquipmentFirmwareEffect {
	_tx, ok := efe.config.driver.(*txDriver)
	if !ok {
		panic("cwmodel: EquipmentFirmwareEffect is not a transactional entity")
	}
	efe.config.driver = _tx.drv
	return efe
}

// String implements the fmt.Stringer.
func (efe *EquipmentFirmwareEffect) String() string {
	var builder strings.Builder
	builder.WriteString("EquipmentFirmwareEffect(")
	builder.WriteString(fmt.Sprintf("id=%v, ", efe.ID))
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", efe.Version))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", efe.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", efe.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", efe.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", efe.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("equipment_id=")
	builder.WriteString(fmt.Sprintf("%v", efe.EquipmentID))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", efe.RequestID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", efe.State))
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentFirmwareEffects is a parsable slice of EquipmentFirmwareEffect.
type EquipmentFirmwareEffects []*EquipmentFirmwareEffect

func (efe EquipmentFirmwareEffects) config(cfg config) {
	for _i := range efe {
		efe[_i].config = cfg
	}
}
