// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/Kotodian/cwmodel/migrate"
	"github.com/Kotodian/gokit/datasource"

	"github.com/Kotodian/cwmodel/appmoduleinfo"
	"github.com/Kotodian/cwmodel/connector"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/equipmentalarm"
	"github.com/Kotodian/cwmodel/equipmentfirmwareeffect"
	"github.com/Kotodian/cwmodel/equipmentinfo"
	"github.com/Kotodian/cwmodel/equipmentiot"
	"github.com/Kotodian/cwmodel/equipmentlog"
	"github.com/Kotodian/cwmodel/evse"
	"github.com/Kotodian/cwmodel/firmware"
	"github.com/Kotodian/cwmodel/manufacturer"
	"github.com/Kotodian/cwmodel/model"
	"github.com/Kotodian/cwmodel/orderevent"
	"github.com/Kotodian/cwmodel/orderinfo"
	"github.com/Kotodian/cwmodel/reservation"
	"github.com/Kotodian/cwmodel/smartchargingeffect"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppModuleInfo is the client for interacting with the AppModuleInfo builders.
	AppModuleInfo *AppModuleInfoClient
	// Connector is the client for interacting with the Connector builders.
	Connector *ConnectorClient
	// Equipment is the client for interacting with the Equipment builders.
	Equipment *EquipmentClient
	// EquipmentAlarm is the client for interacting with the EquipmentAlarm builders.
	EquipmentAlarm *EquipmentAlarmClient
	// EquipmentFirmwareEffect is the client for interacting with the EquipmentFirmwareEffect builders.
	EquipmentFirmwareEffect *EquipmentFirmwareEffectClient
	// EquipmentInfo is the client for interacting with the EquipmentInfo builders.
	EquipmentInfo *EquipmentInfoClient
	// EquipmentIot is the client for interacting with the EquipmentIot builders.
	EquipmentIot *EquipmentIotClient
	// EquipmentLog is the client for interacting with the EquipmentLog builders.
	EquipmentLog *EquipmentLogClient
	// Evse is the client for interacting with the Evse builders.
	Evse *EvseClient
	// Firmware is the client for interacting with the Firmware builders.
	Firmware *FirmwareClient
	// Manufacturer is the client for interacting with the Manufacturer builders.
	Manufacturer *ManufacturerClient
	// Model is the client for interacting with the Model builders.
	Model *ModelClient
	// OrderEvent is the client for interacting with the OrderEvent builders.
	OrderEvent *OrderEventClient
	// OrderInfo is the client for interacting with the OrderInfo builders.
	OrderInfo *OrderInfoClient
	// Reservation is the client for interacting with the Reservation builders.
	Reservation *ReservationClient
	// SmartChargingEffect is the client for interacting with the SmartChargingEffect builders.
	SmartChargingEffect *SmartChargingEffectClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppModuleInfo = NewAppModuleInfoClient(c.config)
	c.Connector = NewConnectorClient(c.config)
	c.Equipment = NewEquipmentClient(c.config)
	c.EquipmentAlarm = NewEquipmentAlarmClient(c.config)
	c.EquipmentFirmwareEffect = NewEquipmentFirmwareEffectClient(c.config)
	c.EquipmentInfo = NewEquipmentInfoClient(c.config)
	c.EquipmentIot = NewEquipmentIotClient(c.config)
	c.EquipmentLog = NewEquipmentLogClient(c.config)
	c.Evse = NewEvseClient(c.config)
	c.Firmware = NewFirmwareClient(c.config)
	c.Manufacturer = NewManufacturerClient(c.config)
	c.Model = NewModelClient(c.config)
	c.OrderEvent = NewOrderEventClient(c.config)
	c.OrderInfo = NewOrderInfoClient(c.config)
	c.Reservation = NewReservationClient(c.config)
	c.SmartChargingEffect = NewSmartChargingEffectClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("cwmodel: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("cwmodel: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		AppModuleInfo:           NewAppModuleInfoClient(cfg),
		Connector:               NewConnectorClient(cfg),
		Equipment:               NewEquipmentClient(cfg),
		EquipmentAlarm:          NewEquipmentAlarmClient(cfg),
		EquipmentFirmwareEffect: NewEquipmentFirmwareEffectClient(cfg),
		EquipmentInfo:           NewEquipmentInfoClient(cfg),
		EquipmentIot:            NewEquipmentIotClient(cfg),
		EquipmentLog:            NewEquipmentLogClient(cfg),
		Evse:                    NewEvseClient(cfg),
		Firmware:                NewFirmwareClient(cfg),
		Manufacturer:            NewManufacturerClient(cfg),
		Model:                   NewModelClient(cfg),
		OrderEvent:              NewOrderEventClient(cfg),
		OrderInfo:               NewOrderInfoClient(cfg),
		Reservation:             NewReservationClient(cfg),
		SmartChargingEffect:     NewSmartChargingEffectClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		AppModuleInfo:           NewAppModuleInfoClient(cfg),
		Connector:               NewConnectorClient(cfg),
		Equipment:               NewEquipmentClient(cfg),
		EquipmentAlarm:          NewEquipmentAlarmClient(cfg),
		EquipmentFirmwareEffect: NewEquipmentFirmwareEffectClient(cfg),
		EquipmentInfo:           NewEquipmentInfoClient(cfg),
		EquipmentIot:            NewEquipmentIotClient(cfg),
		EquipmentLog:            NewEquipmentLogClient(cfg),
		Evse:                    NewEvseClient(cfg),
		Firmware:                NewFirmwareClient(cfg),
		Manufacturer:            NewManufacturerClient(cfg),
		Model:                   NewModelClient(cfg),
		OrderEvent:              NewOrderEventClient(cfg),
		OrderInfo:               NewOrderInfoClient(cfg),
		Reservation:             NewReservationClient(cfg),
		SmartChargingEffect:     NewSmartChargingEffectClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppModuleInfo.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppModuleInfo.Use(hooks...)
	c.Connector.Use(hooks...)
	c.Equipment.Use(hooks...)
	c.EquipmentAlarm.Use(hooks...)
	c.EquipmentFirmwareEffect.Use(hooks...)
	c.EquipmentInfo.Use(hooks...)
	c.EquipmentIot.Use(hooks...)
	c.EquipmentLog.Use(hooks...)
	c.Evse.Use(hooks...)
	c.Firmware.Use(hooks...)
	c.Manufacturer.Use(hooks...)
	c.Model.Use(hooks...)
	c.OrderEvent.Use(hooks...)
	c.OrderInfo.Use(hooks...)
	c.Reservation.Use(hooks...)
	c.SmartChargingEffect.Use(hooks...)
}

// AppModuleInfoClient is a client for the AppModuleInfo schema.
type AppModuleInfoClient struct {
	config
}

// NewAppModuleInfoClient returns a client for the AppModuleInfo from the given config.
func NewAppModuleInfoClient(c config) *AppModuleInfoClient {
	return &AppModuleInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appmoduleinfo.Hooks(f(g(h())))`.
func (c *AppModuleInfoClient) Use(hooks ...Hook) {
	c.hooks.AppModuleInfo = append(c.hooks.AppModuleInfo, hooks...)
}

// Create returns a builder for creating a AppModuleInfo entity.
func (c *AppModuleInfoClient) Create() *AppModuleInfoCreate {
	mutation := newAppModuleInfoMutation(c.config, OpCreate)
	return &AppModuleInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppModuleInfo entities.
func (c *AppModuleInfoClient) CreateBulk(builders ...*AppModuleInfoCreate) *AppModuleInfoCreateBulk {
	return &AppModuleInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppModuleInfo.
func (c *AppModuleInfoClient) Update() *AppModuleInfoUpdate {
	mutation := newAppModuleInfoMutation(c.config, OpUpdate)
	return &AppModuleInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppModuleInfoClient) UpdateOne(ami *AppModuleInfo) *AppModuleInfoUpdateOne {
	mutation := newAppModuleInfoMutation(c.config, OpUpdateOne, withAppModuleInfo(ami))
	return &AppModuleInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppModuleInfoClient) UpdateOneID(id datasource.UUID) *AppModuleInfoUpdateOne {
	mutation := newAppModuleInfoMutation(c.config, OpUpdateOne, withAppModuleInfoID(id))
	return &AppModuleInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppModuleInfo.
func (c *AppModuleInfoClient) Delete() *AppModuleInfoDelete {
	mutation := newAppModuleInfoMutation(c.config, OpDelete)
	return &AppModuleInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppModuleInfoClient) DeleteOne(ami *AppModuleInfo) *AppModuleInfoDeleteOne {
	return c.DeleteOneID(ami.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AppModuleInfoClient) DeleteOneID(id datasource.UUID) *AppModuleInfoDeleteOne {
	builder := c.Delete().Where(appmoduleinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppModuleInfoDeleteOne{builder}
}

// Query returns a query builder for AppModuleInfo.
func (c *AppModuleInfoClient) Query() *AppModuleInfoQuery {
	return &AppModuleInfoQuery{
		config: c.config,
	}
}

// Get returns a AppModuleInfo entity by its id.
func (c *AppModuleInfoClient) Get(ctx context.Context, id datasource.UUID) (*AppModuleInfo, error) {
	return c.Query().Unique(false).Where(appmoduleinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppModuleInfoClient) GetX(ctx context.Context, id datasource.UUID) *AppModuleInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppModuleInfoClient) Hooks() []Hook {
	return c.hooks.AppModuleInfo
}

// ConnectorClient is a client for the Connector schema.
type ConnectorClient struct {
	config
}

// NewConnectorClient returns a client for the Connector from the given config.
func NewConnectorClient(c config) *ConnectorClient {
	return &ConnectorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connector.Hooks(f(g(h())))`.
func (c *ConnectorClient) Use(hooks ...Hook) {
	c.hooks.Connector = append(c.hooks.Connector, hooks...)
}

// Create returns a builder for creating a Connector entity.
func (c *ConnectorClient) Create() *ConnectorCreate {
	mutation := newConnectorMutation(c.config, OpCreate)
	return &ConnectorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Connector entities.
func (c *ConnectorClient) CreateBulk(builders ...*ConnectorCreate) *ConnectorCreateBulk {
	return &ConnectorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Connector.
func (c *ConnectorClient) Update() *ConnectorUpdate {
	mutation := newConnectorMutation(c.config, OpUpdate)
	return &ConnectorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectorClient) UpdateOne(co *Connector) *ConnectorUpdateOne {
	mutation := newConnectorMutation(c.config, OpUpdateOne, withConnector(co))
	return &ConnectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectorClient) UpdateOneID(id datasource.UUID) *ConnectorUpdateOne {
	mutation := newConnectorMutation(c.config, OpUpdateOne, withConnectorID(id))
	return &ConnectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Connector.
func (c *ConnectorClient) Delete() *ConnectorDelete {
	mutation := newConnectorMutation(c.config, OpDelete)
	return &ConnectorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectorClient) DeleteOne(co *Connector) *ConnectorDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ConnectorClient) DeleteOneID(id datasource.UUID) *ConnectorDeleteOne {
	builder := c.Delete().Where(connector.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectorDeleteOne{builder}
}

// Query returns a query builder for Connector.
func (c *ConnectorClient) Query() *ConnectorQuery {
	return &ConnectorQuery{
		config: c.config,
	}
}

// Get returns a Connector entity by its id.
func (c *ConnectorClient) Get(ctx context.Context, id datasource.UUID) (*Connector, error) {
	return c.Query().Unique(false).Where(connector.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectorClient) GetX(ctx context.Context, id datasource.UUID) *Connector {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvse queries the evse edge of a Connector.
func (c *ConnectorClient) QueryEvse(co *Connector) *EvseQuery {
	query := &EvseQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(evse.Table, evse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, connector.EvseTable, connector.EvseColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Connector.
func (c *ConnectorClient) QueryEquipment(co *Connector) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, connector.EquipmentTable, connector.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderInfo queries the order_info edge of a Connector.
func (c *ConnectorClient) QueryOrderInfo(co *Connector) *OrderInfoQuery {
	query := &OrderInfoQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connector.OrderInfoTable, connector.OrderInfoColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReservation queries the reservation edge of a Connector.
func (c *ConnectorClient) QueryReservation(co *Connector) *ReservationQuery {
	query := &ReservationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(reservation.Table, reservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connector.ReservationTable, connector.ReservationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectorClient) Hooks() []Hook {
	return c.hooks.Connector
}

// EquipmentClient is a client for the Equipment schema.
type EquipmentClient struct {
	config
}

// NewEquipmentClient returns a client for the Equipment from the given config.
func NewEquipmentClient(c config) *EquipmentClient {
	return &EquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipment.Hooks(f(g(h())))`.
func (c *EquipmentClient) Use(hooks ...Hook) {
	c.hooks.Equipment = append(c.hooks.Equipment, hooks...)
}

// Create returns a builder for creating a Equipment entity.
func (c *EquipmentClient) Create() *EquipmentCreate {
	mutation := newEquipmentMutation(c.config, OpCreate)
	return &EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Equipment entities.
func (c *EquipmentClient) CreateBulk(builders ...*EquipmentCreate) *EquipmentCreateBulk {
	return &EquipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Equipment.
func (c *EquipmentClient) Update() *EquipmentUpdate {
	mutation := newEquipmentMutation(c.config, OpUpdate)
	return &EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentClient) UpdateOne(e *Equipment) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipment(e))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentClient) UpdateOneID(id datasource.UUID) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipmentID(id))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipment.
func (c *EquipmentClient) Delete() *EquipmentDelete {
	mutation := newEquipmentMutation(c.config, OpDelete)
	return &EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentClient) DeleteOne(e *Equipment) *EquipmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EquipmentClient) DeleteOneID(id datasource.UUID) *EquipmentDeleteOne {
	builder := c.Delete().Where(equipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentDeleteOne{builder}
}

// Query returns a query builder for Equipment.
func (c *EquipmentClient) Query() *EquipmentQuery {
	return &EquipmentQuery{
		config: c.config,
	}
}

// Get returns a Equipment entity by its id.
func (c *EquipmentClient) Get(ctx context.Context, id datasource.UUID) (*Equipment, error) {
	return c.Query().Unique(false).Where(equipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentClient) GetX(ctx context.Context, id datasource.UUID) *Equipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipmentInfo queries the equipment_info edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentInfo(e *Equipment) *EquipmentInfoQuery {
	query := &EquipmentInfoQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentinfo.Table, equipmentinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.EquipmentInfoTable, equipment.EquipmentInfoColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvse queries the evse edge of a Equipment.
func (c *EquipmentClient) QueryEvse(e *Equipment) *EvseQuery {
	query := &EvseQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(evse.Table, evse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EvseTable, equipment.EvseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnector queries the connector edge of a Equipment.
func (c *EquipmentClient) QueryConnector(e *Equipment) *ConnectorQuery {
	query := &ConnectorQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.ConnectorTable, equipment.ConnectorColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentAlarm queries the equipment_alarm edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentAlarm(e *Equipment) *EquipmentAlarmQuery {
	query := &EquipmentAlarmQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentalarm.Table, equipmentalarm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EquipmentAlarmTable, equipment.EquipmentAlarmColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentIot queries the equipment_iot edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentIot(e *Equipment) *EquipmentIotQuery {
	query := &EquipmentIotQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentiot.Table, equipmentiot.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.EquipmentIotTable, equipment.EquipmentIotColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentFirmwareEffect queries the equipment_firmware_effect edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentFirmwareEffect(e *Equipment) *EquipmentFirmwareEffectQuery {
	query := &EquipmentFirmwareEffectQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentfirmwareeffect.Table, equipmentfirmwareeffect.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EquipmentFirmwareEffectTable, equipment.EquipmentFirmwareEffectColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderInfo queries the order_info edge of a Equipment.
func (c *EquipmentClient) QueryOrderInfo(e *Equipment) *OrderInfoQuery {
	query := &OrderInfoQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.OrderInfoTable, equipment.OrderInfoColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReservation queries the reservation edge of a Equipment.
func (c *EquipmentClient) QueryReservation(e *Equipment) *ReservationQuery {
	query := &ReservationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(reservation.Table, reservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.ReservationTable, equipment.ReservationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentLog queries the equipment_log edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentLog(e *Equipment) *EquipmentLogQuery {
	query := &EquipmentLogQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentlog.Table, equipmentlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EquipmentLogTable, equipment.EquipmentLogColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySmartChargingEffect queries the smart_charging_effect edge of a Equipment.
func (c *EquipmentClient) QuerySmartChargingEffect(e *Equipment) *SmartChargingEffectQuery {
	query := &SmartChargingEffectQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(smartchargingeffect.Table, smartchargingeffect.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.SmartChargingEffectTable, equipment.SmartChargingEffectColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentClient) Hooks() []Hook {
	return c.hooks.Equipment
}

// EquipmentAlarmClient is a client for the EquipmentAlarm schema.
type EquipmentAlarmClient struct {
	config
}

// NewEquipmentAlarmClient returns a client for the EquipmentAlarm from the given config.
func NewEquipmentAlarmClient(c config) *EquipmentAlarmClient {
	return &EquipmentAlarmClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentalarm.Hooks(f(g(h())))`.
func (c *EquipmentAlarmClient) Use(hooks ...Hook) {
	c.hooks.EquipmentAlarm = append(c.hooks.EquipmentAlarm, hooks...)
}

// Create returns a builder for creating a EquipmentAlarm entity.
func (c *EquipmentAlarmClient) Create() *EquipmentAlarmCreate {
	mutation := newEquipmentAlarmMutation(c.config, OpCreate)
	return &EquipmentAlarmCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentAlarm entities.
func (c *EquipmentAlarmClient) CreateBulk(builders ...*EquipmentAlarmCreate) *EquipmentAlarmCreateBulk {
	return &EquipmentAlarmCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentAlarm.
func (c *EquipmentAlarmClient) Update() *EquipmentAlarmUpdate {
	mutation := newEquipmentAlarmMutation(c.config, OpUpdate)
	return &EquipmentAlarmUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentAlarmClient) UpdateOne(ea *EquipmentAlarm) *EquipmentAlarmUpdateOne {
	mutation := newEquipmentAlarmMutation(c.config, OpUpdateOne, withEquipmentAlarm(ea))
	return &EquipmentAlarmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentAlarmClient) UpdateOneID(id datasource.UUID) *EquipmentAlarmUpdateOne {
	mutation := newEquipmentAlarmMutation(c.config, OpUpdateOne, withEquipmentAlarmID(id))
	return &EquipmentAlarmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentAlarm.
func (c *EquipmentAlarmClient) Delete() *EquipmentAlarmDelete {
	mutation := newEquipmentAlarmMutation(c.config, OpDelete)
	return &EquipmentAlarmDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentAlarmClient) DeleteOne(ea *EquipmentAlarm) *EquipmentAlarmDeleteOne {
	return c.DeleteOneID(ea.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EquipmentAlarmClient) DeleteOneID(id datasource.UUID) *EquipmentAlarmDeleteOne {
	builder := c.Delete().Where(equipmentalarm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentAlarmDeleteOne{builder}
}

// Query returns a query builder for EquipmentAlarm.
func (c *EquipmentAlarmClient) Query() *EquipmentAlarmQuery {
	return &EquipmentAlarmQuery{
		config: c.config,
	}
}

// Get returns a EquipmentAlarm entity by its id.
func (c *EquipmentAlarmClient) Get(ctx context.Context, id datasource.UUID) (*EquipmentAlarm, error) {
	return c.Query().Unique(false).Where(equipmentalarm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentAlarmClient) GetX(ctx context.Context, id datasource.UUID) *EquipmentAlarm {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a EquipmentAlarm.
func (c *EquipmentAlarmClient) QueryEquipment(ea *EquipmentAlarm) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentalarm.Table, equipmentalarm.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentalarm.EquipmentTable, equipmentalarm.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentAlarmClient) Hooks() []Hook {
	return c.hooks.EquipmentAlarm
}

// EquipmentFirmwareEffectClient is a client for the EquipmentFirmwareEffect schema.
type EquipmentFirmwareEffectClient struct {
	config
}

// NewEquipmentFirmwareEffectClient returns a client for the EquipmentFirmwareEffect from the given config.
func NewEquipmentFirmwareEffectClient(c config) *EquipmentFirmwareEffectClient {
	return &EquipmentFirmwareEffectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentfirmwareeffect.Hooks(f(g(h())))`.
func (c *EquipmentFirmwareEffectClient) Use(hooks ...Hook) {
	c.hooks.EquipmentFirmwareEffect = append(c.hooks.EquipmentFirmwareEffect, hooks...)
}

// Create returns a builder for creating a EquipmentFirmwareEffect entity.
func (c *EquipmentFirmwareEffectClient) Create() *EquipmentFirmwareEffectCreate {
	mutation := newEquipmentFirmwareEffectMutation(c.config, OpCreate)
	return &EquipmentFirmwareEffectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentFirmwareEffect entities.
func (c *EquipmentFirmwareEffectClient) CreateBulk(builders ...*EquipmentFirmwareEffectCreate) *EquipmentFirmwareEffectCreateBulk {
	return &EquipmentFirmwareEffectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentFirmwareEffect.
func (c *EquipmentFirmwareEffectClient) Update() *EquipmentFirmwareEffectUpdate {
	mutation := newEquipmentFirmwareEffectMutation(c.config, OpUpdate)
	return &EquipmentFirmwareEffectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentFirmwareEffectClient) UpdateOne(efe *EquipmentFirmwareEffect) *EquipmentFirmwareEffectUpdateOne {
	mutation := newEquipmentFirmwareEffectMutation(c.config, OpUpdateOne, withEquipmentFirmwareEffect(efe))
	return &EquipmentFirmwareEffectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentFirmwareEffectClient) UpdateOneID(id datasource.UUID) *EquipmentFirmwareEffectUpdateOne {
	mutation := newEquipmentFirmwareEffectMutation(c.config, OpUpdateOne, withEquipmentFirmwareEffectID(id))
	return &EquipmentFirmwareEffectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentFirmwareEffect.
func (c *EquipmentFirmwareEffectClient) Delete() *EquipmentFirmwareEffectDelete {
	mutation := newEquipmentFirmwareEffectMutation(c.config, OpDelete)
	return &EquipmentFirmwareEffectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentFirmwareEffectClient) DeleteOne(efe *EquipmentFirmwareEffect) *EquipmentFirmwareEffectDeleteOne {
	return c.DeleteOneID(efe.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EquipmentFirmwareEffectClient) DeleteOneID(id datasource.UUID) *EquipmentFirmwareEffectDeleteOne {
	builder := c.Delete().Where(equipmentfirmwareeffect.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentFirmwareEffectDeleteOne{builder}
}

// Query returns a query builder for EquipmentFirmwareEffect.
func (c *EquipmentFirmwareEffectClient) Query() *EquipmentFirmwareEffectQuery {
	return &EquipmentFirmwareEffectQuery{
		config: c.config,
	}
}

// Get returns a EquipmentFirmwareEffect entity by its id.
func (c *EquipmentFirmwareEffectClient) Get(ctx context.Context, id datasource.UUID) (*EquipmentFirmwareEffect, error) {
	return c.Query().Unique(false).Where(equipmentfirmwareeffect.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentFirmwareEffectClient) GetX(ctx context.Context, id datasource.UUID) *EquipmentFirmwareEffect {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a EquipmentFirmwareEffect.
func (c *EquipmentFirmwareEffectClient) QueryEquipment(efe *EquipmentFirmwareEffect) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := efe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentfirmwareeffect.Table, equipmentfirmwareeffect.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentfirmwareeffect.EquipmentTable, equipmentfirmwareeffect.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(efe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFirmware queries the firmware edge of a EquipmentFirmwareEffect.
func (c *EquipmentFirmwareEffectClient) QueryFirmware(efe *EquipmentFirmwareEffect) *FirmwareQuery {
	query := &FirmwareQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := efe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentfirmwareeffect.Table, equipmentfirmwareeffect.FieldID, id),
			sqlgraph.To(firmware.Table, firmware.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentfirmwareeffect.FirmwareTable, equipmentfirmwareeffect.FirmwareColumn),
		)
		fromV = sqlgraph.Neighbors(efe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentFirmwareEffectClient) Hooks() []Hook {
	return c.hooks.EquipmentFirmwareEffect
}

// EquipmentInfoClient is a client for the EquipmentInfo schema.
type EquipmentInfoClient struct {
	config
}

// NewEquipmentInfoClient returns a client for the EquipmentInfo from the given config.
func NewEquipmentInfoClient(c config) *EquipmentInfoClient {
	return &EquipmentInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentinfo.Hooks(f(g(h())))`.
func (c *EquipmentInfoClient) Use(hooks ...Hook) {
	c.hooks.EquipmentInfo = append(c.hooks.EquipmentInfo, hooks...)
}

// Create returns a builder for creating a EquipmentInfo entity.
func (c *EquipmentInfoClient) Create() *EquipmentInfoCreate {
	mutation := newEquipmentInfoMutation(c.config, OpCreate)
	return &EquipmentInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentInfo entities.
func (c *EquipmentInfoClient) CreateBulk(builders ...*EquipmentInfoCreate) *EquipmentInfoCreateBulk {
	return &EquipmentInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentInfo.
func (c *EquipmentInfoClient) Update() *EquipmentInfoUpdate {
	mutation := newEquipmentInfoMutation(c.config, OpUpdate)
	return &EquipmentInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentInfoClient) UpdateOne(ei *EquipmentInfo) *EquipmentInfoUpdateOne {
	mutation := newEquipmentInfoMutation(c.config, OpUpdateOne, withEquipmentInfo(ei))
	return &EquipmentInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentInfoClient) UpdateOneID(id datasource.UUID) *EquipmentInfoUpdateOne {
	mutation := newEquipmentInfoMutation(c.config, OpUpdateOne, withEquipmentInfoID(id))
	return &EquipmentInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentInfo.
func (c *EquipmentInfoClient) Delete() *EquipmentInfoDelete {
	mutation := newEquipmentInfoMutation(c.config, OpDelete)
	return &EquipmentInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentInfoClient) DeleteOne(ei *EquipmentInfo) *EquipmentInfoDeleteOne {
	return c.DeleteOneID(ei.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EquipmentInfoClient) DeleteOneID(id datasource.UUID) *EquipmentInfoDeleteOne {
	builder := c.Delete().Where(equipmentinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentInfoDeleteOne{builder}
}

// Query returns a query builder for EquipmentInfo.
func (c *EquipmentInfoClient) Query() *EquipmentInfoQuery {
	return &EquipmentInfoQuery{
		config: c.config,
	}
}

// Get returns a EquipmentInfo entity by its id.
func (c *EquipmentInfoClient) Get(ctx context.Context, id datasource.UUID) (*EquipmentInfo, error) {
	return c.Query().Unique(false).Where(equipmentinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentInfoClient) GetX(ctx context.Context, id datasource.UUID) *EquipmentInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a EquipmentInfo.
func (c *EquipmentInfoClient) QueryEquipment(ei *EquipmentInfo) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentinfo.Table, equipmentinfo.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, equipmentinfo.EquipmentTable, equipmentinfo.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentInfoClient) Hooks() []Hook {
	return c.hooks.EquipmentInfo
}

// EquipmentIotClient is a client for the EquipmentIot schema.
type EquipmentIotClient struct {
	config
}

// NewEquipmentIotClient returns a client for the EquipmentIot from the given config.
func NewEquipmentIotClient(c config) *EquipmentIotClient {
	return &EquipmentIotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentiot.Hooks(f(g(h())))`.
func (c *EquipmentIotClient) Use(hooks ...Hook) {
	c.hooks.EquipmentIot = append(c.hooks.EquipmentIot, hooks...)
}

// Create returns a builder for creating a EquipmentIot entity.
func (c *EquipmentIotClient) Create() *EquipmentIotCreate {
	mutation := newEquipmentIotMutation(c.config, OpCreate)
	return &EquipmentIotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentIot entities.
func (c *EquipmentIotClient) CreateBulk(builders ...*EquipmentIotCreate) *EquipmentIotCreateBulk {
	return &EquipmentIotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentIot.
func (c *EquipmentIotClient) Update() *EquipmentIotUpdate {
	mutation := newEquipmentIotMutation(c.config, OpUpdate)
	return &EquipmentIotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentIotClient) UpdateOne(ei *EquipmentIot) *EquipmentIotUpdateOne {
	mutation := newEquipmentIotMutation(c.config, OpUpdateOne, withEquipmentIot(ei))
	return &EquipmentIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentIotClient) UpdateOneID(id datasource.UUID) *EquipmentIotUpdateOne {
	mutation := newEquipmentIotMutation(c.config, OpUpdateOne, withEquipmentIotID(id))
	return &EquipmentIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentIot.
func (c *EquipmentIotClient) Delete() *EquipmentIotDelete {
	mutation := newEquipmentIotMutation(c.config, OpDelete)
	return &EquipmentIotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentIotClient) DeleteOne(ei *EquipmentIot) *EquipmentIotDeleteOne {
	return c.DeleteOneID(ei.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EquipmentIotClient) DeleteOneID(id datasource.UUID) *EquipmentIotDeleteOne {
	builder := c.Delete().Where(equipmentiot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentIotDeleteOne{builder}
}

// Query returns a query builder for EquipmentIot.
func (c *EquipmentIotClient) Query() *EquipmentIotQuery {
	return &EquipmentIotQuery{
		config: c.config,
	}
}

// Get returns a EquipmentIot entity by its id.
func (c *EquipmentIotClient) Get(ctx context.Context, id datasource.UUID) (*EquipmentIot, error) {
	return c.Query().Unique(false).Where(equipmentiot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentIotClient) GetX(ctx context.Context, id datasource.UUID) *EquipmentIot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a EquipmentIot.
func (c *EquipmentIotClient) QueryEquipment(ei *EquipmentIot) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ei.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentiot.Table, equipmentiot.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, equipmentiot.EquipmentTable, equipmentiot.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ei.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentIotClient) Hooks() []Hook {
	return c.hooks.EquipmentIot
}

// EquipmentLogClient is a client for the EquipmentLog schema.
type EquipmentLogClient struct {
	config
}

// NewEquipmentLogClient returns a client for the EquipmentLog from the given config.
func NewEquipmentLogClient(c config) *EquipmentLogClient {
	return &EquipmentLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentlog.Hooks(f(g(h())))`.
func (c *EquipmentLogClient) Use(hooks ...Hook) {
	c.hooks.EquipmentLog = append(c.hooks.EquipmentLog, hooks...)
}

// Create returns a builder for creating a EquipmentLog entity.
func (c *EquipmentLogClient) Create() *EquipmentLogCreate {
	mutation := newEquipmentLogMutation(c.config, OpCreate)
	return &EquipmentLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentLog entities.
func (c *EquipmentLogClient) CreateBulk(builders ...*EquipmentLogCreate) *EquipmentLogCreateBulk {
	return &EquipmentLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentLog.
func (c *EquipmentLogClient) Update() *EquipmentLogUpdate {
	mutation := newEquipmentLogMutation(c.config, OpUpdate)
	return &EquipmentLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentLogClient) UpdateOne(el *EquipmentLog) *EquipmentLogUpdateOne {
	mutation := newEquipmentLogMutation(c.config, OpUpdateOne, withEquipmentLog(el))
	return &EquipmentLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentLogClient) UpdateOneID(id datasource.UUID) *EquipmentLogUpdateOne {
	mutation := newEquipmentLogMutation(c.config, OpUpdateOne, withEquipmentLogID(id))
	return &EquipmentLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentLog.
func (c *EquipmentLogClient) Delete() *EquipmentLogDelete {
	mutation := newEquipmentLogMutation(c.config, OpDelete)
	return &EquipmentLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EquipmentLogClient) DeleteOne(el *EquipmentLog) *EquipmentLogDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EquipmentLogClient) DeleteOneID(id datasource.UUID) *EquipmentLogDeleteOne {
	builder := c.Delete().Where(equipmentlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentLogDeleteOne{builder}
}

// Query returns a query builder for EquipmentLog.
func (c *EquipmentLogClient) Query() *EquipmentLogQuery {
	return &EquipmentLogQuery{
		config: c.config,
	}
}

// Get returns a EquipmentLog entity by its id.
func (c *EquipmentLogClient) Get(ctx context.Context, id datasource.UUID) (*EquipmentLog, error) {
	return c.Query().Unique(false).Where(equipmentlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentLogClient) GetX(ctx context.Context, id datasource.UUID) *EquipmentLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a EquipmentLog.
func (c *EquipmentLogClient) QueryEquipment(el *EquipmentLog) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentlog.Table, equipmentlog.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentlog.EquipmentTable, equipmentlog.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentLogClient) Hooks() []Hook {
	return c.hooks.EquipmentLog
}

// EvseClient is a client for the Evse schema.
type EvseClient struct {
	config
}

// NewEvseClient returns a client for the Evse from the given config.
func NewEvseClient(c config) *EvseClient {
	return &EvseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `evse.Hooks(f(g(h())))`.
func (c *EvseClient) Use(hooks ...Hook) {
	c.hooks.Evse = append(c.hooks.Evse, hooks...)
}

// Create returns a builder for creating a Evse entity.
func (c *EvseClient) Create() *EvseCreate {
	mutation := newEvseMutation(c.config, OpCreate)
	return &EvseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Evse entities.
func (c *EvseClient) CreateBulk(builders ...*EvseCreate) *EvseCreateBulk {
	return &EvseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Evse.
func (c *EvseClient) Update() *EvseUpdate {
	mutation := newEvseMutation(c.config, OpUpdate)
	return &EvseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EvseClient) UpdateOne(e *Evse) *EvseUpdateOne {
	mutation := newEvseMutation(c.config, OpUpdateOne, withEvse(e))
	return &EvseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EvseClient) UpdateOneID(id datasource.UUID) *EvseUpdateOne {
	mutation := newEvseMutation(c.config, OpUpdateOne, withEvseID(id))
	return &EvseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Evse.
func (c *EvseClient) Delete() *EvseDelete {
	mutation := newEvseMutation(c.config, OpDelete)
	return &EvseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EvseClient) DeleteOne(e *Evse) *EvseDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EvseClient) DeleteOneID(id datasource.UUID) *EvseDeleteOne {
	builder := c.Delete().Where(evse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EvseDeleteOne{builder}
}

// Query returns a query builder for Evse.
func (c *EvseClient) Query() *EvseQuery {
	return &EvseQuery{
		config: c.config,
	}
}

// Get returns a Evse entity by its id.
func (c *EvseClient) Get(ctx context.Context, id datasource.UUID) (*Evse, error) {
	return c.Query().Unique(false).Where(evse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EvseClient) GetX(ctx context.Context, id datasource.UUID) *Evse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Evse.
func (c *EvseClient) QueryEquipment(e *Evse) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(evse.Table, evse.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, evse.EquipmentTable, evse.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnector queries the connector edge of a Evse.
func (c *EvseClient) QueryConnector(e *Evse) *ConnectorQuery {
	query := &ConnectorQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(evse.Table, evse.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, evse.ConnectorTable, evse.ConnectorColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EvseClient) Hooks() []Hook {
	return c.hooks.Evse
}

// FirmwareClient is a client for the Firmware schema.
type FirmwareClient struct {
	config
}

// NewFirmwareClient returns a client for the Firmware from the given config.
func NewFirmwareClient(c config) *FirmwareClient {
	return &FirmwareClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `firmware.Hooks(f(g(h())))`.
func (c *FirmwareClient) Use(hooks ...Hook) {
	c.hooks.Firmware = append(c.hooks.Firmware, hooks...)
}

// Create returns a builder for creating a Firmware entity.
func (c *FirmwareClient) Create() *FirmwareCreate {
	mutation := newFirmwareMutation(c.config, OpCreate)
	return &FirmwareCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Firmware entities.
func (c *FirmwareClient) CreateBulk(builders ...*FirmwareCreate) *FirmwareCreateBulk {
	return &FirmwareCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Firmware.
func (c *FirmwareClient) Update() *FirmwareUpdate {
	mutation := newFirmwareMutation(c.config, OpUpdate)
	return &FirmwareUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FirmwareClient) UpdateOne(f *Firmware) *FirmwareUpdateOne {
	mutation := newFirmwareMutation(c.config, OpUpdateOne, withFirmware(f))
	return &FirmwareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FirmwareClient) UpdateOneID(id datasource.UUID) *FirmwareUpdateOne {
	mutation := newFirmwareMutation(c.config, OpUpdateOne, withFirmwareID(id))
	return &FirmwareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Firmware.
func (c *FirmwareClient) Delete() *FirmwareDelete {
	mutation := newFirmwareMutation(c.config, OpDelete)
	return &FirmwareDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FirmwareClient) DeleteOne(f *Firmware) *FirmwareDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FirmwareClient) DeleteOneID(id datasource.UUID) *FirmwareDeleteOne {
	builder := c.Delete().Where(firmware.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FirmwareDeleteOne{builder}
}

// Query returns a query builder for Firmware.
func (c *FirmwareClient) Query() *FirmwareQuery {
	return &FirmwareQuery{
		config: c.config,
	}
}

// Get returns a Firmware entity by its id.
func (c *FirmwareClient) Get(ctx context.Context, id datasource.UUID) (*Firmware, error) {
	return c.Query().Unique(false).Where(firmware.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FirmwareClient) GetX(ctx context.Context, id datasource.UUID) *Firmware {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipmentFirmwareEffect queries the equipment_firmware_effect edge of a Firmware.
func (c *FirmwareClient) QueryEquipmentFirmwareEffect(f *Firmware) *EquipmentFirmwareEffectQuery {
	query := &EquipmentFirmwareEffectQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(firmware.Table, firmware.FieldID, id),
			sqlgraph.To(equipmentfirmwareeffect.Table, equipmentfirmwareeffect.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, firmware.EquipmentFirmwareEffectTable, firmware.EquipmentFirmwareEffectColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModel queries the model edge of a Firmware.
func (c *FirmwareClient) QueryModel(f *Firmware) *ModelQuery {
	query := &ModelQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(firmware.Table, firmware.FieldID, id),
			sqlgraph.To(model.Table, model.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, firmware.ModelTable, firmware.ModelColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManufacturer queries the manufacturer edge of a Firmware.
func (c *FirmwareClient) QueryManufacturer(f *Firmware) *ManufacturerQuery {
	query := &ManufacturerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(firmware.Table, firmware.FieldID, id),
			sqlgraph.To(manufacturer.Table, manufacturer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, firmware.ManufacturerTable, firmware.ManufacturerColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FirmwareClient) Hooks() []Hook {
	return c.hooks.Firmware
}

// ManufacturerClient is a client for the Manufacturer schema.
type ManufacturerClient struct {
	config
}

// NewManufacturerClient returns a client for the Manufacturer from the given config.
func NewManufacturerClient(c config) *ManufacturerClient {
	return &ManufacturerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manufacturer.Hooks(f(g(h())))`.
func (c *ManufacturerClient) Use(hooks ...Hook) {
	c.hooks.Manufacturer = append(c.hooks.Manufacturer, hooks...)
}

// Create returns a builder for creating a Manufacturer entity.
func (c *ManufacturerClient) Create() *ManufacturerCreate {
	mutation := newManufacturerMutation(c.config, OpCreate)
	return &ManufacturerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Manufacturer entities.
func (c *ManufacturerClient) CreateBulk(builders ...*ManufacturerCreate) *ManufacturerCreateBulk {
	return &ManufacturerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Manufacturer.
func (c *ManufacturerClient) Update() *ManufacturerUpdate {
	mutation := newManufacturerMutation(c.config, OpUpdate)
	return &ManufacturerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManufacturerClient) UpdateOne(m *Manufacturer) *ManufacturerUpdateOne {
	mutation := newManufacturerMutation(c.config, OpUpdateOne, withManufacturer(m))
	return &ManufacturerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManufacturerClient) UpdateOneID(id datasource.UUID) *ManufacturerUpdateOne {
	mutation := newManufacturerMutation(c.config, OpUpdateOne, withManufacturerID(id))
	return &ManufacturerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manufacturer.
func (c *ManufacturerClient) Delete() *ManufacturerDelete {
	mutation := newManufacturerMutation(c.config, OpDelete)
	return &ManufacturerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManufacturerClient) DeleteOne(m *Manufacturer) *ManufacturerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ManufacturerClient) DeleteOneID(id datasource.UUID) *ManufacturerDeleteOne {
	builder := c.Delete().Where(manufacturer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManufacturerDeleteOne{builder}
}

// Query returns a query builder for Manufacturer.
func (c *ManufacturerClient) Query() *ManufacturerQuery {
	return &ManufacturerQuery{
		config: c.config,
	}
}

// Get returns a Manufacturer entity by its id.
func (c *ManufacturerClient) Get(ctx context.Context, id datasource.UUID) (*Manufacturer, error) {
	return c.Query().Unique(false).Where(manufacturer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManufacturerClient) GetX(ctx context.Context, id datasource.UUID) *Manufacturer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFirmware queries the firmware edge of a Manufacturer.
func (c *ManufacturerClient) QueryFirmware(m *Manufacturer) *FirmwareQuery {
	query := &FirmwareQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manufacturer.Table, manufacturer.FieldID, id),
			sqlgraph.To(firmware.Table, firmware.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, manufacturer.FirmwareTable, manufacturer.FirmwareColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManufacturerClient) Hooks() []Hook {
	return c.hooks.Manufacturer
}

// ModelClient is a client for the Model schema.
type ModelClient struct {
	config
}

// NewModelClient returns a client for the Model from the given config.
func NewModelClient(c config) *ModelClient {
	return &ModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `model.Hooks(f(g(h())))`.
func (c *ModelClient) Use(hooks ...Hook) {
	c.hooks.Model = append(c.hooks.Model, hooks...)
}

// Create returns a builder for creating a Model entity.
func (c *ModelClient) Create() *ModelCreate {
	mutation := newModelMutation(c.config, OpCreate)
	return &ModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Model entities.
func (c *ModelClient) CreateBulk(builders ...*ModelCreate) *ModelCreateBulk {
	return &ModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Model.
func (c *ModelClient) Update() *ModelUpdate {
	mutation := newModelMutation(c.config, OpUpdate)
	return &ModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ModelClient) UpdateOne(m *Model) *ModelUpdateOne {
	mutation := newModelMutation(c.config, OpUpdateOne, withModel(m))
	return &ModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ModelClient) UpdateOneID(id datasource.UUID) *ModelUpdateOne {
	mutation := newModelMutation(c.config, OpUpdateOne, withModelID(id))
	return &ModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Model.
func (c *ModelClient) Delete() *ModelDelete {
	mutation := newModelMutation(c.config, OpDelete)
	return &ModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ModelClient) DeleteOne(m *Model) *ModelDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ModelClient) DeleteOneID(id datasource.UUID) *ModelDeleteOne {
	builder := c.Delete().Where(model.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ModelDeleteOne{builder}
}

// Query returns a query builder for Model.
func (c *ModelClient) Query() *ModelQuery {
	return &ModelQuery{
		config: c.config,
	}
}

// Get returns a Model entity by its id.
func (c *ModelClient) Get(ctx context.Context, id datasource.UUID) (*Model, error) {
	return c.Query().Unique(false).Where(model.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ModelClient) GetX(ctx context.Context, id datasource.UUID) *Model {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFirmware queries the firmware edge of a Model.
func (c *ModelClient) QueryFirmware(m *Model) *FirmwareQuery {
	query := &FirmwareQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(model.Table, model.FieldID, id),
			sqlgraph.To(firmware.Table, firmware.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, model.FirmwareTable, model.FirmwareColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ModelClient) Hooks() []Hook {
	return c.hooks.Model
}

// OrderEventClient is a client for the OrderEvent schema.
type OrderEventClient struct {
	config
}

// NewOrderEventClient returns a client for the OrderEvent from the given config.
func NewOrderEventClient(c config) *OrderEventClient {
	return &OrderEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderevent.Hooks(f(g(h())))`.
func (c *OrderEventClient) Use(hooks ...Hook) {
	c.hooks.OrderEvent = append(c.hooks.OrderEvent, hooks...)
}

// Create returns a builder for creating a OrderEvent entity.
func (c *OrderEventClient) Create() *OrderEventCreate {
	mutation := newOrderEventMutation(c.config, OpCreate)
	return &OrderEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderEvent entities.
func (c *OrderEventClient) CreateBulk(builders ...*OrderEventCreate) *OrderEventCreateBulk {
	return &OrderEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderEvent.
func (c *OrderEventClient) Update() *OrderEventUpdate {
	mutation := newOrderEventMutation(c.config, OpUpdate)
	return &OrderEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderEventClient) UpdateOne(oe *OrderEvent) *OrderEventUpdateOne {
	mutation := newOrderEventMutation(c.config, OpUpdateOne, withOrderEvent(oe))
	return &OrderEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderEventClient) UpdateOneID(id datasource.UUID) *OrderEventUpdateOne {
	mutation := newOrderEventMutation(c.config, OpUpdateOne, withOrderEventID(id))
	return &OrderEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderEvent.
func (c *OrderEventClient) Delete() *OrderEventDelete {
	mutation := newOrderEventMutation(c.config, OpDelete)
	return &OrderEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderEventClient) DeleteOne(oe *OrderEvent) *OrderEventDeleteOne {
	return c.DeleteOneID(oe.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderEventClient) DeleteOneID(id datasource.UUID) *OrderEventDeleteOne {
	builder := c.Delete().Where(orderevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderEventDeleteOne{builder}
}

// Query returns a query builder for OrderEvent.
func (c *OrderEventClient) Query() *OrderEventQuery {
	return &OrderEventQuery{
		config: c.config,
	}
}

// Get returns a OrderEvent entity by its id.
func (c *OrderEventClient) Get(ctx context.Context, id datasource.UUID) (*OrderEvent, error) {
	return c.Query().Unique(false).Where(orderevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderEventClient) GetX(ctx context.Context, id datasource.UUID) *OrderEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderInfo queries the order_info edge of a OrderEvent.
func (c *OrderEventClient) QueryOrderInfo(oe *OrderEvent) *OrderInfoQuery {
	query := &OrderInfoQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderevent.Table, orderevent.FieldID, id),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderevent.OrderInfoTable, orderevent.OrderInfoColumn),
		)
		fromV = sqlgraph.Neighbors(oe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderEventClient) Hooks() []Hook {
	return c.hooks.OrderEvent
}

// OrderInfoClient is a client for the OrderInfo schema.
type OrderInfoClient struct {
	config
}

// NewOrderInfoClient returns a client for the OrderInfo from the given config.
func NewOrderInfoClient(c config) *OrderInfoClient {
	return &OrderInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderinfo.Hooks(f(g(h())))`.
func (c *OrderInfoClient) Use(hooks ...Hook) {
	c.hooks.OrderInfo = append(c.hooks.OrderInfo, hooks...)
}

// Create returns a builder for creating a OrderInfo entity.
func (c *OrderInfoClient) Create() *OrderInfoCreate {
	mutation := newOrderInfoMutation(c.config, OpCreate)
	return &OrderInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderInfo entities.
func (c *OrderInfoClient) CreateBulk(builders ...*OrderInfoCreate) *OrderInfoCreateBulk {
	return &OrderInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderInfo.
func (c *OrderInfoClient) Update() *OrderInfoUpdate {
	mutation := newOrderInfoMutation(c.config, OpUpdate)
	return &OrderInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderInfoClient) UpdateOne(oi *OrderInfo) *OrderInfoUpdateOne {
	mutation := newOrderInfoMutation(c.config, OpUpdateOne, withOrderInfo(oi))
	return &OrderInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderInfoClient) UpdateOneID(id datasource.UUID) *OrderInfoUpdateOne {
	mutation := newOrderInfoMutation(c.config, OpUpdateOne, withOrderInfoID(id))
	return &OrderInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderInfo.
func (c *OrderInfoClient) Delete() *OrderInfoDelete {
	mutation := newOrderInfoMutation(c.config, OpDelete)
	return &OrderInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderInfoClient) DeleteOne(oi *OrderInfo) *OrderInfoDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderInfoClient) DeleteOneID(id datasource.UUID) *OrderInfoDeleteOne {
	builder := c.Delete().Where(orderinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderInfoDeleteOne{builder}
}

// Query returns a query builder for OrderInfo.
func (c *OrderInfoClient) Query() *OrderInfoQuery {
	return &OrderInfoQuery{
		config: c.config,
	}
}

// Get returns a OrderInfo entity by its id.
func (c *OrderInfoClient) Get(ctx context.Context, id datasource.UUID) (*OrderInfo, error) {
	return c.Query().Unique(false).Where(orderinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderInfoClient) GetX(ctx context.Context, id datasource.UUID) *OrderInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConnector queries the connector edge of a OrderInfo.
func (c *OrderInfoClient) QueryConnector(oi *OrderInfo) *ConnectorQuery {
	query := &ConnectorQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderinfo.ConnectorTable, orderinfo.ConnectorColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a OrderInfo.
func (c *OrderInfoClient) QueryEquipment(oi *OrderInfo) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderinfo.EquipmentTable, orderinfo.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderEvent queries the order_event edge of a OrderInfo.
func (c *OrderInfoClient) QueryOrderEvent(oi *OrderInfo) *OrderEventQuery {
	query := &OrderEventQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderinfo.Table, orderinfo.FieldID, id),
			sqlgraph.To(orderevent.Table, orderevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderinfo.OrderEventTable, orderinfo.OrderEventColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderInfoClient) Hooks() []Hook {
	return c.hooks.OrderInfo
}

// ReservationClient is a client for the Reservation schema.
type ReservationClient struct {
	config
}

// NewReservationClient returns a client for the Reservation from the given config.
func NewReservationClient(c config) *ReservationClient {
	return &ReservationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reservation.Hooks(f(g(h())))`.
func (c *ReservationClient) Use(hooks ...Hook) {
	c.hooks.Reservation = append(c.hooks.Reservation, hooks...)
}

// Create returns a builder for creating a Reservation entity.
func (c *ReservationClient) Create() *ReservationCreate {
	mutation := newReservationMutation(c.config, OpCreate)
	return &ReservationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reservation entities.
func (c *ReservationClient) CreateBulk(builders ...*ReservationCreate) *ReservationCreateBulk {
	return &ReservationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reservation.
func (c *ReservationClient) Update() *ReservationUpdate {
	mutation := newReservationMutation(c.config, OpUpdate)
	return &ReservationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReservationClient) UpdateOne(r *Reservation) *ReservationUpdateOne {
	mutation := newReservationMutation(c.config, OpUpdateOne, withReservation(r))
	return &ReservationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReservationClient) UpdateOneID(id datasource.UUID) *ReservationUpdateOne {
	mutation := newReservationMutation(c.config, OpUpdateOne, withReservationID(id))
	return &ReservationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reservation.
func (c *ReservationClient) Delete() *ReservationDelete {
	mutation := newReservationMutation(c.config, OpDelete)
	return &ReservationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReservationClient) DeleteOne(r *Reservation) *ReservationDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ReservationClient) DeleteOneID(id datasource.UUID) *ReservationDeleteOne {
	builder := c.Delete().Where(reservation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReservationDeleteOne{builder}
}

// Query returns a query builder for Reservation.
func (c *ReservationClient) Query() *ReservationQuery {
	return &ReservationQuery{
		config: c.config,
	}
}

// Get returns a Reservation entity by its id.
func (c *ReservationClient) Get(ctx context.Context, id datasource.UUID) (*Reservation, error) {
	return c.Query().Unique(false).Where(reservation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReservationClient) GetX(ctx context.Context, id datasource.UUID) *Reservation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Reservation.
func (c *ReservationClient) QueryEquipment(r *Reservation) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reservation.Table, reservation.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reservation.EquipmentTable, reservation.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnector queries the connector edge of a Reservation.
func (c *ReservationClient) QueryConnector(r *Reservation) *ConnectorQuery {
	query := &ConnectorQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reservation.Table, reservation.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reservation.ConnectorTable, reservation.ConnectorColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReservationClient) Hooks() []Hook {
	return c.hooks.Reservation
}

// SmartChargingEffectClient is a client for the SmartChargingEffect schema.
type SmartChargingEffectClient struct {
	config
}

// NewSmartChargingEffectClient returns a client for the SmartChargingEffect from the given config.
func NewSmartChargingEffectClient(c config) *SmartChargingEffectClient {
	return &SmartChargingEffectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smartchargingeffect.Hooks(f(g(h())))`.
func (c *SmartChargingEffectClient) Use(hooks ...Hook) {
	c.hooks.SmartChargingEffect = append(c.hooks.SmartChargingEffect, hooks...)
}

// Create returns a builder for creating a SmartChargingEffect entity.
func (c *SmartChargingEffectClient) Create() *SmartChargingEffectCreate {
	mutation := newSmartChargingEffectMutation(c.config, OpCreate)
	return &SmartChargingEffectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SmartChargingEffect entities.
func (c *SmartChargingEffectClient) CreateBulk(builders ...*SmartChargingEffectCreate) *SmartChargingEffectCreateBulk {
	return &SmartChargingEffectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SmartChargingEffect.
func (c *SmartChargingEffectClient) Update() *SmartChargingEffectUpdate {
	mutation := newSmartChargingEffectMutation(c.config, OpUpdate)
	return &SmartChargingEffectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SmartChargingEffectClient) UpdateOne(sce *SmartChargingEffect) *SmartChargingEffectUpdateOne {
	mutation := newSmartChargingEffectMutation(c.config, OpUpdateOne, withSmartChargingEffect(sce))
	return &SmartChargingEffectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SmartChargingEffectClient) UpdateOneID(id datasource.UUID) *SmartChargingEffectUpdateOne {
	mutation := newSmartChargingEffectMutation(c.config, OpUpdateOne, withSmartChargingEffectID(id))
	return &SmartChargingEffectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SmartChargingEffect.
func (c *SmartChargingEffectClient) Delete() *SmartChargingEffectDelete {
	mutation := newSmartChargingEffectMutation(c.config, OpDelete)
	return &SmartChargingEffectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SmartChargingEffectClient) DeleteOne(sce *SmartChargingEffect) *SmartChargingEffectDeleteOne {
	return c.DeleteOneID(sce.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SmartChargingEffectClient) DeleteOneID(id datasource.UUID) *SmartChargingEffectDeleteOne {
	builder := c.Delete().Where(smartchargingeffect.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SmartChargingEffectDeleteOne{builder}
}

// Query returns a query builder for SmartChargingEffect.
func (c *SmartChargingEffectClient) Query() *SmartChargingEffectQuery {
	return &SmartChargingEffectQuery{
		config: c.config,
	}
}

// Get returns a SmartChargingEffect entity by its id.
func (c *SmartChargingEffectClient) Get(ctx context.Context, id datasource.UUID) (*SmartChargingEffect, error) {
	return c.Query().Unique(false).Where(smartchargingeffect.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SmartChargingEffectClient) GetX(ctx context.Context, id datasource.UUID) *SmartChargingEffect {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a SmartChargingEffect.
func (c *SmartChargingEffectClient) QueryEquipment(sce *SmartChargingEffect) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(smartchargingeffect.Table, smartchargingeffect.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, smartchargingeffect.EquipmentTable, smartchargingeffect.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SmartChargingEffectClient) Hooks() []Hook {
	return c.hooks.SmartChargingEffect
}
