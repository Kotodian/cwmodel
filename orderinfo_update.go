// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/cwmodel/connector"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/orderevent"
	"github.com/Kotodian/cwmodel/orderinfo"
	"github.com/Kotodian/cwmodel/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// OrderInfoUpdate is the builder for updating OrderInfo entities.
type OrderInfoUpdate struct {
	config
	hooks    []Hook
	mutation *OrderInfoMutation
}

// Where appends a list predicates to the OrderInfoUpdate builder.
func (oiu *OrderInfoUpdate) Where(ps ...predicate.OrderInfo) *OrderInfoUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetVersion sets the "version" field.
func (oiu *OrderInfoUpdate) SetVersion(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetVersion()
	oiu.mutation.SetVersion(i)
	return oiu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableVersion(i *int64) *OrderInfoUpdate {
	if i != nil {
		oiu.SetVersion(*i)
	}
	return oiu
}

// AddVersion adds i to the "version" field.
func (oiu *OrderInfoUpdate) AddVersion(i int64) *OrderInfoUpdate {
	oiu.mutation.AddVersion(i)
	return oiu
}

// SetUpdatedBy sets the "updated_by" field.
func (oiu *OrderInfoUpdate) SetUpdatedBy(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.ResetUpdatedBy()
	oiu.mutation.SetUpdatedBy(d)
	return oiu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableUpdatedBy(d *datasource.UUID) *OrderInfoUpdate {
	if d != nil {
		oiu.SetUpdatedBy(*d)
	}
	return oiu
}

// AddUpdatedBy adds d to the "updated_by" field.
func (oiu *OrderInfoUpdate) AddUpdatedBy(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.AddUpdatedBy(d)
	return oiu
}

// SetUpdatedAt sets the "updated_at" field.
func (oiu *OrderInfoUpdate) SetUpdatedAt(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetUpdatedAt()
	oiu.mutation.SetUpdatedAt(i)
	return oiu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (oiu *OrderInfoUpdate) AddUpdatedAt(i int64) *OrderInfoUpdate {
	oiu.mutation.AddUpdatedAt(i)
	return oiu
}

// SetEquipmentID sets the "equipment_id" field.
func (oiu *OrderInfoUpdate) SetEquipmentID(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.SetEquipmentID(d)
	return oiu
}

// SetConnectorID sets the "connector_id" field.
func (oiu *OrderInfoUpdate) SetConnectorID(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.SetConnectorID(d)
	return oiu
}

// SetRemoteStartID sets the "remote_start_id" field.
func (oiu *OrderInfoUpdate) SetRemoteStartID(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetRemoteStartID()
	oiu.mutation.SetRemoteStartID(i)
	return oiu
}

// SetNillableRemoteStartID sets the "remote_start_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableRemoteStartID(i *int64) *OrderInfoUpdate {
	if i != nil {
		oiu.SetRemoteStartID(*i)
	}
	return oiu
}

// AddRemoteStartID adds i to the "remote_start_id" field.
func (oiu *OrderInfoUpdate) AddRemoteStartID(i int64) *OrderInfoUpdate {
	oiu.mutation.AddRemoteStartID(i)
	return oiu
}

// ClearRemoteStartID clears the value of the "remote_start_id" field.
func (oiu *OrderInfoUpdate) ClearRemoteStartID() *OrderInfoUpdate {
	oiu.mutation.ClearRemoteStartID()
	return oiu
}

// SetTransactionID sets the "transaction_id" field.
func (oiu *OrderInfoUpdate) SetTransactionID(s string) *OrderInfoUpdate {
	oiu.mutation.SetTransactionID(s)
	return oiu
}

// SetAuthorizationID sets the "authorization_id" field.
func (oiu *OrderInfoUpdate) SetAuthorizationID(s string) *OrderInfoUpdate {
	oiu.mutation.SetAuthorizationID(s)
	return oiu
}

// SetNillableAuthorizationID sets the "authorization_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableAuthorizationID(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetAuthorizationID(*s)
	}
	return oiu
}

// ClearAuthorizationID clears the value of the "authorization_id" field.
func (oiu *OrderInfoUpdate) ClearAuthorizationID() *OrderInfoUpdate {
	oiu.mutation.ClearAuthorizationID()
	return oiu
}

// SetAuthorizationMode sets the "authorization_mode" field.
func (oiu *OrderInfoUpdate) SetAuthorizationMode(i int) *OrderInfoUpdate {
	oiu.mutation.ResetAuthorizationMode()
	oiu.mutation.SetAuthorizationMode(i)
	return oiu
}

// SetNillableAuthorizationMode sets the "authorization_mode" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableAuthorizationMode(i *int) *OrderInfoUpdate {
	if i != nil {
		oiu.SetAuthorizationMode(*i)
	}
	return oiu
}

// AddAuthorizationMode adds i to the "authorization_mode" field.
func (oiu *OrderInfoUpdate) AddAuthorizationMode(i int) *OrderInfoUpdate {
	oiu.mutation.AddAuthorizationMode(i)
	return oiu
}

// ClearAuthorizationMode clears the value of the "authorization_mode" field.
func (oiu *OrderInfoUpdate) ClearAuthorizationMode() *OrderInfoUpdate {
	oiu.mutation.ClearAuthorizationMode()
	return oiu
}

// SetCustomerID sets the "customer_id" field.
func (oiu *OrderInfoUpdate) SetCustomerID(s string) *OrderInfoUpdate {
	oiu.mutation.SetCustomerID(s)
	return oiu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableCustomerID(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetCustomerID(*s)
	}
	return oiu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (oiu *OrderInfoUpdate) ClearCustomerID() *OrderInfoUpdate {
	oiu.mutation.ClearCustomerID()
	return oiu
}

// SetCallerOrderID sets the "caller_order_id" field.
func (oiu *OrderInfoUpdate) SetCallerOrderID(s string) *OrderInfoUpdate {
	oiu.mutation.SetCallerOrderID(s)
	return oiu
}

// SetNillableCallerOrderID sets the "caller_order_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableCallerOrderID(s *string) *OrderInfoUpdate {
	if s != nil {
		oiu.SetCallerOrderID(*s)
	}
	return oiu
}

// ClearCallerOrderID clears the value of the "caller_order_id" field.
func (oiu *OrderInfoUpdate) ClearCallerOrderID() *OrderInfoUpdate {
	oiu.mutation.ClearCallerOrderID()
	return oiu
}

// SetTotalElectricity sets the "total_electricity" field.
func (oiu *OrderInfoUpdate) SetTotalElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.ResetTotalElectricity()
	oiu.mutation.SetTotalElectricity(f)
	return oiu
}

// SetNillableTotalElectricity sets the "total_electricity" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableTotalElectricity(f *float64) *OrderInfoUpdate {
	if f != nil {
		oiu.SetTotalElectricity(*f)
	}
	return oiu
}

// AddTotalElectricity adds f to the "total_electricity" field.
func (oiu *OrderInfoUpdate) AddTotalElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.AddTotalElectricity(f)
	return oiu
}

// ClearTotalElectricity clears the value of the "total_electricity" field.
func (oiu *OrderInfoUpdate) ClearTotalElectricity() *OrderInfoUpdate {
	oiu.mutation.ClearTotalElectricity()
	return oiu
}

// SetChargeStartElectricity sets the "charge_start_electricity" field.
func (oiu *OrderInfoUpdate) SetChargeStartElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.ResetChargeStartElectricity()
	oiu.mutation.SetChargeStartElectricity(f)
	return oiu
}

// SetNillableChargeStartElectricity sets the "charge_start_electricity" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableChargeStartElectricity(f *float64) *OrderInfoUpdate {
	if f != nil {
		oiu.SetChargeStartElectricity(*f)
	}
	return oiu
}

// AddChargeStartElectricity adds f to the "charge_start_electricity" field.
func (oiu *OrderInfoUpdate) AddChargeStartElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.AddChargeStartElectricity(f)
	return oiu
}

// ClearChargeStartElectricity clears the value of the "charge_start_electricity" field.
func (oiu *OrderInfoUpdate) ClearChargeStartElectricity() *OrderInfoUpdate {
	oiu.mutation.ClearChargeStartElectricity()
	return oiu
}

// SetChargeFinalElectricity sets the "charge_final_electricity" field.
func (oiu *OrderInfoUpdate) SetChargeFinalElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.ResetChargeFinalElectricity()
	oiu.mutation.SetChargeFinalElectricity(f)
	return oiu
}

// SetNillableChargeFinalElectricity sets the "charge_final_electricity" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableChargeFinalElectricity(f *float64) *OrderInfoUpdate {
	if f != nil {
		oiu.SetChargeFinalElectricity(*f)
	}
	return oiu
}

// AddChargeFinalElectricity adds f to the "charge_final_electricity" field.
func (oiu *OrderInfoUpdate) AddChargeFinalElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.AddChargeFinalElectricity(f)
	return oiu
}

// ClearChargeFinalElectricity clears the value of the "charge_final_electricity" field.
func (oiu *OrderInfoUpdate) ClearChargeFinalElectricity() *OrderInfoUpdate {
	oiu.mutation.ClearChargeFinalElectricity()
	return oiu
}

// SetSharpElectricity sets the "sharp_electricity" field.
func (oiu *OrderInfoUpdate) SetSharpElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.ResetSharpElectricity()
	oiu.mutation.SetSharpElectricity(f)
	return oiu
}

// SetNillableSharpElectricity sets the "sharp_electricity" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableSharpElectricity(f *float64) *OrderInfoUpdate {
	if f != nil {
		oiu.SetSharpElectricity(*f)
	}
	return oiu
}

// AddSharpElectricity adds f to the "sharp_electricity" field.
func (oiu *OrderInfoUpdate) AddSharpElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.AddSharpElectricity(f)
	return oiu
}

// ClearSharpElectricity clears the value of the "sharp_electricity" field.
func (oiu *OrderInfoUpdate) ClearSharpElectricity() *OrderInfoUpdate {
	oiu.mutation.ClearSharpElectricity()
	return oiu
}

// SetPeakElectricity sets the "peak_electricity" field.
func (oiu *OrderInfoUpdate) SetPeakElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.ResetPeakElectricity()
	oiu.mutation.SetPeakElectricity(f)
	return oiu
}

// SetNillablePeakElectricity sets the "peak_electricity" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillablePeakElectricity(f *float64) *OrderInfoUpdate {
	if f != nil {
		oiu.SetPeakElectricity(*f)
	}
	return oiu
}

// AddPeakElectricity adds f to the "peak_electricity" field.
func (oiu *OrderInfoUpdate) AddPeakElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.AddPeakElectricity(f)
	return oiu
}

// ClearPeakElectricity clears the value of the "peak_electricity" field.
func (oiu *OrderInfoUpdate) ClearPeakElectricity() *OrderInfoUpdate {
	oiu.mutation.ClearPeakElectricity()
	return oiu
}

// SetFlatElectricity sets the "flat_electricity" field.
func (oiu *OrderInfoUpdate) SetFlatElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.ResetFlatElectricity()
	oiu.mutation.SetFlatElectricity(f)
	return oiu
}

// SetNillableFlatElectricity sets the "flat_electricity" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableFlatElectricity(f *float64) *OrderInfoUpdate {
	if f != nil {
		oiu.SetFlatElectricity(*f)
	}
	return oiu
}

// AddFlatElectricity adds f to the "flat_electricity" field.
func (oiu *OrderInfoUpdate) AddFlatElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.AddFlatElectricity(f)
	return oiu
}

// ClearFlatElectricity clears the value of the "flat_electricity" field.
func (oiu *OrderInfoUpdate) ClearFlatElectricity() *OrderInfoUpdate {
	oiu.mutation.ClearFlatElectricity()
	return oiu
}

// SetValleyElectricity sets the "valley_electricity" field.
func (oiu *OrderInfoUpdate) SetValleyElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.ResetValleyElectricity()
	oiu.mutation.SetValleyElectricity(f)
	return oiu
}

// SetNillableValleyElectricity sets the "valley_electricity" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableValleyElectricity(f *float64) *OrderInfoUpdate {
	if f != nil {
		oiu.SetValleyElectricity(*f)
	}
	return oiu
}

// AddValleyElectricity adds f to the "valley_electricity" field.
func (oiu *OrderInfoUpdate) AddValleyElectricity(f float64) *OrderInfoUpdate {
	oiu.mutation.AddValleyElectricity(f)
	return oiu
}

// ClearValleyElectricity clears the value of the "valley_electricity" field.
func (oiu *OrderInfoUpdate) ClearValleyElectricity() *OrderInfoUpdate {
	oiu.mutation.ClearValleyElectricity()
	return oiu
}

// SetStopReasonCode sets the "stop_reason_code" field.
func (oiu *OrderInfoUpdate) SetStopReasonCode(i int32) *OrderInfoUpdate {
	oiu.mutation.ResetStopReasonCode()
	oiu.mutation.SetStopReasonCode(i)
	return oiu
}

// SetNillableStopReasonCode sets the "stop_reason_code" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableStopReasonCode(i *int32) *OrderInfoUpdate {
	if i != nil {
		oiu.SetStopReasonCode(*i)
	}
	return oiu
}

// AddStopReasonCode adds i to the "stop_reason_code" field.
func (oiu *OrderInfoUpdate) AddStopReasonCode(i int32) *OrderInfoUpdate {
	oiu.mutation.AddStopReasonCode(i)
	return oiu
}

// ClearStopReasonCode clears the value of the "stop_reason_code" field.
func (oiu *OrderInfoUpdate) ClearStopReasonCode() *OrderInfoUpdate {
	oiu.mutation.ClearStopReasonCode()
	return oiu
}

// SetState sets the "state" field.
func (oiu *OrderInfoUpdate) SetState(i int) *OrderInfoUpdate {
	oiu.mutation.ResetState()
	oiu.mutation.SetState(i)
	return oiu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableState(i *int) *OrderInfoUpdate {
	if i != nil {
		oiu.SetState(*i)
	}
	return oiu
}

// AddState adds i to the "state" field.
func (oiu *OrderInfoUpdate) AddState(i int) *OrderInfoUpdate {
	oiu.mutation.AddState(i)
	return oiu
}

// ClearState clears the value of the "state" field.
func (oiu *OrderInfoUpdate) ClearState() *OrderInfoUpdate {
	oiu.mutation.ClearState()
	return oiu
}

// SetOffline sets the "offline" field.
func (oiu *OrderInfoUpdate) SetOffline(b bool) *OrderInfoUpdate {
	oiu.mutation.SetOffline(b)
	return oiu
}

// SetPriceSchemeReleaseID sets the "price_scheme_release_id" field.
func (oiu *OrderInfoUpdate) SetPriceSchemeReleaseID(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetPriceSchemeReleaseID()
	oiu.mutation.SetPriceSchemeReleaseID(i)
	return oiu
}

// AddPriceSchemeReleaseID adds i to the "price_scheme_release_id" field.
func (oiu *OrderInfoUpdate) AddPriceSchemeReleaseID(i int64) *OrderInfoUpdate {
	oiu.mutation.AddPriceSchemeReleaseID(i)
	return oiu
}

// SetOrderStartTime sets the "order_start_time" field.
func (oiu *OrderInfoUpdate) SetOrderStartTime(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetOrderStartTime()
	oiu.mutation.SetOrderStartTime(i)
	return oiu
}

// SetNillableOrderStartTime sets the "order_start_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderStartTime(i *int64) *OrderInfoUpdate {
	if i != nil {
		oiu.SetOrderStartTime(*i)
	}
	return oiu
}

// AddOrderStartTime adds i to the "order_start_time" field.
func (oiu *OrderInfoUpdate) AddOrderStartTime(i int64) *OrderInfoUpdate {
	oiu.mutation.AddOrderStartTime(i)
	return oiu
}

// ClearOrderStartTime clears the value of the "order_start_time" field.
func (oiu *OrderInfoUpdate) ClearOrderStartTime() *OrderInfoUpdate {
	oiu.mutation.ClearOrderStartTime()
	return oiu
}

// SetOrderFinalTime sets the "order_final_time" field.
func (oiu *OrderInfoUpdate) SetOrderFinalTime(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetOrderFinalTime()
	oiu.mutation.SetOrderFinalTime(i)
	return oiu
}

// SetNillableOrderFinalTime sets the "order_final_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOrderFinalTime(i *int64) *OrderInfoUpdate {
	if i != nil {
		oiu.SetOrderFinalTime(*i)
	}
	return oiu
}

// AddOrderFinalTime adds i to the "order_final_time" field.
func (oiu *OrderInfoUpdate) AddOrderFinalTime(i int64) *OrderInfoUpdate {
	oiu.mutation.AddOrderFinalTime(i)
	return oiu
}

// ClearOrderFinalTime clears the value of the "order_final_time" field.
func (oiu *OrderInfoUpdate) ClearOrderFinalTime() *OrderInfoUpdate {
	oiu.mutation.ClearOrderFinalTime()
	return oiu
}

// SetChargeStartTime sets the "charge_start_time" field.
func (oiu *OrderInfoUpdate) SetChargeStartTime(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetChargeStartTime()
	oiu.mutation.SetChargeStartTime(i)
	return oiu
}

// SetNillableChargeStartTime sets the "charge_start_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableChargeStartTime(i *int64) *OrderInfoUpdate {
	if i != nil {
		oiu.SetChargeStartTime(*i)
	}
	return oiu
}

// AddChargeStartTime adds i to the "charge_start_time" field.
func (oiu *OrderInfoUpdate) AddChargeStartTime(i int64) *OrderInfoUpdate {
	oiu.mutation.AddChargeStartTime(i)
	return oiu
}

// ClearChargeStartTime clears the value of the "charge_start_time" field.
func (oiu *OrderInfoUpdate) ClearChargeStartTime() *OrderInfoUpdate {
	oiu.mutation.ClearChargeStartTime()
	return oiu
}

// SetChargeFinalTime sets the "charge_final_time" field.
func (oiu *OrderInfoUpdate) SetChargeFinalTime(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetChargeFinalTime()
	oiu.mutation.SetChargeFinalTime(i)
	return oiu
}

// SetNillableChargeFinalTime sets the "charge_final_time" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableChargeFinalTime(i *int64) *OrderInfoUpdate {
	if i != nil {
		oiu.SetChargeFinalTime(*i)
	}
	return oiu
}

// AddChargeFinalTime adds i to the "charge_final_time" field.
func (oiu *OrderInfoUpdate) AddChargeFinalTime(i int64) *OrderInfoUpdate {
	oiu.mutation.AddChargeFinalTime(i)
	return oiu
}

// ClearChargeFinalTime clears the value of the "charge_final_time" field.
func (oiu *OrderInfoUpdate) ClearChargeFinalTime() *OrderInfoUpdate {
	oiu.mutation.ClearChargeFinalTime()
	return oiu
}

// SetIntellectID sets the "intellect_id" field.
func (oiu *OrderInfoUpdate) SetIntellectID(i int64) *OrderInfoUpdate {
	oiu.mutation.ResetIntellectID()
	oiu.mutation.SetIntellectID(i)
	return oiu
}

// SetNillableIntellectID sets the "intellect_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableIntellectID(i *int64) *OrderInfoUpdate {
	if i != nil {
		oiu.SetIntellectID(*i)
	}
	return oiu
}

// AddIntellectID adds i to the "intellect_id" field.
func (oiu *OrderInfoUpdate) AddIntellectID(i int64) *OrderInfoUpdate {
	oiu.mutation.AddIntellectID(i)
	return oiu
}

// ClearIntellectID clears the value of the "intellect_id" field.
func (oiu *OrderInfoUpdate) ClearIntellectID() *OrderInfoUpdate {
	oiu.mutation.ClearIntellectID()
	return oiu
}

// SetStationID sets the "station_id" field.
func (oiu *OrderInfoUpdate) SetStationID(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.ResetStationID()
	oiu.mutation.SetStationID(d)
	return oiu
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableStationID(d *datasource.UUID) *OrderInfoUpdate {
	if d != nil {
		oiu.SetStationID(*d)
	}
	return oiu
}

// AddStationID adds d to the "station_id" field.
func (oiu *OrderInfoUpdate) AddStationID(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.AddStationID(d)
	return oiu
}

// ClearStationID clears the value of the "station_id" field.
func (oiu *OrderInfoUpdate) ClearStationID() *OrderInfoUpdate {
	oiu.mutation.ClearStationID()
	return oiu
}

// SetOperatorID sets the "operator_id" field.
func (oiu *OrderInfoUpdate) SetOperatorID(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.ResetOperatorID()
	oiu.mutation.SetOperatorID(d)
	return oiu
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (oiu *OrderInfoUpdate) SetNillableOperatorID(d *datasource.UUID) *OrderInfoUpdate {
	if d != nil {
		oiu.SetOperatorID(*d)
	}
	return oiu
}

// AddOperatorID adds d to the "operator_id" field.
func (oiu *OrderInfoUpdate) AddOperatorID(d datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.AddOperatorID(d)
	return oiu
}

// ClearOperatorID clears the value of the "operator_id" field.
func (oiu *OrderInfoUpdate) ClearOperatorID() *OrderInfoUpdate {
	oiu.mutation.ClearOperatorID()
	return oiu
}

// SetConnector sets the "connector" edge to the Connector entity.
func (oiu *OrderInfoUpdate) SetConnector(c *Connector) *OrderInfoUpdate {
	return oiu.SetConnectorID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (oiu *OrderInfoUpdate) SetEquipment(e *Equipment) *OrderInfoUpdate {
	return oiu.SetEquipmentID(e.ID)
}

// AddOrderEventIDs adds the "order_event" edge to the OrderEvent entity by IDs.
func (oiu *OrderInfoUpdate) AddOrderEventIDs(ids ...datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.AddOrderEventIDs(ids...)
	return oiu
}

// AddOrderEvent adds the "order_event" edges to the OrderEvent entity.
func (oiu *OrderInfoUpdate) AddOrderEvent(o ...*OrderEvent) *OrderInfoUpdate {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.AddOrderEventIDs(ids...)
}

// Mutation returns the OrderInfoMutation object of the builder.
func (oiu *OrderInfoUpdate) Mutation() *OrderInfoMutation {
	return oiu.mutation
}

// ClearConnector clears the "connector" edge to the Connector entity.
func (oiu *OrderInfoUpdate) ClearConnector() *OrderInfoUpdate {
	oiu.mutation.ClearConnector()
	return oiu
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (oiu *OrderInfoUpdate) ClearEquipment() *OrderInfoUpdate {
	oiu.mutation.ClearEquipment()
	return oiu
}

// ClearOrderEvent clears all "order_event" edges to the OrderEvent entity.
func (oiu *OrderInfoUpdate) ClearOrderEvent() *OrderInfoUpdate {
	oiu.mutation.ClearOrderEvent()
	return oiu
}

// RemoveOrderEventIDs removes the "order_event" edge to OrderEvent entities by IDs.
func (oiu *OrderInfoUpdate) RemoveOrderEventIDs(ids ...datasource.UUID) *OrderInfoUpdate {
	oiu.mutation.RemoveOrderEventIDs(ids...)
	return oiu
}

// RemoveOrderEvent removes "order_event" edges to OrderEvent entities.
func (oiu *OrderInfoUpdate) RemoveOrderEvent(o ...*OrderEvent) *OrderInfoUpdate {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.RemoveOrderEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oiu.defaults()
	if len(oiu.hooks) == 0 {
		if err = oiu.check(); err != nil {
			return 0, err
		}
		affected, err = oiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiu.check(); err != nil {
				return 0, err
			}
			oiu.mutation = mutation
			affected, err = oiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oiu.hooks) - 1; i >= 0; i-- {
			if oiu.hooks[i] == nil {
				return 0, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = oiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderInfoUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderInfoUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderInfoUpdate) defaults() {
	if _, ok := oiu.mutation.UpdatedAt(); !ok {
		v := orderinfo.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrderInfoUpdate) check() error {
	if _, ok := oiu.mutation.ConnectorID(); oiu.mutation.ConnectorCleared() && !ok {
		return errors.New(`cwmodel: clearing a required unique edge "OrderInfo.connector"`)
	}
	if _, ok := oiu.mutation.EquipmentID(); oiu.mutation.EquipmentCleared() && !ok {
		return errors.New(`cwmodel: clearing a required unique edge "OrderInfo.equipment"`)
	}
	return nil
}

func (oiu *OrderInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderinfo.Table,
			Columns: orderinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderinfo.FieldID,
			},
		},
	}
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.Version(); ok {
		_spec.SetField(orderinfo.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedVersion(); ok {
		_spec.AddField(orderinfo.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.UpdatedBy(); ok {
		_spec.SetField(orderinfo.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := oiu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(orderinfo.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderinfo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(orderinfo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.RemoteStartID(); ok {
		_spec.SetField(orderinfo.FieldRemoteStartID, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedRemoteStartID(); ok {
		_spec.AddField(orderinfo.FieldRemoteStartID, field.TypeInt64, value)
	}
	if oiu.mutation.RemoteStartIDCleared() {
		_spec.ClearField(orderinfo.FieldRemoteStartID, field.TypeInt64)
	}
	if value, ok := oiu.mutation.TransactionID(); ok {
		_spec.SetField(orderinfo.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := oiu.mutation.AuthorizationID(); ok {
		_spec.SetField(orderinfo.FieldAuthorizationID, field.TypeString, value)
	}
	if oiu.mutation.AuthorizationIDCleared() {
		_spec.ClearField(orderinfo.FieldAuthorizationID, field.TypeString)
	}
	if value, ok := oiu.mutation.AuthorizationMode(); ok {
		_spec.SetField(orderinfo.FieldAuthorizationMode, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedAuthorizationMode(); ok {
		_spec.AddField(orderinfo.FieldAuthorizationMode, field.TypeInt, value)
	}
	if oiu.mutation.AuthorizationModeCleared() {
		_spec.ClearField(orderinfo.FieldAuthorizationMode, field.TypeInt)
	}
	if value, ok := oiu.mutation.CustomerID(); ok {
		_spec.SetField(orderinfo.FieldCustomerID, field.TypeString, value)
	}
	if oiu.mutation.CustomerIDCleared() {
		_spec.ClearField(orderinfo.FieldCustomerID, field.TypeString)
	}
	if value, ok := oiu.mutation.CallerOrderID(); ok {
		_spec.SetField(orderinfo.FieldCallerOrderID, field.TypeString, value)
	}
	if oiu.mutation.CallerOrderIDCleared() {
		_spec.ClearField(orderinfo.FieldCallerOrderID, field.TypeString)
	}
	if value, ok := oiu.mutation.TotalElectricity(); ok {
		_spec.SetField(orderinfo.FieldTotalElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedTotalElectricity(); ok {
		_spec.AddField(orderinfo.FieldTotalElectricity, field.TypeFloat64, value)
	}
	if oiu.mutation.TotalElectricityCleared() {
		_spec.ClearField(orderinfo.FieldTotalElectricity, field.TypeFloat64)
	}
	if value, ok := oiu.mutation.ChargeStartElectricity(); ok {
		_spec.SetField(orderinfo.FieldChargeStartElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedChargeStartElectricity(); ok {
		_spec.AddField(orderinfo.FieldChargeStartElectricity, field.TypeFloat64, value)
	}
	if oiu.mutation.ChargeStartElectricityCleared() {
		_spec.ClearField(orderinfo.FieldChargeStartElectricity, field.TypeFloat64)
	}
	if value, ok := oiu.mutation.ChargeFinalElectricity(); ok {
		_spec.SetField(orderinfo.FieldChargeFinalElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedChargeFinalElectricity(); ok {
		_spec.AddField(orderinfo.FieldChargeFinalElectricity, field.TypeFloat64, value)
	}
	if oiu.mutation.ChargeFinalElectricityCleared() {
		_spec.ClearField(orderinfo.FieldChargeFinalElectricity, field.TypeFloat64)
	}
	if value, ok := oiu.mutation.SharpElectricity(); ok {
		_spec.SetField(orderinfo.FieldSharpElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedSharpElectricity(); ok {
		_spec.AddField(orderinfo.FieldSharpElectricity, field.TypeFloat64, value)
	}
	if oiu.mutation.SharpElectricityCleared() {
		_spec.ClearField(orderinfo.FieldSharpElectricity, field.TypeFloat64)
	}
	if value, ok := oiu.mutation.PeakElectricity(); ok {
		_spec.SetField(orderinfo.FieldPeakElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedPeakElectricity(); ok {
		_spec.AddField(orderinfo.FieldPeakElectricity, field.TypeFloat64, value)
	}
	if oiu.mutation.PeakElectricityCleared() {
		_spec.ClearField(orderinfo.FieldPeakElectricity, field.TypeFloat64)
	}
	if value, ok := oiu.mutation.FlatElectricity(); ok {
		_spec.SetField(orderinfo.FieldFlatElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedFlatElectricity(); ok {
		_spec.AddField(orderinfo.FieldFlatElectricity, field.TypeFloat64, value)
	}
	if oiu.mutation.FlatElectricityCleared() {
		_spec.ClearField(orderinfo.FieldFlatElectricity, field.TypeFloat64)
	}
	if value, ok := oiu.mutation.ValleyElectricity(); ok {
		_spec.SetField(orderinfo.FieldValleyElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedValleyElectricity(); ok {
		_spec.AddField(orderinfo.FieldValleyElectricity, field.TypeFloat64, value)
	}
	if oiu.mutation.ValleyElectricityCleared() {
		_spec.ClearField(orderinfo.FieldValleyElectricity, field.TypeFloat64)
	}
	if value, ok := oiu.mutation.StopReasonCode(); ok {
		_spec.SetField(orderinfo.FieldStopReasonCode, field.TypeInt32, value)
	}
	if value, ok := oiu.mutation.AddedStopReasonCode(); ok {
		_spec.AddField(orderinfo.FieldStopReasonCode, field.TypeInt32, value)
	}
	if oiu.mutation.StopReasonCodeCleared() {
		_spec.ClearField(orderinfo.FieldStopReasonCode, field.TypeInt32)
	}
	if value, ok := oiu.mutation.State(); ok {
		_spec.SetField(orderinfo.FieldState, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedState(); ok {
		_spec.AddField(orderinfo.FieldState, field.TypeInt, value)
	}
	if oiu.mutation.StateCleared() {
		_spec.ClearField(orderinfo.FieldState, field.TypeInt)
	}
	if value, ok := oiu.mutation.Offline(); ok {
		_spec.SetField(orderinfo.FieldOffline, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.PriceSchemeReleaseID(); ok {
		_spec.SetField(orderinfo.FieldPriceSchemeReleaseID, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedPriceSchemeReleaseID(); ok {
		_spec.AddField(orderinfo.FieldPriceSchemeReleaseID, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.OrderStartTime(); ok {
		_spec.SetField(orderinfo.FieldOrderStartTime, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedOrderStartTime(); ok {
		_spec.AddField(orderinfo.FieldOrderStartTime, field.TypeInt64, value)
	}
	if oiu.mutation.OrderStartTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderStartTime, field.TypeInt64)
	}
	if value, ok := oiu.mutation.OrderFinalTime(); ok {
		_spec.SetField(orderinfo.FieldOrderFinalTime, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedOrderFinalTime(); ok {
		_spec.AddField(orderinfo.FieldOrderFinalTime, field.TypeInt64, value)
	}
	if oiu.mutation.OrderFinalTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderFinalTime, field.TypeInt64)
	}
	if value, ok := oiu.mutation.ChargeStartTime(); ok {
		_spec.SetField(orderinfo.FieldChargeStartTime, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedChargeStartTime(); ok {
		_spec.AddField(orderinfo.FieldChargeStartTime, field.TypeInt64, value)
	}
	if oiu.mutation.ChargeStartTimeCleared() {
		_spec.ClearField(orderinfo.FieldChargeStartTime, field.TypeInt64)
	}
	if value, ok := oiu.mutation.ChargeFinalTime(); ok {
		_spec.SetField(orderinfo.FieldChargeFinalTime, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedChargeFinalTime(); ok {
		_spec.AddField(orderinfo.FieldChargeFinalTime, field.TypeInt64, value)
	}
	if oiu.mutation.ChargeFinalTimeCleared() {
		_spec.ClearField(orderinfo.FieldChargeFinalTime, field.TypeInt64)
	}
	if value, ok := oiu.mutation.IntellectID(); ok {
		_spec.SetField(orderinfo.FieldIntellectID, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedIntellectID(); ok {
		_spec.AddField(orderinfo.FieldIntellectID, field.TypeInt64, value)
	}
	if oiu.mutation.IntellectIDCleared() {
		_spec.ClearField(orderinfo.FieldIntellectID, field.TypeInt64)
	}
	if value, ok := oiu.mutation.StationID(); ok {
		_spec.SetField(orderinfo.FieldStationID, field.TypeUint64, value)
	}
	if value, ok := oiu.mutation.AddedStationID(); ok {
		_spec.AddField(orderinfo.FieldStationID, field.TypeUint64, value)
	}
	if oiu.mutation.StationIDCleared() {
		_spec.ClearField(orderinfo.FieldStationID, field.TypeUint64)
	}
	if value, ok := oiu.mutation.OperatorID(); ok {
		_spec.SetField(orderinfo.FieldOperatorID, field.TypeUint64, value)
	}
	if value, ok := oiu.mutation.AddedOperatorID(); ok {
		_spec.AddField(orderinfo.FieldOperatorID, field.TypeUint64, value)
	}
	if oiu.mutation.OperatorIDCleared() {
		_spec.ClearField(orderinfo.FieldOperatorID, field.TypeUint64)
	}
	if oiu.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ConnectorTable,
			Columns: []string{orderinfo.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ConnectorTable,
			Columns: []string{orderinfo.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.EquipmentTable,
			Columns: []string{orderinfo.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.EquipmentTable,
			Columns: []string{orderinfo.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.OrderEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderEventTable,
			Columns: []string{orderinfo.OrderEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderevent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedOrderEventIDs(); len(nodes) > 0 && !oiu.mutation.OrderEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderEventTable,
			Columns: []string{orderinfo.OrderEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderevent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderEventTable,
			Columns: []string{orderinfo.OrderEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderevent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderInfoUpdateOne is the builder for updating a single OrderInfo entity.
type OrderInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderInfoMutation
}

// SetVersion sets the "version" field.
func (oiuo *OrderInfoUpdateOne) SetVersion(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetVersion()
	oiuo.mutation.SetVersion(i)
	return oiuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableVersion(i *int64) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetVersion(*i)
	}
	return oiuo
}

// AddVersion adds i to the "version" field.
func (oiuo *OrderInfoUpdateOne) AddVersion(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddVersion(i)
	return oiuo
}

// SetUpdatedBy sets the "updated_by" field.
func (oiuo *OrderInfoUpdateOne) SetUpdatedBy(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.ResetUpdatedBy()
	oiuo.mutation.SetUpdatedBy(d)
	return oiuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableUpdatedBy(d *datasource.UUID) *OrderInfoUpdateOne {
	if d != nil {
		oiuo.SetUpdatedBy(*d)
	}
	return oiuo
}

// AddUpdatedBy adds d to the "updated_by" field.
func (oiuo *OrderInfoUpdateOne) AddUpdatedBy(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.AddUpdatedBy(d)
	return oiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (oiuo *OrderInfoUpdateOne) SetUpdatedAt(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetUpdatedAt()
	oiuo.mutation.SetUpdatedAt(i)
	return oiuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (oiuo *OrderInfoUpdateOne) AddUpdatedAt(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddUpdatedAt(i)
	return oiuo
}

// SetEquipmentID sets the "equipment_id" field.
func (oiuo *OrderInfoUpdateOne) SetEquipmentID(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.SetEquipmentID(d)
	return oiuo
}

// SetConnectorID sets the "connector_id" field.
func (oiuo *OrderInfoUpdateOne) SetConnectorID(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.SetConnectorID(d)
	return oiuo
}

// SetRemoteStartID sets the "remote_start_id" field.
func (oiuo *OrderInfoUpdateOne) SetRemoteStartID(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetRemoteStartID()
	oiuo.mutation.SetRemoteStartID(i)
	return oiuo
}

// SetNillableRemoteStartID sets the "remote_start_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableRemoteStartID(i *int64) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetRemoteStartID(*i)
	}
	return oiuo
}

// AddRemoteStartID adds i to the "remote_start_id" field.
func (oiuo *OrderInfoUpdateOne) AddRemoteStartID(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddRemoteStartID(i)
	return oiuo
}

// ClearRemoteStartID clears the value of the "remote_start_id" field.
func (oiuo *OrderInfoUpdateOne) ClearRemoteStartID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearRemoteStartID()
	return oiuo
}

// SetTransactionID sets the "transaction_id" field.
func (oiuo *OrderInfoUpdateOne) SetTransactionID(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetTransactionID(s)
	return oiuo
}

// SetAuthorizationID sets the "authorization_id" field.
func (oiuo *OrderInfoUpdateOne) SetAuthorizationID(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetAuthorizationID(s)
	return oiuo
}

// SetNillableAuthorizationID sets the "authorization_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableAuthorizationID(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetAuthorizationID(*s)
	}
	return oiuo
}

// ClearAuthorizationID clears the value of the "authorization_id" field.
func (oiuo *OrderInfoUpdateOne) ClearAuthorizationID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearAuthorizationID()
	return oiuo
}

// SetAuthorizationMode sets the "authorization_mode" field.
func (oiuo *OrderInfoUpdateOne) SetAuthorizationMode(i int) *OrderInfoUpdateOne {
	oiuo.mutation.ResetAuthorizationMode()
	oiuo.mutation.SetAuthorizationMode(i)
	return oiuo
}

// SetNillableAuthorizationMode sets the "authorization_mode" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableAuthorizationMode(i *int) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetAuthorizationMode(*i)
	}
	return oiuo
}

// AddAuthorizationMode adds i to the "authorization_mode" field.
func (oiuo *OrderInfoUpdateOne) AddAuthorizationMode(i int) *OrderInfoUpdateOne {
	oiuo.mutation.AddAuthorizationMode(i)
	return oiuo
}

// ClearAuthorizationMode clears the value of the "authorization_mode" field.
func (oiuo *OrderInfoUpdateOne) ClearAuthorizationMode() *OrderInfoUpdateOne {
	oiuo.mutation.ClearAuthorizationMode()
	return oiuo
}

// SetCustomerID sets the "customer_id" field.
func (oiuo *OrderInfoUpdateOne) SetCustomerID(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetCustomerID(s)
	return oiuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableCustomerID(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetCustomerID(*s)
	}
	return oiuo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (oiuo *OrderInfoUpdateOne) ClearCustomerID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearCustomerID()
	return oiuo
}

// SetCallerOrderID sets the "caller_order_id" field.
func (oiuo *OrderInfoUpdateOne) SetCallerOrderID(s string) *OrderInfoUpdateOne {
	oiuo.mutation.SetCallerOrderID(s)
	return oiuo
}

// SetNillableCallerOrderID sets the "caller_order_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableCallerOrderID(s *string) *OrderInfoUpdateOne {
	if s != nil {
		oiuo.SetCallerOrderID(*s)
	}
	return oiuo
}

// ClearCallerOrderID clears the value of the "caller_order_id" field.
func (oiuo *OrderInfoUpdateOne) ClearCallerOrderID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearCallerOrderID()
	return oiuo
}

// SetTotalElectricity sets the "total_electricity" field.
func (oiuo *OrderInfoUpdateOne) SetTotalElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetTotalElectricity()
	oiuo.mutation.SetTotalElectricity(f)
	return oiuo
}

// SetNillableTotalElectricity sets the "total_electricity" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableTotalElectricity(f *float64) *OrderInfoUpdateOne {
	if f != nil {
		oiuo.SetTotalElectricity(*f)
	}
	return oiuo
}

// AddTotalElectricity adds f to the "total_electricity" field.
func (oiuo *OrderInfoUpdateOne) AddTotalElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.AddTotalElectricity(f)
	return oiuo
}

// ClearTotalElectricity clears the value of the "total_electricity" field.
func (oiuo *OrderInfoUpdateOne) ClearTotalElectricity() *OrderInfoUpdateOne {
	oiuo.mutation.ClearTotalElectricity()
	return oiuo
}

// SetChargeStartElectricity sets the "charge_start_electricity" field.
func (oiuo *OrderInfoUpdateOne) SetChargeStartElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetChargeStartElectricity()
	oiuo.mutation.SetChargeStartElectricity(f)
	return oiuo
}

// SetNillableChargeStartElectricity sets the "charge_start_electricity" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableChargeStartElectricity(f *float64) *OrderInfoUpdateOne {
	if f != nil {
		oiuo.SetChargeStartElectricity(*f)
	}
	return oiuo
}

// AddChargeStartElectricity adds f to the "charge_start_electricity" field.
func (oiuo *OrderInfoUpdateOne) AddChargeStartElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.AddChargeStartElectricity(f)
	return oiuo
}

// ClearChargeStartElectricity clears the value of the "charge_start_electricity" field.
func (oiuo *OrderInfoUpdateOne) ClearChargeStartElectricity() *OrderInfoUpdateOne {
	oiuo.mutation.ClearChargeStartElectricity()
	return oiuo
}

// SetChargeFinalElectricity sets the "charge_final_electricity" field.
func (oiuo *OrderInfoUpdateOne) SetChargeFinalElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetChargeFinalElectricity()
	oiuo.mutation.SetChargeFinalElectricity(f)
	return oiuo
}

// SetNillableChargeFinalElectricity sets the "charge_final_electricity" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableChargeFinalElectricity(f *float64) *OrderInfoUpdateOne {
	if f != nil {
		oiuo.SetChargeFinalElectricity(*f)
	}
	return oiuo
}

// AddChargeFinalElectricity adds f to the "charge_final_electricity" field.
func (oiuo *OrderInfoUpdateOne) AddChargeFinalElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.AddChargeFinalElectricity(f)
	return oiuo
}

// ClearChargeFinalElectricity clears the value of the "charge_final_electricity" field.
func (oiuo *OrderInfoUpdateOne) ClearChargeFinalElectricity() *OrderInfoUpdateOne {
	oiuo.mutation.ClearChargeFinalElectricity()
	return oiuo
}

// SetSharpElectricity sets the "sharp_electricity" field.
func (oiuo *OrderInfoUpdateOne) SetSharpElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetSharpElectricity()
	oiuo.mutation.SetSharpElectricity(f)
	return oiuo
}

// SetNillableSharpElectricity sets the "sharp_electricity" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableSharpElectricity(f *float64) *OrderInfoUpdateOne {
	if f != nil {
		oiuo.SetSharpElectricity(*f)
	}
	return oiuo
}

// AddSharpElectricity adds f to the "sharp_electricity" field.
func (oiuo *OrderInfoUpdateOne) AddSharpElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.AddSharpElectricity(f)
	return oiuo
}

// ClearSharpElectricity clears the value of the "sharp_electricity" field.
func (oiuo *OrderInfoUpdateOne) ClearSharpElectricity() *OrderInfoUpdateOne {
	oiuo.mutation.ClearSharpElectricity()
	return oiuo
}

// SetPeakElectricity sets the "peak_electricity" field.
func (oiuo *OrderInfoUpdateOne) SetPeakElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetPeakElectricity()
	oiuo.mutation.SetPeakElectricity(f)
	return oiuo
}

// SetNillablePeakElectricity sets the "peak_electricity" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillablePeakElectricity(f *float64) *OrderInfoUpdateOne {
	if f != nil {
		oiuo.SetPeakElectricity(*f)
	}
	return oiuo
}

// AddPeakElectricity adds f to the "peak_electricity" field.
func (oiuo *OrderInfoUpdateOne) AddPeakElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.AddPeakElectricity(f)
	return oiuo
}

// ClearPeakElectricity clears the value of the "peak_electricity" field.
func (oiuo *OrderInfoUpdateOne) ClearPeakElectricity() *OrderInfoUpdateOne {
	oiuo.mutation.ClearPeakElectricity()
	return oiuo
}

// SetFlatElectricity sets the "flat_electricity" field.
func (oiuo *OrderInfoUpdateOne) SetFlatElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetFlatElectricity()
	oiuo.mutation.SetFlatElectricity(f)
	return oiuo
}

// SetNillableFlatElectricity sets the "flat_electricity" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableFlatElectricity(f *float64) *OrderInfoUpdateOne {
	if f != nil {
		oiuo.SetFlatElectricity(*f)
	}
	return oiuo
}

// AddFlatElectricity adds f to the "flat_electricity" field.
func (oiuo *OrderInfoUpdateOne) AddFlatElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.AddFlatElectricity(f)
	return oiuo
}

// ClearFlatElectricity clears the value of the "flat_electricity" field.
func (oiuo *OrderInfoUpdateOne) ClearFlatElectricity() *OrderInfoUpdateOne {
	oiuo.mutation.ClearFlatElectricity()
	return oiuo
}

// SetValleyElectricity sets the "valley_electricity" field.
func (oiuo *OrderInfoUpdateOne) SetValleyElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetValleyElectricity()
	oiuo.mutation.SetValleyElectricity(f)
	return oiuo
}

// SetNillableValleyElectricity sets the "valley_electricity" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableValleyElectricity(f *float64) *OrderInfoUpdateOne {
	if f != nil {
		oiuo.SetValleyElectricity(*f)
	}
	return oiuo
}

// AddValleyElectricity adds f to the "valley_electricity" field.
func (oiuo *OrderInfoUpdateOne) AddValleyElectricity(f float64) *OrderInfoUpdateOne {
	oiuo.mutation.AddValleyElectricity(f)
	return oiuo
}

// ClearValleyElectricity clears the value of the "valley_electricity" field.
func (oiuo *OrderInfoUpdateOne) ClearValleyElectricity() *OrderInfoUpdateOne {
	oiuo.mutation.ClearValleyElectricity()
	return oiuo
}

// SetStopReasonCode sets the "stop_reason_code" field.
func (oiuo *OrderInfoUpdateOne) SetStopReasonCode(i int32) *OrderInfoUpdateOne {
	oiuo.mutation.ResetStopReasonCode()
	oiuo.mutation.SetStopReasonCode(i)
	return oiuo
}

// SetNillableStopReasonCode sets the "stop_reason_code" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableStopReasonCode(i *int32) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetStopReasonCode(*i)
	}
	return oiuo
}

// AddStopReasonCode adds i to the "stop_reason_code" field.
func (oiuo *OrderInfoUpdateOne) AddStopReasonCode(i int32) *OrderInfoUpdateOne {
	oiuo.mutation.AddStopReasonCode(i)
	return oiuo
}

// ClearStopReasonCode clears the value of the "stop_reason_code" field.
func (oiuo *OrderInfoUpdateOne) ClearStopReasonCode() *OrderInfoUpdateOne {
	oiuo.mutation.ClearStopReasonCode()
	return oiuo
}

// SetState sets the "state" field.
func (oiuo *OrderInfoUpdateOne) SetState(i int) *OrderInfoUpdateOne {
	oiuo.mutation.ResetState()
	oiuo.mutation.SetState(i)
	return oiuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableState(i *int) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetState(*i)
	}
	return oiuo
}

// AddState adds i to the "state" field.
func (oiuo *OrderInfoUpdateOne) AddState(i int) *OrderInfoUpdateOne {
	oiuo.mutation.AddState(i)
	return oiuo
}

// ClearState clears the value of the "state" field.
func (oiuo *OrderInfoUpdateOne) ClearState() *OrderInfoUpdateOne {
	oiuo.mutation.ClearState()
	return oiuo
}

// SetOffline sets the "offline" field.
func (oiuo *OrderInfoUpdateOne) SetOffline(b bool) *OrderInfoUpdateOne {
	oiuo.mutation.SetOffline(b)
	return oiuo
}

// SetPriceSchemeReleaseID sets the "price_scheme_release_id" field.
func (oiuo *OrderInfoUpdateOne) SetPriceSchemeReleaseID(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetPriceSchemeReleaseID()
	oiuo.mutation.SetPriceSchemeReleaseID(i)
	return oiuo
}

// AddPriceSchemeReleaseID adds i to the "price_scheme_release_id" field.
func (oiuo *OrderInfoUpdateOne) AddPriceSchemeReleaseID(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddPriceSchemeReleaseID(i)
	return oiuo
}

// SetOrderStartTime sets the "order_start_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderStartTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetOrderStartTime()
	oiuo.mutation.SetOrderStartTime(i)
	return oiuo
}

// SetNillableOrderStartTime sets the "order_start_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderStartTime(i *int64) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetOrderStartTime(*i)
	}
	return oiuo
}

// AddOrderStartTime adds i to the "order_start_time" field.
func (oiuo *OrderInfoUpdateOne) AddOrderStartTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddOrderStartTime(i)
	return oiuo
}

// ClearOrderStartTime clears the value of the "order_start_time" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderStartTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderStartTime()
	return oiuo
}

// SetOrderFinalTime sets the "order_final_time" field.
func (oiuo *OrderInfoUpdateOne) SetOrderFinalTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetOrderFinalTime()
	oiuo.mutation.SetOrderFinalTime(i)
	return oiuo
}

// SetNillableOrderFinalTime sets the "order_final_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOrderFinalTime(i *int64) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetOrderFinalTime(*i)
	}
	return oiuo
}

// AddOrderFinalTime adds i to the "order_final_time" field.
func (oiuo *OrderInfoUpdateOne) AddOrderFinalTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddOrderFinalTime(i)
	return oiuo
}

// ClearOrderFinalTime clears the value of the "order_final_time" field.
func (oiuo *OrderInfoUpdateOne) ClearOrderFinalTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderFinalTime()
	return oiuo
}

// SetChargeStartTime sets the "charge_start_time" field.
func (oiuo *OrderInfoUpdateOne) SetChargeStartTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetChargeStartTime()
	oiuo.mutation.SetChargeStartTime(i)
	return oiuo
}

// SetNillableChargeStartTime sets the "charge_start_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableChargeStartTime(i *int64) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetChargeStartTime(*i)
	}
	return oiuo
}

// AddChargeStartTime adds i to the "charge_start_time" field.
func (oiuo *OrderInfoUpdateOne) AddChargeStartTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddChargeStartTime(i)
	return oiuo
}

// ClearChargeStartTime clears the value of the "charge_start_time" field.
func (oiuo *OrderInfoUpdateOne) ClearChargeStartTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearChargeStartTime()
	return oiuo
}

// SetChargeFinalTime sets the "charge_final_time" field.
func (oiuo *OrderInfoUpdateOne) SetChargeFinalTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetChargeFinalTime()
	oiuo.mutation.SetChargeFinalTime(i)
	return oiuo
}

// SetNillableChargeFinalTime sets the "charge_final_time" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableChargeFinalTime(i *int64) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetChargeFinalTime(*i)
	}
	return oiuo
}

// AddChargeFinalTime adds i to the "charge_final_time" field.
func (oiuo *OrderInfoUpdateOne) AddChargeFinalTime(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddChargeFinalTime(i)
	return oiuo
}

// ClearChargeFinalTime clears the value of the "charge_final_time" field.
func (oiuo *OrderInfoUpdateOne) ClearChargeFinalTime() *OrderInfoUpdateOne {
	oiuo.mutation.ClearChargeFinalTime()
	return oiuo
}

// SetIntellectID sets the "intellect_id" field.
func (oiuo *OrderInfoUpdateOne) SetIntellectID(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.ResetIntellectID()
	oiuo.mutation.SetIntellectID(i)
	return oiuo
}

// SetNillableIntellectID sets the "intellect_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableIntellectID(i *int64) *OrderInfoUpdateOne {
	if i != nil {
		oiuo.SetIntellectID(*i)
	}
	return oiuo
}

// AddIntellectID adds i to the "intellect_id" field.
func (oiuo *OrderInfoUpdateOne) AddIntellectID(i int64) *OrderInfoUpdateOne {
	oiuo.mutation.AddIntellectID(i)
	return oiuo
}

// ClearIntellectID clears the value of the "intellect_id" field.
func (oiuo *OrderInfoUpdateOne) ClearIntellectID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearIntellectID()
	return oiuo
}

// SetStationID sets the "station_id" field.
func (oiuo *OrderInfoUpdateOne) SetStationID(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.ResetStationID()
	oiuo.mutation.SetStationID(d)
	return oiuo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableStationID(d *datasource.UUID) *OrderInfoUpdateOne {
	if d != nil {
		oiuo.SetStationID(*d)
	}
	return oiuo
}

// AddStationID adds d to the "station_id" field.
func (oiuo *OrderInfoUpdateOne) AddStationID(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.AddStationID(d)
	return oiuo
}

// ClearStationID clears the value of the "station_id" field.
func (oiuo *OrderInfoUpdateOne) ClearStationID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearStationID()
	return oiuo
}

// SetOperatorID sets the "operator_id" field.
func (oiuo *OrderInfoUpdateOne) SetOperatorID(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.ResetOperatorID()
	oiuo.mutation.SetOperatorID(d)
	return oiuo
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (oiuo *OrderInfoUpdateOne) SetNillableOperatorID(d *datasource.UUID) *OrderInfoUpdateOne {
	if d != nil {
		oiuo.SetOperatorID(*d)
	}
	return oiuo
}

// AddOperatorID adds d to the "operator_id" field.
func (oiuo *OrderInfoUpdateOne) AddOperatorID(d datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.AddOperatorID(d)
	return oiuo
}

// ClearOperatorID clears the value of the "operator_id" field.
func (oiuo *OrderInfoUpdateOne) ClearOperatorID() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOperatorID()
	return oiuo
}

// SetConnector sets the "connector" edge to the Connector entity.
func (oiuo *OrderInfoUpdateOne) SetConnector(c *Connector) *OrderInfoUpdateOne {
	return oiuo.SetConnectorID(c.ID)
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (oiuo *OrderInfoUpdateOne) SetEquipment(e *Equipment) *OrderInfoUpdateOne {
	return oiuo.SetEquipmentID(e.ID)
}

// AddOrderEventIDs adds the "order_event" edge to the OrderEvent entity by IDs.
func (oiuo *OrderInfoUpdateOne) AddOrderEventIDs(ids ...datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.AddOrderEventIDs(ids...)
	return oiuo
}

// AddOrderEvent adds the "order_event" edges to the OrderEvent entity.
func (oiuo *OrderInfoUpdateOne) AddOrderEvent(o ...*OrderEvent) *OrderInfoUpdateOne {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.AddOrderEventIDs(ids...)
}

// Mutation returns the OrderInfoMutation object of the builder.
func (oiuo *OrderInfoUpdateOne) Mutation() *OrderInfoMutation {
	return oiuo.mutation
}

// ClearConnector clears the "connector" edge to the Connector entity.
func (oiuo *OrderInfoUpdateOne) ClearConnector() *OrderInfoUpdateOne {
	oiuo.mutation.ClearConnector()
	return oiuo
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (oiuo *OrderInfoUpdateOne) ClearEquipment() *OrderInfoUpdateOne {
	oiuo.mutation.ClearEquipment()
	return oiuo
}

// ClearOrderEvent clears all "order_event" edges to the OrderEvent entity.
func (oiuo *OrderInfoUpdateOne) ClearOrderEvent() *OrderInfoUpdateOne {
	oiuo.mutation.ClearOrderEvent()
	return oiuo
}

// RemoveOrderEventIDs removes the "order_event" edge to OrderEvent entities by IDs.
func (oiuo *OrderInfoUpdateOne) RemoveOrderEventIDs(ids ...datasource.UUID) *OrderInfoUpdateOne {
	oiuo.mutation.RemoveOrderEventIDs(ids...)
	return oiuo
}

// RemoveOrderEvent removes "order_event" edges to OrderEvent entities.
func (oiuo *OrderInfoUpdateOne) RemoveOrderEvent(o ...*OrderEvent) *OrderInfoUpdateOne {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.RemoveOrderEventIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderInfoUpdateOne) Select(field string, fields ...string) *OrderInfoUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderInfo entity.
func (oiuo *OrderInfoUpdateOne) Save(ctx context.Context) (*OrderInfo, error) {
	var (
		err  error
		node *OrderInfo
	)
	oiuo.defaults()
	if len(oiuo.hooks) == 0 {
		if err = oiuo.check(); err != nil {
			return nil, err
		}
		node, err = oiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiuo.check(); err != nil {
				return nil, err
			}
			oiuo.mutation = mutation
			node, err = oiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oiuo.hooks) - 1; i >= 0; i-- {
			if oiuo.hooks[i] == nil {
				return nil, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = oiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderInfoUpdateOne) SaveX(ctx context.Context) *OrderInfo {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderInfoUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderInfoUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok {
		v := orderinfo.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrderInfoUpdateOne) check() error {
	if _, ok := oiuo.mutation.ConnectorID(); oiuo.mutation.ConnectorCleared() && !ok {
		return errors.New(`cwmodel: clearing a required unique edge "OrderInfo.connector"`)
	}
	if _, ok := oiuo.mutation.EquipmentID(); oiuo.mutation.EquipmentCleared() && !ok {
		return errors.New(`cwmodel: clearing a required unique edge "OrderInfo.equipment"`)
	}
	return nil
}

func (oiuo *OrderInfoUpdateOne) sqlSave(ctx context.Context) (_node *OrderInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderinfo.Table,
			Columns: orderinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderinfo.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cwmodel: missing "OrderInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderinfo.FieldID)
		for _, f := range fields {
			if !orderinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cwmodel: invalid field %q for query", f)}
			}
			if f != orderinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.Version(); ok {
		_spec.SetField(orderinfo.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedVersion(); ok {
		_spec.AddField(orderinfo.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(orderinfo.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := oiuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(orderinfo.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderinfo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(orderinfo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.RemoteStartID(); ok {
		_spec.SetField(orderinfo.FieldRemoteStartID, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedRemoteStartID(); ok {
		_spec.AddField(orderinfo.FieldRemoteStartID, field.TypeInt64, value)
	}
	if oiuo.mutation.RemoteStartIDCleared() {
		_spec.ClearField(orderinfo.FieldRemoteStartID, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.TransactionID(); ok {
		_spec.SetField(orderinfo.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.AuthorizationID(); ok {
		_spec.SetField(orderinfo.FieldAuthorizationID, field.TypeString, value)
	}
	if oiuo.mutation.AuthorizationIDCleared() {
		_spec.ClearField(orderinfo.FieldAuthorizationID, field.TypeString)
	}
	if value, ok := oiuo.mutation.AuthorizationMode(); ok {
		_spec.SetField(orderinfo.FieldAuthorizationMode, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedAuthorizationMode(); ok {
		_spec.AddField(orderinfo.FieldAuthorizationMode, field.TypeInt, value)
	}
	if oiuo.mutation.AuthorizationModeCleared() {
		_spec.ClearField(orderinfo.FieldAuthorizationMode, field.TypeInt)
	}
	if value, ok := oiuo.mutation.CustomerID(); ok {
		_spec.SetField(orderinfo.FieldCustomerID, field.TypeString, value)
	}
	if oiuo.mutation.CustomerIDCleared() {
		_spec.ClearField(orderinfo.FieldCustomerID, field.TypeString)
	}
	if value, ok := oiuo.mutation.CallerOrderID(); ok {
		_spec.SetField(orderinfo.FieldCallerOrderID, field.TypeString, value)
	}
	if oiuo.mutation.CallerOrderIDCleared() {
		_spec.ClearField(orderinfo.FieldCallerOrderID, field.TypeString)
	}
	if value, ok := oiuo.mutation.TotalElectricity(); ok {
		_spec.SetField(orderinfo.FieldTotalElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedTotalElectricity(); ok {
		_spec.AddField(orderinfo.FieldTotalElectricity, field.TypeFloat64, value)
	}
	if oiuo.mutation.TotalElectricityCleared() {
		_spec.ClearField(orderinfo.FieldTotalElectricity, field.TypeFloat64)
	}
	if value, ok := oiuo.mutation.ChargeStartElectricity(); ok {
		_spec.SetField(orderinfo.FieldChargeStartElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedChargeStartElectricity(); ok {
		_spec.AddField(orderinfo.FieldChargeStartElectricity, field.TypeFloat64, value)
	}
	if oiuo.mutation.ChargeStartElectricityCleared() {
		_spec.ClearField(orderinfo.FieldChargeStartElectricity, field.TypeFloat64)
	}
	if value, ok := oiuo.mutation.ChargeFinalElectricity(); ok {
		_spec.SetField(orderinfo.FieldChargeFinalElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedChargeFinalElectricity(); ok {
		_spec.AddField(orderinfo.FieldChargeFinalElectricity, field.TypeFloat64, value)
	}
	if oiuo.mutation.ChargeFinalElectricityCleared() {
		_spec.ClearField(orderinfo.FieldChargeFinalElectricity, field.TypeFloat64)
	}
	if value, ok := oiuo.mutation.SharpElectricity(); ok {
		_spec.SetField(orderinfo.FieldSharpElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedSharpElectricity(); ok {
		_spec.AddField(orderinfo.FieldSharpElectricity, field.TypeFloat64, value)
	}
	if oiuo.mutation.SharpElectricityCleared() {
		_spec.ClearField(orderinfo.FieldSharpElectricity, field.TypeFloat64)
	}
	if value, ok := oiuo.mutation.PeakElectricity(); ok {
		_spec.SetField(orderinfo.FieldPeakElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedPeakElectricity(); ok {
		_spec.AddField(orderinfo.FieldPeakElectricity, field.TypeFloat64, value)
	}
	if oiuo.mutation.PeakElectricityCleared() {
		_spec.ClearField(orderinfo.FieldPeakElectricity, field.TypeFloat64)
	}
	if value, ok := oiuo.mutation.FlatElectricity(); ok {
		_spec.SetField(orderinfo.FieldFlatElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedFlatElectricity(); ok {
		_spec.AddField(orderinfo.FieldFlatElectricity, field.TypeFloat64, value)
	}
	if oiuo.mutation.FlatElectricityCleared() {
		_spec.ClearField(orderinfo.FieldFlatElectricity, field.TypeFloat64)
	}
	if value, ok := oiuo.mutation.ValleyElectricity(); ok {
		_spec.SetField(orderinfo.FieldValleyElectricity, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedValleyElectricity(); ok {
		_spec.AddField(orderinfo.FieldValleyElectricity, field.TypeFloat64, value)
	}
	if oiuo.mutation.ValleyElectricityCleared() {
		_spec.ClearField(orderinfo.FieldValleyElectricity, field.TypeFloat64)
	}
	if value, ok := oiuo.mutation.StopReasonCode(); ok {
		_spec.SetField(orderinfo.FieldStopReasonCode, field.TypeInt32, value)
	}
	if value, ok := oiuo.mutation.AddedStopReasonCode(); ok {
		_spec.AddField(orderinfo.FieldStopReasonCode, field.TypeInt32, value)
	}
	if oiuo.mutation.StopReasonCodeCleared() {
		_spec.ClearField(orderinfo.FieldStopReasonCode, field.TypeInt32)
	}
	if value, ok := oiuo.mutation.State(); ok {
		_spec.SetField(orderinfo.FieldState, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedState(); ok {
		_spec.AddField(orderinfo.FieldState, field.TypeInt, value)
	}
	if oiuo.mutation.StateCleared() {
		_spec.ClearField(orderinfo.FieldState, field.TypeInt)
	}
	if value, ok := oiuo.mutation.Offline(); ok {
		_spec.SetField(orderinfo.FieldOffline, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.PriceSchemeReleaseID(); ok {
		_spec.SetField(orderinfo.FieldPriceSchemeReleaseID, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedPriceSchemeReleaseID(); ok {
		_spec.AddField(orderinfo.FieldPriceSchemeReleaseID, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.OrderStartTime(); ok {
		_spec.SetField(orderinfo.FieldOrderStartTime, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedOrderStartTime(); ok {
		_spec.AddField(orderinfo.FieldOrderStartTime, field.TypeInt64, value)
	}
	if oiuo.mutation.OrderStartTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderStartTime, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.OrderFinalTime(); ok {
		_spec.SetField(orderinfo.FieldOrderFinalTime, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedOrderFinalTime(); ok {
		_spec.AddField(orderinfo.FieldOrderFinalTime, field.TypeInt64, value)
	}
	if oiuo.mutation.OrderFinalTimeCleared() {
		_spec.ClearField(orderinfo.FieldOrderFinalTime, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.ChargeStartTime(); ok {
		_spec.SetField(orderinfo.FieldChargeStartTime, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedChargeStartTime(); ok {
		_spec.AddField(orderinfo.FieldChargeStartTime, field.TypeInt64, value)
	}
	if oiuo.mutation.ChargeStartTimeCleared() {
		_spec.ClearField(orderinfo.FieldChargeStartTime, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.ChargeFinalTime(); ok {
		_spec.SetField(orderinfo.FieldChargeFinalTime, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedChargeFinalTime(); ok {
		_spec.AddField(orderinfo.FieldChargeFinalTime, field.TypeInt64, value)
	}
	if oiuo.mutation.ChargeFinalTimeCleared() {
		_spec.ClearField(orderinfo.FieldChargeFinalTime, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.IntellectID(); ok {
		_spec.SetField(orderinfo.FieldIntellectID, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedIntellectID(); ok {
		_spec.AddField(orderinfo.FieldIntellectID, field.TypeInt64, value)
	}
	if oiuo.mutation.IntellectIDCleared() {
		_spec.ClearField(orderinfo.FieldIntellectID, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.StationID(); ok {
		_spec.SetField(orderinfo.FieldStationID, field.TypeUint64, value)
	}
	if value, ok := oiuo.mutation.AddedStationID(); ok {
		_spec.AddField(orderinfo.FieldStationID, field.TypeUint64, value)
	}
	if oiuo.mutation.StationIDCleared() {
		_spec.ClearField(orderinfo.FieldStationID, field.TypeUint64)
	}
	if value, ok := oiuo.mutation.OperatorID(); ok {
		_spec.SetField(orderinfo.FieldOperatorID, field.TypeUint64, value)
	}
	if value, ok := oiuo.mutation.AddedOperatorID(); ok {
		_spec.AddField(orderinfo.FieldOperatorID, field.TypeUint64, value)
	}
	if oiuo.mutation.OperatorIDCleared() {
		_spec.ClearField(orderinfo.FieldOperatorID, field.TypeUint64)
	}
	if oiuo.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ConnectorTable,
			Columns: []string{orderinfo.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.ConnectorTable,
			Columns: []string{orderinfo.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.EquipmentTable,
			Columns: []string{orderinfo.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderinfo.EquipmentTable,
			Columns: []string{orderinfo.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.OrderEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderEventTable,
			Columns: []string{orderinfo.OrderEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderevent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedOrderEventIDs(); len(nodes) > 0 && !oiuo.mutation.OrderEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderEventTable,
			Columns: []string{orderinfo.OrderEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderevent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderinfo.OrderEventTable,
			Columns: []string{orderinfo.OrderEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderevent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderInfo{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
