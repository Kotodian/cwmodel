// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/equipmentalarm"
	"github.com/Kotodian/cwmodel/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentAlarmUpdate is the builder for updating EquipmentAlarm entities.
type EquipmentAlarmUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentAlarmMutation
}

// Where appends a list predicates to the EquipmentAlarmUpdate builder.
func (eau *EquipmentAlarmUpdate) Where(ps ...predicate.EquipmentAlarm) *EquipmentAlarmUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetVersion sets the "version" field.
func (eau *EquipmentAlarmUpdate) SetVersion(i int64) *EquipmentAlarmUpdate {
	eau.mutation.ResetVersion()
	eau.mutation.SetVersion(i)
	return eau
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (eau *EquipmentAlarmUpdate) SetNillableVersion(i *int64) *EquipmentAlarmUpdate {
	if i != nil {
		eau.SetVersion(*i)
	}
	return eau
}

// AddVersion adds i to the "version" field.
func (eau *EquipmentAlarmUpdate) AddVersion(i int64) *EquipmentAlarmUpdate {
	eau.mutation.AddVersion(i)
	return eau
}

// SetUpdatedBy sets the "updated_by" field.
func (eau *EquipmentAlarmUpdate) SetUpdatedBy(d datasource.UUID) *EquipmentAlarmUpdate {
	eau.mutation.ResetUpdatedBy()
	eau.mutation.SetUpdatedBy(d)
	return eau
}

// AddUpdatedBy adds d to the "updated_by" field.
func (eau *EquipmentAlarmUpdate) AddUpdatedBy(d datasource.UUID) *EquipmentAlarmUpdate {
	eau.mutation.AddUpdatedBy(d)
	return eau
}

// SetUpdatedAt sets the "updated_at" field.
func (eau *EquipmentAlarmUpdate) SetUpdatedAt(i int64) *EquipmentAlarmUpdate {
	eau.mutation.ResetUpdatedAt()
	eau.mutation.SetUpdatedAt(i)
	return eau
}

// AddUpdatedAt adds i to the "updated_at" field.
func (eau *EquipmentAlarmUpdate) AddUpdatedAt(i int64) *EquipmentAlarmUpdate {
	eau.mutation.AddUpdatedAt(i)
	return eau
}

// SetEquipmentID sets the "equipment_id" field.
func (eau *EquipmentAlarmUpdate) SetEquipmentID(d datasource.UUID) *EquipmentAlarmUpdate {
	eau.mutation.SetEquipmentID(d)
	return eau
}

// SetDtcCode sets the "dtc_code" field.
func (eau *EquipmentAlarmUpdate) SetDtcCode(i int64) *EquipmentAlarmUpdate {
	eau.mutation.ResetDtcCode()
	eau.mutation.SetDtcCode(i)
	return eau
}

// AddDtcCode adds i to the "dtc_code" field.
func (eau *EquipmentAlarmUpdate) AddDtcCode(i int64) *EquipmentAlarmUpdate {
	eau.mutation.AddDtcCode(i)
	return eau
}

// SetRemoteAddress sets the "remote_address" field.
func (eau *EquipmentAlarmUpdate) SetRemoteAddress(s string) *EquipmentAlarmUpdate {
	eau.mutation.SetRemoteAddress(s)
	return eau
}

// SetTriggerTime sets the "trigger_time" field.
func (eau *EquipmentAlarmUpdate) SetTriggerTime(i int64) *EquipmentAlarmUpdate {
	eau.mutation.ResetTriggerTime()
	eau.mutation.SetTriggerTime(i)
	return eau
}

// SetNillableTriggerTime sets the "trigger_time" field if the given value is not nil.
func (eau *EquipmentAlarmUpdate) SetNillableTriggerTime(i *int64) *EquipmentAlarmUpdate {
	if i != nil {
		eau.SetTriggerTime(*i)
	}
	return eau
}

// AddTriggerTime adds i to the "trigger_time" field.
func (eau *EquipmentAlarmUpdate) AddTriggerTime(i int64) *EquipmentAlarmUpdate {
	eau.mutation.AddTriggerTime(i)
	return eau
}

// ClearTriggerTime clears the value of the "trigger_time" field.
func (eau *EquipmentAlarmUpdate) ClearTriggerTime() *EquipmentAlarmUpdate {
	eau.mutation.ClearTriggerTime()
	return eau
}

// SetFinalTime sets the "final_time" field.
func (eau *EquipmentAlarmUpdate) SetFinalTime(i int64) *EquipmentAlarmUpdate {
	eau.mutation.ResetFinalTime()
	eau.mutation.SetFinalTime(i)
	return eau
}

// SetNillableFinalTime sets the "final_time" field if the given value is not nil.
func (eau *EquipmentAlarmUpdate) SetNillableFinalTime(i *int64) *EquipmentAlarmUpdate {
	if i != nil {
		eau.SetFinalTime(*i)
	}
	return eau
}

// AddFinalTime adds i to the "final_time" field.
func (eau *EquipmentAlarmUpdate) AddFinalTime(i int64) *EquipmentAlarmUpdate {
	eau.mutation.AddFinalTime(i)
	return eau
}

// ClearFinalTime clears the value of the "final_time" field.
func (eau *EquipmentAlarmUpdate) ClearFinalTime() *EquipmentAlarmUpdate {
	eau.mutation.ClearFinalTime()
	return eau
}

// SetCount sets the "count" field.
func (eau *EquipmentAlarmUpdate) SetCount(i int) *EquipmentAlarmUpdate {
	eau.mutation.ResetCount()
	eau.mutation.SetCount(i)
	return eau
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (eau *EquipmentAlarmUpdate) SetNillableCount(i *int) *EquipmentAlarmUpdate {
	if i != nil {
		eau.SetCount(*i)
	}
	return eau
}

// AddCount adds i to the "count" field.
func (eau *EquipmentAlarmUpdate) AddCount(i int) *EquipmentAlarmUpdate {
	eau.mutation.AddCount(i)
	return eau
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (eau *EquipmentAlarmUpdate) SetEquipment(e *Equipment) *EquipmentAlarmUpdate {
	return eau.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentAlarmMutation object of the builder.
func (eau *EquipmentAlarmUpdate) Mutation() *EquipmentAlarmMutation {
	return eau.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (eau *EquipmentAlarmUpdate) ClearEquipment() *EquipmentAlarmUpdate {
	eau.mutation.ClearEquipment()
	return eau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EquipmentAlarmUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eau.defaults()
	if len(eau.hooks) == 0 {
		if err = eau.check(); err != nil {
			return 0, err
		}
		affected, err = eau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentAlarmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eau.check(); err != nil {
				return 0, err
			}
			eau.mutation = mutation
			affected, err = eau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eau.hooks) - 1; i >= 0; i-- {
			if eau.hooks[i] == nil {
				return 0, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = eau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EquipmentAlarmUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EquipmentAlarmUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EquipmentAlarmUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eau *EquipmentAlarmUpdate) defaults() {
	if _, ok := eau.mutation.UpdatedAt(); !ok {
		v := equipmentalarm.UpdateDefaultUpdatedAt()
		eau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eau *EquipmentAlarmUpdate) check() error {
	if _, ok := eau.mutation.EquipmentID(); eau.mutation.EquipmentCleared() && !ok {
		return errors.New(`cwmodel: clearing a required unique edge "EquipmentAlarm.equipment"`)
	}
	return nil
}

func (eau *EquipmentAlarmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipmentalarm.Table,
			Columns: equipmentalarm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipmentalarm.FieldID,
			},
		},
	}
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.Version(); ok {
		_spec.SetField(equipmentalarm.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.AddedVersion(); ok {
		_spec.AddField(equipmentalarm.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.UpdatedBy(); ok {
		_spec.SetField(equipmentalarm.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(equipmentalarm.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.UpdatedAt(); ok {
		_spec.SetField(equipmentalarm.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(equipmentalarm.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.DtcCode(); ok {
		_spec.SetField(equipmentalarm.FieldDtcCode, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.AddedDtcCode(); ok {
		_spec.AddField(equipmentalarm.FieldDtcCode, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.RemoteAddress(); ok {
		_spec.SetField(equipmentalarm.FieldRemoteAddress, field.TypeString, value)
	}
	if value, ok := eau.mutation.TriggerTime(); ok {
		_spec.SetField(equipmentalarm.FieldTriggerTime, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.AddedTriggerTime(); ok {
		_spec.AddField(equipmentalarm.FieldTriggerTime, field.TypeInt64, value)
	}
	if eau.mutation.TriggerTimeCleared() {
		_spec.ClearField(equipmentalarm.FieldTriggerTime, field.TypeInt64)
	}
	if value, ok := eau.mutation.FinalTime(); ok {
		_spec.SetField(equipmentalarm.FieldFinalTime, field.TypeInt64, value)
	}
	if value, ok := eau.mutation.AddedFinalTime(); ok {
		_spec.AddField(equipmentalarm.FieldFinalTime, field.TypeInt64, value)
	}
	if eau.mutation.FinalTimeCleared() {
		_spec.ClearField(equipmentalarm.FieldFinalTime, field.TypeInt64)
	}
	if value, ok := eau.mutation.Count(); ok {
		_spec.SetField(equipmentalarm.FieldCount, field.TypeInt, value)
	}
	if value, ok := eau.mutation.AddedCount(); ok {
		_spec.AddField(equipmentalarm.FieldCount, field.TypeInt, value)
	}
	if eau.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentalarm.EquipmentTable,
			Columns: []string{equipmentalarm.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentalarm.EquipmentTable,
			Columns: []string{equipmentalarm.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentalarm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EquipmentAlarmUpdateOne is the builder for updating a single EquipmentAlarm entity.
type EquipmentAlarmUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentAlarmMutation
}

// SetVersion sets the "version" field.
func (eauo *EquipmentAlarmUpdateOne) SetVersion(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.ResetVersion()
	eauo.mutation.SetVersion(i)
	return eauo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (eauo *EquipmentAlarmUpdateOne) SetNillableVersion(i *int64) *EquipmentAlarmUpdateOne {
	if i != nil {
		eauo.SetVersion(*i)
	}
	return eauo
}

// AddVersion adds i to the "version" field.
func (eauo *EquipmentAlarmUpdateOne) AddVersion(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.AddVersion(i)
	return eauo
}

// SetUpdatedBy sets the "updated_by" field.
func (eauo *EquipmentAlarmUpdateOne) SetUpdatedBy(d datasource.UUID) *EquipmentAlarmUpdateOne {
	eauo.mutation.ResetUpdatedBy()
	eauo.mutation.SetUpdatedBy(d)
	return eauo
}

// AddUpdatedBy adds d to the "updated_by" field.
func (eauo *EquipmentAlarmUpdateOne) AddUpdatedBy(d datasource.UUID) *EquipmentAlarmUpdateOne {
	eauo.mutation.AddUpdatedBy(d)
	return eauo
}

// SetUpdatedAt sets the "updated_at" field.
func (eauo *EquipmentAlarmUpdateOne) SetUpdatedAt(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.ResetUpdatedAt()
	eauo.mutation.SetUpdatedAt(i)
	return eauo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (eauo *EquipmentAlarmUpdateOne) AddUpdatedAt(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.AddUpdatedAt(i)
	return eauo
}

// SetEquipmentID sets the "equipment_id" field.
func (eauo *EquipmentAlarmUpdateOne) SetEquipmentID(d datasource.UUID) *EquipmentAlarmUpdateOne {
	eauo.mutation.SetEquipmentID(d)
	return eauo
}

// SetDtcCode sets the "dtc_code" field.
func (eauo *EquipmentAlarmUpdateOne) SetDtcCode(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.ResetDtcCode()
	eauo.mutation.SetDtcCode(i)
	return eauo
}

// AddDtcCode adds i to the "dtc_code" field.
func (eauo *EquipmentAlarmUpdateOne) AddDtcCode(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.AddDtcCode(i)
	return eauo
}

// SetRemoteAddress sets the "remote_address" field.
func (eauo *EquipmentAlarmUpdateOne) SetRemoteAddress(s string) *EquipmentAlarmUpdateOne {
	eauo.mutation.SetRemoteAddress(s)
	return eauo
}

// SetTriggerTime sets the "trigger_time" field.
func (eauo *EquipmentAlarmUpdateOne) SetTriggerTime(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.ResetTriggerTime()
	eauo.mutation.SetTriggerTime(i)
	return eauo
}

// SetNillableTriggerTime sets the "trigger_time" field if the given value is not nil.
func (eauo *EquipmentAlarmUpdateOne) SetNillableTriggerTime(i *int64) *EquipmentAlarmUpdateOne {
	if i != nil {
		eauo.SetTriggerTime(*i)
	}
	return eauo
}

// AddTriggerTime adds i to the "trigger_time" field.
func (eauo *EquipmentAlarmUpdateOne) AddTriggerTime(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.AddTriggerTime(i)
	return eauo
}

// ClearTriggerTime clears the value of the "trigger_time" field.
func (eauo *EquipmentAlarmUpdateOne) ClearTriggerTime() *EquipmentAlarmUpdateOne {
	eauo.mutation.ClearTriggerTime()
	return eauo
}

// SetFinalTime sets the "final_time" field.
func (eauo *EquipmentAlarmUpdateOne) SetFinalTime(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.ResetFinalTime()
	eauo.mutation.SetFinalTime(i)
	return eauo
}

// SetNillableFinalTime sets the "final_time" field if the given value is not nil.
func (eauo *EquipmentAlarmUpdateOne) SetNillableFinalTime(i *int64) *EquipmentAlarmUpdateOne {
	if i != nil {
		eauo.SetFinalTime(*i)
	}
	return eauo
}

// AddFinalTime adds i to the "final_time" field.
func (eauo *EquipmentAlarmUpdateOne) AddFinalTime(i int64) *EquipmentAlarmUpdateOne {
	eauo.mutation.AddFinalTime(i)
	return eauo
}

// ClearFinalTime clears the value of the "final_time" field.
func (eauo *EquipmentAlarmUpdateOne) ClearFinalTime() *EquipmentAlarmUpdateOne {
	eauo.mutation.ClearFinalTime()
	return eauo
}

// SetCount sets the "count" field.
func (eauo *EquipmentAlarmUpdateOne) SetCount(i int) *EquipmentAlarmUpdateOne {
	eauo.mutation.ResetCount()
	eauo.mutation.SetCount(i)
	return eauo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (eauo *EquipmentAlarmUpdateOne) SetNillableCount(i *int) *EquipmentAlarmUpdateOne {
	if i != nil {
		eauo.SetCount(*i)
	}
	return eauo
}

// AddCount adds i to the "count" field.
func (eauo *EquipmentAlarmUpdateOne) AddCount(i int) *EquipmentAlarmUpdateOne {
	eauo.mutation.AddCount(i)
	return eauo
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (eauo *EquipmentAlarmUpdateOne) SetEquipment(e *Equipment) *EquipmentAlarmUpdateOne {
	return eauo.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentAlarmMutation object of the builder.
func (eauo *EquipmentAlarmUpdateOne) Mutation() *EquipmentAlarmMutation {
	return eauo.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (eauo *EquipmentAlarmUpdateOne) ClearEquipment() *EquipmentAlarmUpdateOne {
	eauo.mutation.ClearEquipment()
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EquipmentAlarmUpdateOne) Select(field string, fields ...string) *EquipmentAlarmUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EquipmentAlarm entity.
func (eauo *EquipmentAlarmUpdateOne) Save(ctx context.Context) (*EquipmentAlarm, error) {
	var (
		err  error
		node *EquipmentAlarm
	)
	eauo.defaults()
	if len(eauo.hooks) == 0 {
		if err = eauo.check(); err != nil {
			return nil, err
		}
		node, err = eauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentAlarmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eauo.check(); err != nil {
				return nil, err
			}
			eauo.mutation = mutation
			node, err = eauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eauo.hooks) - 1; i >= 0; i-- {
			if eauo.hooks[i] == nil {
				return nil, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = eauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EquipmentAlarm)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EquipmentAlarmMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EquipmentAlarmUpdateOne) SaveX(ctx context.Context) *EquipmentAlarm {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EquipmentAlarmUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EquipmentAlarmUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eauo *EquipmentAlarmUpdateOne) defaults() {
	if _, ok := eauo.mutation.UpdatedAt(); !ok {
		v := equipmentalarm.UpdateDefaultUpdatedAt()
		eauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eauo *EquipmentAlarmUpdateOne) check() error {
	if _, ok := eauo.mutation.EquipmentID(); eauo.mutation.EquipmentCleared() && !ok {
		return errors.New(`cwmodel: clearing a required unique edge "EquipmentAlarm.equipment"`)
	}
	return nil
}

func (eauo *EquipmentAlarmUpdateOne) sqlSave(ctx context.Context) (_node *EquipmentAlarm, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipmentalarm.Table,
			Columns: equipmentalarm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipmentalarm.FieldID,
			},
		},
	}
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cwmodel: missing "EquipmentAlarm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipmentalarm.FieldID)
		for _, f := range fields {
			if !equipmentalarm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cwmodel: invalid field %q for query", f)}
			}
			if f != equipmentalarm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.Version(); ok {
		_spec.SetField(equipmentalarm.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.AddedVersion(); ok {
		_spec.AddField(equipmentalarm.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.UpdatedBy(); ok {
		_spec.SetField(equipmentalarm.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(equipmentalarm.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.UpdatedAt(); ok {
		_spec.SetField(equipmentalarm.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(equipmentalarm.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.DtcCode(); ok {
		_spec.SetField(equipmentalarm.FieldDtcCode, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.AddedDtcCode(); ok {
		_spec.AddField(equipmentalarm.FieldDtcCode, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.RemoteAddress(); ok {
		_spec.SetField(equipmentalarm.FieldRemoteAddress, field.TypeString, value)
	}
	if value, ok := eauo.mutation.TriggerTime(); ok {
		_spec.SetField(equipmentalarm.FieldTriggerTime, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.AddedTriggerTime(); ok {
		_spec.AddField(equipmentalarm.FieldTriggerTime, field.TypeInt64, value)
	}
	if eauo.mutation.TriggerTimeCleared() {
		_spec.ClearField(equipmentalarm.FieldTriggerTime, field.TypeInt64)
	}
	if value, ok := eauo.mutation.FinalTime(); ok {
		_spec.SetField(equipmentalarm.FieldFinalTime, field.TypeInt64, value)
	}
	if value, ok := eauo.mutation.AddedFinalTime(); ok {
		_spec.AddField(equipmentalarm.FieldFinalTime, field.TypeInt64, value)
	}
	if eauo.mutation.FinalTimeCleared() {
		_spec.ClearField(equipmentalarm.FieldFinalTime, field.TypeInt64)
	}
	if value, ok := eauo.mutation.Count(); ok {
		_spec.SetField(equipmentalarm.FieldCount, field.TypeInt, value)
	}
	if value, ok := eauo.mutation.AddedCount(); ok {
		_spec.AddField(equipmentalarm.FieldCount, field.TypeInt, value)
	}
	if eauo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentalarm.EquipmentTable,
			Columns: []string{equipmentalarm.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentalarm.EquipmentTable,
			Columns: []string{equipmentalarm.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EquipmentAlarm{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentalarm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
