// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/Kotodian/cwmodel"
)

// The AppModuleInfoFunc type is an adapter to allow the use of ordinary
// function as AppModuleInfo mutator.
type AppModuleInfoFunc func(context.Context, *cwmodel.AppModuleInfoMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f AppModuleInfoFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.AppModuleInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.AppModuleInfoMutation", m)
	}
	return f(ctx, mv)
}

// The ConnectorFunc type is an adapter to allow the use of ordinary
// function as Connector mutator.
type ConnectorFunc func(context.Context, *cwmodel.ConnectorMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectorFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.ConnectorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.ConnectorMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentFunc type is an adapter to allow the use of ordinary
// function as Equipment mutator.
type EquipmentFunc func(context.Context, *cwmodel.EquipmentMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.EquipmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.EquipmentMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentAlarmFunc type is an adapter to allow the use of ordinary
// function as EquipmentAlarm mutator.
type EquipmentAlarmFunc func(context.Context, *cwmodel.EquipmentAlarmMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentAlarmFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.EquipmentAlarmMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.EquipmentAlarmMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentFirmwareEffectFunc type is an adapter to allow the use of ordinary
// function as EquipmentFirmwareEffect mutator.
type EquipmentFirmwareEffectFunc func(context.Context, *cwmodel.EquipmentFirmwareEffectMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentFirmwareEffectFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.EquipmentFirmwareEffectMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.EquipmentFirmwareEffectMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentInfoFunc type is an adapter to allow the use of ordinary
// function as EquipmentInfo mutator.
type EquipmentInfoFunc func(context.Context, *cwmodel.EquipmentInfoMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentInfoFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.EquipmentInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.EquipmentInfoMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentIotFunc type is an adapter to allow the use of ordinary
// function as EquipmentIot mutator.
type EquipmentIotFunc func(context.Context, *cwmodel.EquipmentIotMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentIotFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.EquipmentIotMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.EquipmentIotMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentLogFunc type is an adapter to allow the use of ordinary
// function as EquipmentLog mutator.
type EquipmentLogFunc func(context.Context, *cwmodel.EquipmentLogMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentLogFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.EquipmentLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.EquipmentLogMutation", m)
	}
	return f(ctx, mv)
}

// The EvseFunc type is an adapter to allow the use of ordinary
// function as Evse mutator.
type EvseFunc func(context.Context, *cwmodel.EvseMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f EvseFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.EvseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.EvseMutation", m)
	}
	return f(ctx, mv)
}

// The FirmwareFunc type is an adapter to allow the use of ordinary
// function as Firmware mutator.
type FirmwareFunc func(context.Context, *cwmodel.FirmwareMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f FirmwareFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.FirmwareMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.FirmwareMutation", m)
	}
	return f(ctx, mv)
}

// The ManufacturerFunc type is an adapter to allow the use of ordinary
// function as Manufacturer mutator.
type ManufacturerFunc func(context.Context, *cwmodel.ManufacturerMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f ManufacturerFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.ManufacturerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.ManufacturerMutation", m)
	}
	return f(ctx, mv)
}

// The ModelFunc type is an adapter to allow the use of ordinary
// function as Model mutator.
type ModelFunc func(context.Context, *cwmodel.ModelMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f ModelFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.ModelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.ModelMutation", m)
	}
	return f(ctx, mv)
}

// The OrderEventFunc type is an adapter to allow the use of ordinary
// function as OrderEvent mutator.
type OrderEventFunc func(context.Context, *cwmodel.OrderEventMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f OrderEventFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.OrderEventMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.OrderEventMutation", m)
	}
	return f(ctx, mv)
}

// The OrderInfoFunc type is an adapter to allow the use of ordinary
// function as OrderInfo mutator.
type OrderInfoFunc func(context.Context, *cwmodel.OrderInfoMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f OrderInfoFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.OrderInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.OrderInfoMutation", m)
	}
	return f(ctx, mv)
}

// The ReservationFunc type is an adapter to allow the use of ordinary
// function as Reservation mutator.
type ReservationFunc func(context.Context, *cwmodel.ReservationMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f ReservationFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.ReservationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.ReservationMutation", m)
	}
	return f(ctx, mv)
}

// The SmartChargingEffectFunc type is an adapter to allow the use of ordinary
// function as SmartChargingEffect mutator.
type SmartChargingEffectFunc func(context.Context, *cwmodel.SmartChargingEffectMutation) (cwmodel.Value, error)

// Mutate calls f(ctx, m).
func (f SmartChargingEffectFunc) Mutate(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
	mv, ok := m.(*cwmodel.SmartChargingEffectMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *cwmodel.SmartChargingEffectMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, cwmodel.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m cwmodel.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m cwmodel.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m cwmodel.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op cwmodel.Op) Condition {
	return func(_ context.Context, m cwmodel.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m cwmodel.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m cwmodel.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m cwmodel.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk cwmodel.Hook, cond Condition) cwmodel.Hook {
	return func(next cwmodel.Mutator) cwmodel.Mutator {
		return cwmodel.MutateFunc(func(ctx context.Context, m cwmodel.Mutation) (cwmodel.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, cwmodel.Delete|cwmodel.Create)
func On(hk cwmodel.Hook, op cwmodel.Op) cwmodel.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, cwmodel.Update|cwmodel.UpdateOne)
func Unless(hk cwmodel.Hook, op cwmodel.Op) cwmodel.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) cwmodel.Hook {
	return func(cwmodel.Mutator) cwmodel.Mutator {
		return cwmodel.MutateFunc(func(context.Context, cwmodel.Mutation) (cwmodel.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []cwmodel.Hook {
//		return []cwmodel.Hook{
//			Reject(cwmodel.Delete|cwmodel.Update),
//		}
//	}
func Reject(op cwmodel.Op) cwmodel.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []cwmodel.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...cwmodel.Hook) Chain {
	return Chain{append([]cwmodel.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() cwmodel.Hook {
	return func(mutator cwmodel.Mutator) cwmodel.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...cwmodel.Hook) Chain {
	newHooks := make([]cwmodel.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
