// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/equipmentlog"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentLog is the model entity for the EquipmentLog schema.
type EquipmentLog struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID datasource.UUID `json:"id,omitempty"`
	// 乐观锁
	Version int64 `json:"version,omitempty"`
	// 创建者
	CreatedBy datasource.UUID `json:"created_by,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改者
	UpdatedBy datasource.UUID `json:"updated_by,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 请求id
	RequestID int64 `json:"requestId"`
	// 状态
	State int `json:"state"`
	// data link
	DataLink datasource.UUID `json:"dataLink"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentLogQuery when eager-loading is set.
	Edges        EquipmentLogEdges `json:"-"`
	equipment_id *datasource.UUID
}

// EquipmentLogEdges holds the relations/edges for other nodes in the graph.
type EquipmentLogEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentLogEdges) EquipmentOrErr() (*Equipment, error) {
	if e.loadedTypes[0] {
		if e.Equipment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: equipment.Label}
		}
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EquipmentLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipmentlog.FieldID, equipmentlog.FieldVersion, equipmentlog.FieldCreatedBy, equipmentlog.FieldCreatedAt, equipmentlog.FieldUpdatedBy, equipmentlog.FieldUpdatedAt, equipmentlog.FieldRequestID, equipmentlog.FieldState, equipmentlog.FieldDataLink:
			values[i] = new(sql.NullInt64)
		case equipmentlog.ForeignKeys[0]: // equipment_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EquipmentLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EquipmentLog fields.
func (el *EquipmentLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipmentlog.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				el.ID = datasource.UUID(value.Int64)
			}
		case equipmentlog.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				el.Version = value.Int64
			}
		case equipmentlog.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				el.CreatedBy = datasource.UUID(value.Int64)
			}
		case equipmentlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				el.CreatedAt = value.Int64
			}
		case equipmentlog.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				el.UpdatedBy = datasource.UUID(value.Int64)
			}
		case equipmentlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				el.UpdatedAt = value.Int64
			}
		case equipmentlog.FieldRequestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				el.RequestID = value.Int64
			}
		case equipmentlog.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				el.State = int(value.Int64)
			}
		case equipmentlog.FieldDataLink:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field data_link", values[i])
			} else if value.Valid {
				el.DataLink = datasource.UUID(value.Int64)
			}
		case equipmentlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_id", values[i])
			} else if value.Valid {
				el.equipment_id = new(datasource.UUID)
				*el.equipment_id = datasource.UUID(value.Int64)
			}
		}
	}
	return nil
}

// QueryEquipment queries the "equipment" edge of the EquipmentLog entity.
func (el *EquipmentLog) QueryEquipment() *EquipmentQuery {
	return (&EquipmentLogClient{config: el.config}).QueryEquipment(el)
}

// Update returns a builder for updating this EquipmentLog.
// Note that you need to call EquipmentLog.Unwrap() before calling this method if this EquipmentLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EquipmentLog) Update() *EquipmentLogUpdateOne {
	return (&EquipmentLogClient{config: el.config}).UpdateOne(el)
}

// Unwrap unwraps the EquipmentLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EquipmentLog) Unwrap() *EquipmentLog {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("cwmodel: EquipmentLog is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EquipmentLog) String() string {
	var builder strings.Builder
	builder.WriteString("EquipmentLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", el.Version))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", el.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", el.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", el.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", el.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", el.RequestID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", el.State))
	builder.WriteString(", ")
	builder.WriteString("data_link=")
	builder.WriteString(fmt.Sprintf("%v", el.DataLink))
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentLogs is a parsable slice of EquipmentLog.
type EquipmentLogs []*EquipmentLog

func (el EquipmentLogs) config(cfg config) {
	for _i := range el {
		el[_i].config = cfg
	}
}
