// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/equipmentlog"
	"github.com/Kotodian/cwmodel/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentLogUpdate is the builder for updating EquipmentLog entities.
type EquipmentLogUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentLogMutation
}

// Where appends a list predicates to the EquipmentLogUpdate builder.
func (elu *EquipmentLogUpdate) Where(ps ...predicate.EquipmentLog) *EquipmentLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetVersion sets the "version" field.
func (elu *EquipmentLogUpdate) SetVersion(i int64) *EquipmentLogUpdate {
	elu.mutation.ResetVersion()
	elu.mutation.SetVersion(i)
	return elu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (elu *EquipmentLogUpdate) SetNillableVersion(i *int64) *EquipmentLogUpdate {
	if i != nil {
		elu.SetVersion(*i)
	}
	return elu
}

// AddVersion adds i to the "version" field.
func (elu *EquipmentLogUpdate) AddVersion(i int64) *EquipmentLogUpdate {
	elu.mutation.AddVersion(i)
	return elu
}

// SetUpdatedBy sets the "updated_by" field.
func (elu *EquipmentLogUpdate) SetUpdatedBy(d datasource.UUID) *EquipmentLogUpdate {
	elu.mutation.ResetUpdatedBy()
	elu.mutation.SetUpdatedBy(d)
	return elu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (elu *EquipmentLogUpdate) SetNillableUpdatedBy(d *datasource.UUID) *EquipmentLogUpdate {
	if d != nil {
		elu.SetUpdatedBy(*d)
	}
	return elu
}

// AddUpdatedBy adds d to the "updated_by" field.
func (elu *EquipmentLogUpdate) AddUpdatedBy(d datasource.UUID) *EquipmentLogUpdate {
	elu.mutation.AddUpdatedBy(d)
	return elu
}

// SetUpdatedAt sets the "updated_at" field.
func (elu *EquipmentLogUpdate) SetUpdatedAt(i int64) *EquipmentLogUpdate {
	elu.mutation.ResetUpdatedAt()
	elu.mutation.SetUpdatedAt(i)
	return elu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (elu *EquipmentLogUpdate) AddUpdatedAt(i int64) *EquipmentLogUpdate {
	elu.mutation.AddUpdatedAt(i)
	return elu
}

// SetRequestId sets the "requestId" field.
func (elu *EquipmentLogUpdate) SetRequestId(i int64) *EquipmentLogUpdate {
	elu.mutation.ResetRequestId()
	elu.mutation.SetRequestId(i)
	return elu
}

// AddRequestId adds i to the "requestId" field.
func (elu *EquipmentLogUpdate) AddRequestId(i int64) *EquipmentLogUpdate {
	elu.mutation.AddRequestId(i)
	return elu
}

// SetState sets the "state" field.
func (elu *EquipmentLogUpdate) SetState(i int) *EquipmentLogUpdate {
	elu.mutation.ResetState()
	elu.mutation.SetState(i)
	return elu
}

// AddState adds i to the "state" field.
func (elu *EquipmentLogUpdate) AddState(i int) *EquipmentLogUpdate {
	elu.mutation.AddState(i)
	return elu
}

// SetDataLink sets the "data_link" field.
func (elu *EquipmentLogUpdate) SetDataLink(d datasource.UUID) *EquipmentLogUpdate {
	elu.mutation.ResetDataLink()
	elu.mutation.SetDataLink(d)
	return elu
}

// AddDataLink adds d to the "data_link" field.
func (elu *EquipmentLogUpdate) AddDataLink(d datasource.UUID) *EquipmentLogUpdate {
	elu.mutation.AddDataLink(d)
	return elu
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (elu *EquipmentLogUpdate) SetEquipmentID(id datasource.UUID) *EquipmentLogUpdate {
	elu.mutation.SetEquipmentID(id)
	return elu
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (elu *EquipmentLogUpdate) SetNillableEquipmentID(id *datasource.UUID) *EquipmentLogUpdate {
	if id != nil {
		elu = elu.SetEquipmentID(*id)
	}
	return elu
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (elu *EquipmentLogUpdate) SetEquipment(e *Equipment) *EquipmentLogUpdate {
	return elu.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentLogMutation object of the builder.
func (elu *EquipmentLogUpdate) Mutation() *EquipmentLogMutation {
	return elu.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (elu *EquipmentLogUpdate) ClearEquipment() *EquipmentLogUpdate {
	elu.mutation.ClearEquipment()
	return elu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EquipmentLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	elu.defaults()
	if len(elu.hooks) == 0 {
		affected, err = elu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			elu.mutation = mutation
			affected, err = elu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(elu.hooks) - 1; i >= 0; i-- {
			if elu.hooks[i] == nil {
				return 0, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = elu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EquipmentLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EquipmentLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EquipmentLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elu *EquipmentLogUpdate) defaults() {
	if _, ok := elu.mutation.UpdatedAt(); !ok {
		v := equipmentlog.UpdateDefaultUpdatedAt()
		elu.mutation.SetUpdatedAt(v)
	}
}

func (elu *EquipmentLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipmentlog.Table,
			Columns: equipmentlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipmentlog.FieldID,
			},
		},
	}
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.Version(); ok {
		_spec.SetField(equipmentlog.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := elu.mutation.AddedVersion(); ok {
		_spec.AddField(equipmentlog.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := elu.mutation.UpdatedBy(); ok {
		_spec.SetField(equipmentlog.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(equipmentlog.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.UpdatedAt(); ok {
		_spec.SetField(equipmentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := elu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(equipmentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := elu.mutation.RequestId(); ok {
		_spec.SetField(equipmentlog.FieldRequestId, field.TypeInt64, value)
	}
	if value, ok := elu.mutation.AddedRequestId(); ok {
		_spec.AddField(equipmentlog.FieldRequestId, field.TypeInt64, value)
	}
	if value, ok := elu.mutation.State(); ok {
		_spec.SetField(equipmentlog.FieldState, field.TypeInt, value)
	}
	if value, ok := elu.mutation.AddedState(); ok {
		_spec.AddField(equipmentlog.FieldState, field.TypeInt, value)
	}
	if value, ok := elu.mutation.DataLink(); ok {
		_spec.SetField(equipmentlog.FieldDataLink, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.AddedDataLink(); ok {
		_spec.AddField(equipmentlog.FieldDataLink, field.TypeUint64, value)
	}
	if elu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentlog.EquipmentTable,
			Columns: []string{equipmentlog.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentlog.EquipmentTable,
			Columns: []string{equipmentlog.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EquipmentLogUpdateOne is the builder for updating a single EquipmentLog entity.
type EquipmentLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentLogMutation
}

// SetVersion sets the "version" field.
func (eluo *EquipmentLogUpdateOne) SetVersion(i int64) *EquipmentLogUpdateOne {
	eluo.mutation.ResetVersion()
	eluo.mutation.SetVersion(i)
	return eluo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (eluo *EquipmentLogUpdateOne) SetNillableVersion(i *int64) *EquipmentLogUpdateOne {
	if i != nil {
		eluo.SetVersion(*i)
	}
	return eluo
}

// AddVersion adds i to the "version" field.
func (eluo *EquipmentLogUpdateOne) AddVersion(i int64) *EquipmentLogUpdateOne {
	eluo.mutation.AddVersion(i)
	return eluo
}

// SetUpdatedBy sets the "updated_by" field.
func (eluo *EquipmentLogUpdateOne) SetUpdatedBy(d datasource.UUID) *EquipmentLogUpdateOne {
	eluo.mutation.ResetUpdatedBy()
	eluo.mutation.SetUpdatedBy(d)
	return eluo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eluo *EquipmentLogUpdateOne) SetNillableUpdatedBy(d *datasource.UUID) *EquipmentLogUpdateOne {
	if d != nil {
		eluo.SetUpdatedBy(*d)
	}
	return eluo
}

// AddUpdatedBy adds d to the "updated_by" field.
func (eluo *EquipmentLogUpdateOne) AddUpdatedBy(d datasource.UUID) *EquipmentLogUpdateOne {
	eluo.mutation.AddUpdatedBy(d)
	return eluo
}

// SetUpdatedAt sets the "updated_at" field.
func (eluo *EquipmentLogUpdateOne) SetUpdatedAt(i int64) *EquipmentLogUpdateOne {
	eluo.mutation.ResetUpdatedAt()
	eluo.mutation.SetUpdatedAt(i)
	return eluo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (eluo *EquipmentLogUpdateOne) AddUpdatedAt(i int64) *EquipmentLogUpdateOne {
	eluo.mutation.AddUpdatedAt(i)
	return eluo
}

// SetRequestId sets the "requestId" field.
func (eluo *EquipmentLogUpdateOne) SetRequestId(i int64) *EquipmentLogUpdateOne {
	eluo.mutation.ResetRequestId()
	eluo.mutation.SetRequestId(i)
	return eluo
}

// AddRequestId adds i to the "requestId" field.
func (eluo *EquipmentLogUpdateOne) AddRequestId(i int64) *EquipmentLogUpdateOne {
	eluo.mutation.AddRequestId(i)
	return eluo
}

// SetState sets the "state" field.
func (eluo *EquipmentLogUpdateOne) SetState(i int) *EquipmentLogUpdateOne {
	eluo.mutation.ResetState()
	eluo.mutation.SetState(i)
	return eluo
}

// AddState adds i to the "state" field.
func (eluo *EquipmentLogUpdateOne) AddState(i int) *EquipmentLogUpdateOne {
	eluo.mutation.AddState(i)
	return eluo
}

// SetDataLink sets the "data_link" field.
func (eluo *EquipmentLogUpdateOne) SetDataLink(d datasource.UUID) *EquipmentLogUpdateOne {
	eluo.mutation.ResetDataLink()
	eluo.mutation.SetDataLink(d)
	return eluo
}

// AddDataLink adds d to the "data_link" field.
func (eluo *EquipmentLogUpdateOne) AddDataLink(d datasource.UUID) *EquipmentLogUpdateOne {
	eluo.mutation.AddDataLink(d)
	return eluo
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (eluo *EquipmentLogUpdateOne) SetEquipmentID(id datasource.UUID) *EquipmentLogUpdateOne {
	eluo.mutation.SetEquipmentID(id)
	return eluo
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (eluo *EquipmentLogUpdateOne) SetNillableEquipmentID(id *datasource.UUID) *EquipmentLogUpdateOne {
	if id != nil {
		eluo = eluo.SetEquipmentID(*id)
	}
	return eluo
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (eluo *EquipmentLogUpdateOne) SetEquipment(e *Equipment) *EquipmentLogUpdateOne {
	return eluo.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentLogMutation object of the builder.
func (eluo *EquipmentLogUpdateOne) Mutation() *EquipmentLogMutation {
	return eluo.mutation
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (eluo *EquipmentLogUpdateOne) ClearEquipment() *EquipmentLogUpdateOne {
	eluo.mutation.ClearEquipment()
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EquipmentLogUpdateOne) Select(field string, fields ...string) *EquipmentLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EquipmentLog entity.
func (eluo *EquipmentLogUpdateOne) Save(ctx context.Context) (*EquipmentLog, error) {
	var (
		err  error
		node *EquipmentLog
	)
	eluo.defaults()
	if len(eluo.hooks) == 0 {
		node, err = eluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eluo.mutation = mutation
			node, err = eluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eluo.hooks) - 1; i >= 0; i-- {
			if eluo.hooks[i] == nil {
				return nil, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = eluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EquipmentLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EquipmentLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EquipmentLogUpdateOne) SaveX(ctx context.Context) *EquipmentLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EquipmentLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EquipmentLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eluo *EquipmentLogUpdateOne) defaults() {
	if _, ok := eluo.mutation.UpdatedAt(); !ok {
		v := equipmentlog.UpdateDefaultUpdatedAt()
		eluo.mutation.SetUpdatedAt(v)
	}
}

func (eluo *EquipmentLogUpdateOne) sqlSave(ctx context.Context) (_node *EquipmentLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipmentlog.Table,
			Columns: equipmentlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipmentlog.FieldID,
			},
		},
	}
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`cwmodel: missing "EquipmentLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipmentlog.FieldID)
		for _, f := range fields {
			if !equipmentlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("cwmodel: invalid field %q for query", f)}
			}
			if f != equipmentlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.Version(); ok {
		_spec.SetField(equipmentlog.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := eluo.mutation.AddedVersion(); ok {
		_spec.AddField(equipmentlog.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := eluo.mutation.UpdatedBy(); ok {
		_spec.SetField(equipmentlog.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(equipmentlog.FieldUpdatedBy, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.UpdatedAt(); ok {
		_spec.SetField(equipmentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eluo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(equipmentlog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := eluo.mutation.RequestId(); ok {
		_spec.SetField(equipmentlog.FieldRequestId, field.TypeInt64, value)
	}
	if value, ok := eluo.mutation.AddedRequestId(); ok {
		_spec.AddField(equipmentlog.FieldRequestId, field.TypeInt64, value)
	}
	if value, ok := eluo.mutation.State(); ok {
		_spec.SetField(equipmentlog.FieldState, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.AddedState(); ok {
		_spec.AddField(equipmentlog.FieldState, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.DataLink(); ok {
		_spec.SetField(equipmentlog.FieldDataLink, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.AddedDataLink(); ok {
		_spec.AddField(equipmentlog.FieldDataLink, field.TypeUint64, value)
	}
	if eluo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentlog.EquipmentTable,
			Columns: []string{equipmentlog.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentlog.EquipmentTable,
			Columns: []string{equipmentlog.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EquipmentLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
