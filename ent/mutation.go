// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/Kotodian/ent-practice/ent/connector"
	"github.com/Kotodian/ent-practice/ent/enums"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentinfo"
	"github.com/Kotodian/ent-practice/ent/evse"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/gokit/datasource"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeConnector     = "Connector"
	TypeEquipment     = "Equipment"
	TypeEquipmentInfo = "EquipmentInfo"
	TypeEvse          = "Evse"
)

// ConnectorMutation represents an operation that mutates the Connector nodes in the graph.
type ConnectorMutation struct {
	config
	op               Op
	typ              string
	id               *datasource.UUID
	equipment_sn     *string
	evse_serial      *string
	serial           *string
	current_state    *enums.ConnectorState
	before_state     *enums.ConnectorState
	clearedFields    map[string]struct{}
	evse             *datasource.UUID
	clearedevse      bool
	equipment        *datasource.UUID
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*Connector, error)
	predicates       []predicate.Connector
}

var _ ent.Mutation = (*ConnectorMutation)(nil)

// connectorOption allows management of the mutation configuration using functional options.
type connectorOption func(*ConnectorMutation)

// newConnectorMutation creates new mutation for the Connector entity.
func newConnectorMutation(c config, op Op, opts ...connectorOption) *ConnectorMutation {
	m := &ConnectorMutation{
		config:        c,
		op:            op,
		typ:           TypeConnector,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConnectorID sets the ID field of the mutation.
func withConnectorID(id datasource.UUID) connectorOption {
	return func(m *ConnectorMutation) {
		var (
			err   error
			once  sync.Once
			value *Connector
		)
		m.oldValue = func(ctx context.Context) (*Connector, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Connector.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConnector sets the old Connector of the mutation.
func withConnector(node *Connector) connectorOption {
	return func(m *ConnectorMutation) {
		m.oldValue = func(context.Context) (*Connector, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConnectorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConnectorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Connector entities.
func (m *ConnectorMutation) SetID(id datasource.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConnectorMutation) ID() (id datasource.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConnectorMutation) IDs(ctx context.Context) ([]datasource.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []datasource.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Connector.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEquipmentSn sets the "equipment_sn" field.
func (m *ConnectorMutation) SetEquipmentSn(s string) {
	m.equipment_sn = &s
}

// EquipmentSn returns the value of the "equipment_sn" field in the mutation.
func (m *ConnectorMutation) EquipmentSn() (r string, exists bool) {
	v := m.equipment_sn
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentSn returns the old "equipment_sn" field's value of the Connector entity.
// If the Connector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectorMutation) OldEquipmentSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentSn: %w", err)
	}
	return oldValue.EquipmentSn, nil
}

// ResetEquipmentSn resets all changes to the "equipment_sn" field.
func (m *ConnectorMutation) ResetEquipmentSn() {
	m.equipment_sn = nil
}

// SetEvseSerial sets the "evse_serial" field.
func (m *ConnectorMutation) SetEvseSerial(s string) {
	m.evse_serial = &s
}

// EvseSerial returns the value of the "evse_serial" field in the mutation.
func (m *ConnectorMutation) EvseSerial() (r string, exists bool) {
	v := m.evse_serial
	if v == nil {
		return
	}
	return *v, true
}

// OldEvseSerial returns the old "evse_serial" field's value of the Connector entity.
// If the Connector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectorMutation) OldEvseSerial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvseSerial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvseSerial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvseSerial: %w", err)
	}
	return oldValue.EvseSerial, nil
}

// ResetEvseSerial resets all changes to the "evse_serial" field.
func (m *ConnectorMutation) ResetEvseSerial() {
	m.evse_serial = nil
}

// SetSerial sets the "serial" field.
func (m *ConnectorMutation) SetSerial(s string) {
	m.serial = &s
}

// Serial returns the value of the "serial" field in the mutation.
func (m *ConnectorMutation) Serial() (r string, exists bool) {
	v := m.serial
	if v == nil {
		return
	}
	return *v, true
}

// OldSerial returns the old "serial" field's value of the Connector entity.
// If the Connector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectorMutation) OldSerial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerial: %w", err)
	}
	return oldValue.Serial, nil
}

// ResetSerial resets all changes to the "serial" field.
func (m *ConnectorMutation) ResetSerial() {
	m.serial = nil
}

// SetCurrentState sets the "current_state" field.
func (m *ConnectorMutation) SetCurrentState(es enums.ConnectorState) {
	m.current_state = &es
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *ConnectorMutation) CurrentState() (r enums.ConnectorState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the Connector entity.
// If the Connector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectorMutation) OldCurrentState(ctx context.Context) (v enums.ConnectorState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *ConnectorMutation) ResetCurrentState() {
	m.current_state = nil
}

// SetBeforeState sets the "before_state" field.
func (m *ConnectorMutation) SetBeforeState(es enums.ConnectorState) {
	m.before_state = &es
}

// BeforeState returns the value of the "before_state" field in the mutation.
func (m *ConnectorMutation) BeforeState() (r enums.ConnectorState, exists bool) {
	v := m.before_state
	if v == nil {
		return
	}
	return *v, true
}

// OldBeforeState returns the old "before_state" field's value of the Connector entity.
// If the Connector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConnectorMutation) OldBeforeState(ctx context.Context) (v enums.ConnectorState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBeforeState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBeforeState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBeforeState: %w", err)
	}
	return oldValue.BeforeState, nil
}

// ResetBeforeState resets all changes to the "before_state" field.
func (m *ConnectorMutation) ResetBeforeState() {
	m.before_state = nil
}

// SetEvseID sets the "evse" edge to the Evse entity by id.
func (m *ConnectorMutation) SetEvseID(id datasource.UUID) {
	m.evse = &id
}

// ClearEvse clears the "evse" edge to the Evse entity.
func (m *ConnectorMutation) ClearEvse() {
	m.clearedevse = true
}

// EvseCleared reports if the "evse" edge to the Evse entity was cleared.
func (m *ConnectorMutation) EvseCleared() bool {
	return m.clearedevse
}

// EvseID returns the "evse" edge ID in the mutation.
func (m *ConnectorMutation) EvseID() (id datasource.UUID, exists bool) {
	if m.evse != nil {
		return *m.evse, true
	}
	return
}

// EvseIDs returns the "evse" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EvseID instead. It exists only for internal usage by the builders.
func (m *ConnectorMutation) EvseIDs() (ids []datasource.UUID) {
	if id := m.evse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvse resets all changes to the "evse" edge.
func (m *ConnectorMutation) ResetEvse() {
	m.evse = nil
	m.clearedevse = false
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by id.
func (m *ConnectorMutation) SetEquipmentID(id datasource.UUID) {
	m.equipment = &id
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *ConnectorMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *ConnectorMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentID returns the "equipment" edge ID in the mutation.
func (m *ConnectorMutation) EquipmentID() (id datasource.UUID, exists bool) {
	if m.equipment != nil {
		return *m.equipment, true
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *ConnectorMutation) EquipmentIDs() (ids []datasource.UUID) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *ConnectorMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// Where appends a list predicates to the ConnectorMutation builder.
func (m *ConnectorMutation) Where(ps ...predicate.Connector) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ConnectorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Connector).
func (m *ConnectorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConnectorMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.equipment_sn != nil {
		fields = append(fields, connector.FieldEquipmentSn)
	}
	if m.evse_serial != nil {
		fields = append(fields, connector.FieldEvseSerial)
	}
	if m.serial != nil {
		fields = append(fields, connector.FieldSerial)
	}
	if m.current_state != nil {
		fields = append(fields, connector.FieldCurrentState)
	}
	if m.before_state != nil {
		fields = append(fields, connector.FieldBeforeState)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConnectorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case connector.FieldEquipmentSn:
		return m.EquipmentSn()
	case connector.FieldEvseSerial:
		return m.EvseSerial()
	case connector.FieldSerial:
		return m.Serial()
	case connector.FieldCurrentState:
		return m.CurrentState()
	case connector.FieldBeforeState:
		return m.BeforeState()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConnectorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case connector.FieldEquipmentSn:
		return m.OldEquipmentSn(ctx)
	case connector.FieldEvseSerial:
		return m.OldEvseSerial(ctx)
	case connector.FieldSerial:
		return m.OldSerial(ctx)
	case connector.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case connector.FieldBeforeState:
		return m.OldBeforeState(ctx)
	}
	return nil, fmt.Errorf("unknown Connector field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConnectorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case connector.FieldEquipmentSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentSn(v)
		return nil
	case connector.FieldEvseSerial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvseSerial(v)
		return nil
	case connector.FieldSerial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerial(v)
		return nil
	case connector.FieldCurrentState:
		v, ok := value.(enums.ConnectorState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case connector.FieldBeforeState:
		v, ok := value.(enums.ConnectorState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBeforeState(v)
		return nil
	}
	return fmt.Errorf("unknown Connector field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConnectorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConnectorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConnectorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Connector numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConnectorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConnectorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConnectorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Connector nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConnectorMutation) ResetField(name string) error {
	switch name {
	case connector.FieldEquipmentSn:
		m.ResetEquipmentSn()
		return nil
	case connector.FieldEvseSerial:
		m.ResetEvseSerial()
		return nil
	case connector.FieldSerial:
		m.ResetSerial()
		return nil
	case connector.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case connector.FieldBeforeState:
		m.ResetBeforeState()
		return nil
	}
	return fmt.Errorf("unknown Connector field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConnectorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.evse != nil {
		edges = append(edges, connector.EdgeEvse)
	}
	if m.equipment != nil {
		edges = append(edges, connector.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConnectorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case connector.EdgeEvse:
		if id := m.evse; id != nil {
			return []ent.Value{*id}
		}
	case connector.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConnectorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConnectorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConnectorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedevse {
		edges = append(edges, connector.EdgeEvse)
	}
	if m.clearedequipment {
		edges = append(edges, connector.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConnectorMutation) EdgeCleared(name string) bool {
	switch name {
	case connector.EdgeEvse:
		return m.clearedevse
	case connector.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConnectorMutation) ClearEdge(name string) error {
	switch name {
	case connector.EdgeEvse:
		m.ClearEvse()
		return nil
	case connector.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown Connector unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConnectorMutation) ResetEdge(name string) error {
	switch name {
	case connector.EdgeEvse:
		m.ResetEvse()
		return nil
	case connector.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown Connector edge %s", name)
}

// EquipmentMutation represents an operation that mutates the Equipment nodes in the graph.
type EquipmentMutation struct {
	config
	op                    Op
	typ                   string
	id                    *datasource.UUID
	sn                    *string
	category              *enums.EquipmentCategory
	operator_id           *datasource.UUID
	addoperator_id        *datasource.UUID
	station_id            *datasource.UUID
	addstation_id         *datasource.UUID
	clearedFields         map[string]struct{}
	equipment_info        *datasource.UUID
	clearedequipment_info bool
	evses                 map[datasource.UUID]struct{}
	removedevses          map[datasource.UUID]struct{}
	clearedevses          bool
	connectors            map[datasource.UUID]struct{}
	removedconnectors     map[datasource.UUID]struct{}
	clearedconnectors     bool
	done                  bool
	oldValue              func(context.Context) (*Equipment, error)
	predicates            []predicate.Equipment
}

var _ ent.Mutation = (*EquipmentMutation)(nil)

// equipmentOption allows management of the mutation configuration using functional options.
type equipmentOption func(*EquipmentMutation)

// newEquipmentMutation creates new mutation for the Equipment entity.
func newEquipmentMutation(c config, op Op, opts ...equipmentOption) *EquipmentMutation {
	m := &EquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentID sets the ID field of the mutation.
func withEquipmentID(id datasource.UUID) equipmentOption {
	return func(m *EquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Equipment
		)
		m.oldValue = func(ctx context.Context) (*Equipment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Equipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipment sets the old Equipment of the mutation.
func withEquipment(node *Equipment) equipmentOption {
	return func(m *EquipmentMutation) {
		m.oldValue = func(context.Context) (*Equipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Equipment entities.
func (m *EquipmentMutation) SetID(id datasource.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EquipmentMutation) ID() (id datasource.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EquipmentMutation) IDs(ctx context.Context) ([]datasource.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []datasource.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Equipment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSn sets the "sn" field.
func (m *EquipmentMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *EquipmentMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *EquipmentMutation) ResetSn() {
	m.sn = nil
}

// SetCategory sets the "category" field.
func (m *EquipmentMutation) SetCategory(ec enums.EquipmentCategory) {
	m.category = &ec
}

// Category returns the value of the "category" field in the mutation.
func (m *EquipmentMutation) Category() (r enums.EquipmentCategory, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldCategory(ctx context.Context) (v enums.EquipmentCategory, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *EquipmentMutation) ResetCategory() {
	m.category = nil
}

// SetOperatorID sets the "operator_id" field.
func (m *EquipmentMutation) SetOperatorID(d datasource.UUID) {
	m.operator_id = &d
	m.addoperator_id = nil
}

// OperatorID returns the value of the "operator_id" field in the mutation.
func (m *EquipmentMutation) OperatorID() (r datasource.UUID, exists bool) {
	v := m.operator_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOperatorID returns the old "operator_id" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldOperatorID(ctx context.Context) (v datasource.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperatorID: %w", err)
	}
	return oldValue.OperatorID, nil
}

// AddOperatorID adds d to the "operator_id" field.
func (m *EquipmentMutation) AddOperatorID(d datasource.UUID) {
	if m.addoperator_id != nil {
		*m.addoperator_id += d
	} else {
		m.addoperator_id = &d
	}
}

// AddedOperatorID returns the value that was added to the "operator_id" field in this mutation.
func (m *EquipmentMutation) AddedOperatorID() (r datasource.UUID, exists bool) {
	v := m.addoperator_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOperatorID resets all changes to the "operator_id" field.
func (m *EquipmentMutation) ResetOperatorID() {
	m.operator_id = nil
	m.addoperator_id = nil
}

// SetStationID sets the "station_id" field.
func (m *EquipmentMutation) SetStationID(d datasource.UUID) {
	m.station_id = &d
	m.addstation_id = nil
}

// StationID returns the value of the "station_id" field in the mutation.
func (m *EquipmentMutation) StationID() (r datasource.UUID, exists bool) {
	v := m.station_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStationID returns the old "station_id" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldStationID(ctx context.Context) (v datasource.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStationID: %w", err)
	}
	return oldValue.StationID, nil
}

// AddStationID adds d to the "station_id" field.
func (m *EquipmentMutation) AddStationID(d datasource.UUID) {
	if m.addstation_id != nil {
		*m.addstation_id += d
	} else {
		m.addstation_id = &d
	}
}

// AddedStationID returns the value that was added to the "station_id" field in this mutation.
func (m *EquipmentMutation) AddedStationID() (r datasource.UUID, exists bool) {
	v := m.addstation_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStationID resets all changes to the "station_id" field.
func (m *EquipmentMutation) ResetStationID() {
	m.station_id = nil
	m.addstation_id = nil
}

// SetEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by id.
func (m *EquipmentMutation) SetEquipmentInfoID(id datasource.UUID) {
	m.equipment_info = &id
}

// ClearEquipmentInfo clears the "equipment_info" edge to the EquipmentInfo entity.
func (m *EquipmentMutation) ClearEquipmentInfo() {
	m.clearedequipment_info = true
}

// EquipmentInfoCleared reports if the "equipment_info" edge to the EquipmentInfo entity was cleared.
func (m *EquipmentMutation) EquipmentInfoCleared() bool {
	return m.clearedequipment_info
}

// EquipmentInfoID returns the "equipment_info" edge ID in the mutation.
func (m *EquipmentMutation) EquipmentInfoID() (id datasource.UUID, exists bool) {
	if m.equipment_info != nil {
		return *m.equipment_info, true
	}
	return
}

// EquipmentInfoIDs returns the "equipment_info" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentInfoID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) EquipmentInfoIDs() (ids []datasource.UUID) {
	if id := m.equipment_info; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipmentInfo resets all changes to the "equipment_info" edge.
func (m *EquipmentMutation) ResetEquipmentInfo() {
	m.equipment_info = nil
	m.clearedequipment_info = false
}

// AddEvseIDs adds the "evses" edge to the Evse entity by ids.
func (m *EquipmentMutation) AddEvseIDs(ids ...datasource.UUID) {
	if m.evses == nil {
		m.evses = make(map[datasource.UUID]struct{})
	}
	for i := range ids {
		m.evses[ids[i]] = struct{}{}
	}
}

// ClearEvses clears the "evses" edge to the Evse entity.
func (m *EquipmentMutation) ClearEvses() {
	m.clearedevses = true
}

// EvsesCleared reports if the "evses" edge to the Evse entity was cleared.
func (m *EquipmentMutation) EvsesCleared() bool {
	return m.clearedevses
}

// RemoveEvseIDs removes the "evses" edge to the Evse entity by IDs.
func (m *EquipmentMutation) RemoveEvseIDs(ids ...datasource.UUID) {
	if m.removedevses == nil {
		m.removedevses = make(map[datasource.UUID]struct{})
	}
	for i := range ids {
		delete(m.evses, ids[i])
		m.removedevses[ids[i]] = struct{}{}
	}
}

// RemovedEvses returns the removed IDs of the "evses" edge to the Evse entity.
func (m *EquipmentMutation) RemovedEvsesIDs() (ids []datasource.UUID) {
	for id := range m.removedevses {
		ids = append(ids, id)
	}
	return
}

// EvsesIDs returns the "evses" edge IDs in the mutation.
func (m *EquipmentMutation) EvsesIDs() (ids []datasource.UUID) {
	for id := range m.evses {
		ids = append(ids, id)
	}
	return
}

// ResetEvses resets all changes to the "evses" edge.
func (m *EquipmentMutation) ResetEvses() {
	m.evses = nil
	m.clearedevses = false
	m.removedevses = nil
}

// AddConnectorIDs adds the "connectors" edge to the Connector entity by ids.
func (m *EquipmentMutation) AddConnectorIDs(ids ...datasource.UUID) {
	if m.connectors == nil {
		m.connectors = make(map[datasource.UUID]struct{})
	}
	for i := range ids {
		m.connectors[ids[i]] = struct{}{}
	}
}

// ClearConnectors clears the "connectors" edge to the Connector entity.
func (m *EquipmentMutation) ClearConnectors() {
	m.clearedconnectors = true
}

// ConnectorsCleared reports if the "connectors" edge to the Connector entity was cleared.
func (m *EquipmentMutation) ConnectorsCleared() bool {
	return m.clearedconnectors
}

// RemoveConnectorIDs removes the "connectors" edge to the Connector entity by IDs.
func (m *EquipmentMutation) RemoveConnectorIDs(ids ...datasource.UUID) {
	if m.removedconnectors == nil {
		m.removedconnectors = make(map[datasource.UUID]struct{})
	}
	for i := range ids {
		delete(m.connectors, ids[i])
		m.removedconnectors[ids[i]] = struct{}{}
	}
}

// RemovedConnectors returns the removed IDs of the "connectors" edge to the Connector entity.
func (m *EquipmentMutation) RemovedConnectorsIDs() (ids []datasource.UUID) {
	for id := range m.removedconnectors {
		ids = append(ids, id)
	}
	return
}

// ConnectorsIDs returns the "connectors" edge IDs in the mutation.
func (m *EquipmentMutation) ConnectorsIDs() (ids []datasource.UUID) {
	for id := range m.connectors {
		ids = append(ids, id)
	}
	return
}

// ResetConnectors resets all changes to the "connectors" edge.
func (m *EquipmentMutation) ResetConnectors() {
	m.connectors = nil
	m.clearedconnectors = false
	m.removedconnectors = nil
}

// Where appends a list predicates to the EquipmentMutation builder.
func (m *EquipmentMutation) Where(ps ...predicate.Equipment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EquipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Equipment).
func (m *EquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EquipmentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.sn != nil {
		fields = append(fields, equipment.FieldSn)
	}
	if m.category != nil {
		fields = append(fields, equipment.FieldCategory)
	}
	if m.operator_id != nil {
		fields = append(fields, equipment.FieldOperatorID)
	}
	if m.station_id != nil {
		fields = append(fields, equipment.FieldStationID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldSn:
		return m.Sn()
	case equipment.FieldCategory:
		return m.Category()
	case equipment.FieldOperatorID:
		return m.OperatorID()
	case equipment.FieldStationID:
		return m.StationID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipment.FieldSn:
		return m.OldSn(ctx)
	case equipment.FieldCategory:
		return m.OldCategory(ctx)
	case equipment.FieldOperatorID:
		return m.OldOperatorID(ctx)
	case equipment.FieldStationID:
		return m.OldStationID(ctx)
	}
	return nil, fmt.Errorf("unknown Equipment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case equipment.FieldCategory:
		v, ok := value.(enums.EquipmentCategory)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case equipment.FieldOperatorID:
		v, ok := value.(datasource.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperatorID(v)
		return nil
	case equipment.FieldStationID:
		v, ok := value.(datasource.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStationID(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EquipmentMutation) AddedFields() []string {
	var fields []string
	if m.addoperator_id != nil {
		fields = append(fields, equipment.FieldOperatorID)
	}
	if m.addstation_id != nil {
		fields = append(fields, equipment.FieldStationID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EquipmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldOperatorID:
		return m.AddedOperatorID()
	case equipment.FieldStationID:
		return m.AddedStationID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldOperatorID:
		v, ok := value.(datasource.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOperatorID(v)
		return nil
	case equipment.FieldStationID:
		v, ok := value.(datasource.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStationID(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EquipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Equipment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EquipmentMutation) ResetField(name string) error {
	switch name {
	case equipment.FieldSn:
		m.ResetSn()
		return nil
	case equipment.FieldCategory:
		m.ResetCategory()
		return nil
	case equipment.FieldOperatorID:
		m.ResetOperatorID()
		return nil
	case equipment.FieldStationID:
		m.ResetStationID()
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.equipment_info != nil {
		edges = append(edges, equipment.EdgeEquipmentInfo)
	}
	if m.evses != nil {
		edges = append(edges, equipment.EdgeEvses)
	}
	if m.connectors != nil {
		edges = append(edges, equipment.EdgeConnectors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeEquipmentInfo:
		if id := m.equipment_info; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeEvses:
		ids := make([]ent.Value, 0, len(m.evses))
		for id := range m.evses {
			ids = append(ids, id)
		}
		return ids
	case equipment.EdgeConnectors:
		ids := make([]ent.Value, 0, len(m.connectors))
		for id := range m.connectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedevses != nil {
		edges = append(edges, equipment.EdgeEvses)
	}
	if m.removedconnectors != nil {
		edges = append(edges, equipment.EdgeConnectors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EquipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeEvses:
		ids := make([]ent.Value, 0, len(m.removedevses))
		for id := range m.removedevses {
			ids = append(ids, id)
		}
		return ids
	case equipment.EdgeConnectors:
		ids := make([]ent.Value, 0, len(m.removedconnectors))
		for id := range m.removedconnectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedequipment_info {
		edges = append(edges, equipment.EdgeEquipmentInfo)
	}
	if m.clearedevses {
		edges = append(edges, equipment.EdgeEvses)
	}
	if m.clearedconnectors {
		edges = append(edges, equipment.EdgeConnectors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	case equipment.EdgeEquipmentInfo:
		return m.clearedequipment_info
	case equipment.EdgeEvses:
		return m.clearedevses
	case equipment.EdgeConnectors:
		return m.clearedconnectors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EquipmentMutation) ClearEdge(name string) error {
	switch name {
	case equipment.EdgeEquipmentInfo:
		m.ClearEquipmentInfo()
		return nil
	}
	return fmt.Errorf("unknown Equipment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EquipmentMutation) ResetEdge(name string) error {
	switch name {
	case equipment.EdgeEquipmentInfo:
		m.ResetEquipmentInfo()
		return nil
	case equipment.EdgeEvses:
		m.ResetEvses()
		return nil
	case equipment.EdgeConnectors:
		m.ResetConnectors()
		return nil
	}
	return fmt.Errorf("unknown Equipment edge %s", name)
}

// EquipmentInfoMutation represents an operation that mutates the EquipmentInfo nodes in the graph.
type EquipmentInfoMutation struct {
	config
	op               Op
	typ              string
	id               *datasource.UUID
	equipment_sn     *string
	access_pod       *string
	state            *bool
	clearedFields    map[string]struct{}
	equipment        *datasource.UUID
	clearedequipment bool
	done             bool
	oldValue         func(context.Context) (*EquipmentInfo, error)
	predicates       []predicate.EquipmentInfo
}

var _ ent.Mutation = (*EquipmentInfoMutation)(nil)

// equipmentinfoOption allows management of the mutation configuration using functional options.
type equipmentinfoOption func(*EquipmentInfoMutation)

// newEquipmentInfoMutation creates new mutation for the EquipmentInfo entity.
func newEquipmentInfoMutation(c config, op Op, opts ...equipmentinfoOption) *EquipmentInfoMutation {
	m := &EquipmentInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipmentInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentInfoID sets the ID field of the mutation.
func withEquipmentInfoID(id datasource.UUID) equipmentinfoOption {
	return func(m *EquipmentInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *EquipmentInfo
		)
		m.oldValue = func(ctx context.Context) (*EquipmentInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EquipmentInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipmentInfo sets the old EquipmentInfo of the mutation.
func withEquipmentInfo(node *EquipmentInfo) equipmentinfoOption {
	return func(m *EquipmentInfoMutation) {
		m.oldValue = func(context.Context) (*EquipmentInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EquipmentInfo entities.
func (m *EquipmentInfoMutation) SetID(id datasource.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EquipmentInfoMutation) ID() (id datasource.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EquipmentInfoMutation) IDs(ctx context.Context) ([]datasource.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []datasource.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EquipmentInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEquipmentSn sets the "equipment_sn" field.
func (m *EquipmentInfoMutation) SetEquipmentSn(s string) {
	m.equipment_sn = &s
}

// EquipmentSn returns the value of the "equipment_sn" field in the mutation.
func (m *EquipmentInfoMutation) EquipmentSn() (r string, exists bool) {
	v := m.equipment_sn
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentSn returns the old "equipment_sn" field's value of the EquipmentInfo entity.
// If the EquipmentInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentInfoMutation) OldEquipmentSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEquipmentSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEquipmentSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentSn: %w", err)
	}
	return oldValue.EquipmentSn, nil
}

// ResetEquipmentSn resets all changes to the "equipment_sn" field.
func (m *EquipmentInfoMutation) ResetEquipmentSn() {
	m.equipment_sn = nil
}

// SetAccessPod sets the "access_pod" field.
func (m *EquipmentInfoMutation) SetAccessPod(s string) {
	m.access_pod = &s
}

// AccessPod returns the value of the "access_pod" field in the mutation.
func (m *EquipmentInfoMutation) AccessPod() (r string, exists bool) {
	v := m.access_pod
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessPod returns the old "access_pod" field's value of the EquipmentInfo entity.
// If the EquipmentInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentInfoMutation) OldAccessPod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessPod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessPod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessPod: %w", err)
	}
	return oldValue.AccessPod, nil
}

// ResetAccessPod resets all changes to the "access_pod" field.
func (m *EquipmentInfoMutation) ResetAccessPod() {
	m.access_pod = nil
}

// SetState sets the "state" field.
func (m *EquipmentInfoMutation) SetState(b bool) {
	m.state = &b
}

// State returns the value of the "state" field in the mutation.
func (m *EquipmentInfoMutation) State() (r bool, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the EquipmentInfo entity.
// If the EquipmentInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentInfoMutation) OldState(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *EquipmentInfoMutation) ResetState() {
	m.state = nil
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by id.
func (m *EquipmentInfoMutation) SetEquipmentID(id datasource.UUID) {
	m.equipment = &id
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *EquipmentInfoMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *EquipmentInfoMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentID returns the "equipment" edge ID in the mutation.
func (m *EquipmentInfoMutation) EquipmentID() (id datasource.UUID, exists bool) {
	if m.equipment != nil {
		return *m.equipment, true
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *EquipmentInfoMutation) EquipmentIDs() (ids []datasource.UUID) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *EquipmentInfoMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// Where appends a list predicates to the EquipmentInfoMutation builder.
func (m *EquipmentInfoMutation) Where(ps ...predicate.EquipmentInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EquipmentInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EquipmentInfo).
func (m *EquipmentInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EquipmentInfoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.equipment_sn != nil {
		fields = append(fields, equipmentinfo.FieldEquipmentSn)
	}
	if m.access_pod != nil {
		fields = append(fields, equipmentinfo.FieldAccessPod)
	}
	if m.state != nil {
		fields = append(fields, equipmentinfo.FieldState)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EquipmentInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipmentinfo.FieldEquipmentSn:
		return m.EquipmentSn()
	case equipmentinfo.FieldAccessPod:
		return m.AccessPod()
	case equipmentinfo.FieldState:
		return m.State()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EquipmentInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipmentinfo.FieldEquipmentSn:
		return m.OldEquipmentSn(ctx)
	case equipmentinfo.FieldAccessPod:
		return m.OldAccessPod(ctx)
	case equipmentinfo.FieldState:
		return m.OldState(ctx)
	}
	return nil, fmt.Errorf("unknown EquipmentInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipmentinfo.FieldEquipmentSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentSn(v)
		return nil
	case equipmentinfo.FieldAccessPod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessPod(v)
		return nil
	case equipmentinfo.FieldState:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	}
	return fmt.Errorf("unknown EquipmentInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EquipmentInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EquipmentInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EquipmentInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EquipmentInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EquipmentInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EquipmentInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EquipmentInfoMutation) ResetField(name string) error {
	switch name {
	case equipmentinfo.FieldEquipmentSn:
		m.ResetEquipmentSn()
		return nil
	case equipmentinfo.FieldAccessPod:
		m.ResetAccessPod()
		return nil
	case equipmentinfo.FieldState:
		m.ResetState()
		return nil
	}
	return fmt.Errorf("unknown EquipmentInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EquipmentInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.equipment != nil {
		edges = append(edges, equipmentinfo.EdgeEquipment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EquipmentInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipmentinfo.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EquipmentInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EquipmentInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EquipmentInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedequipment {
		edges = append(edges, equipmentinfo.EdgeEquipment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EquipmentInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case equipmentinfo.EdgeEquipment:
		return m.clearedequipment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EquipmentInfoMutation) ClearEdge(name string) error {
	switch name {
	case equipmentinfo.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown EquipmentInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EquipmentInfoMutation) ResetEdge(name string) error {
	switch name {
	case equipmentinfo.EdgeEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown EquipmentInfo edge %s", name)
}

// EvseMutation represents an operation that mutates the Evse nodes in the graph.
type EvseMutation struct {
	config
	op                  Op
	typ                 string
	id                  *datasource.UUID
	serial              *string
	connector_number    *int
	addconnector_number *int
	clearedFields       map[string]struct{}
	equipment           *datasource.UUID
	clearedequipment    bool
	connectors          map[datasource.UUID]struct{}
	removedconnectors   map[datasource.UUID]struct{}
	clearedconnectors   bool
	done                bool
	oldValue            func(context.Context) (*Evse, error)
	predicates          []predicate.Evse
}

var _ ent.Mutation = (*EvseMutation)(nil)

// evseOption allows management of the mutation configuration using functional options.
type evseOption func(*EvseMutation)

// newEvseMutation creates new mutation for the Evse entity.
func newEvseMutation(c config, op Op, opts ...evseOption) *EvseMutation {
	m := &EvseMutation{
		config:        c,
		op:            op,
		typ:           TypeEvse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEvseID sets the ID field of the mutation.
func withEvseID(id datasource.UUID) evseOption {
	return func(m *EvseMutation) {
		var (
			err   error
			once  sync.Once
			value *Evse
		)
		m.oldValue = func(ctx context.Context) (*Evse, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Evse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvse sets the old Evse of the mutation.
func withEvse(node *Evse) evseOption {
	return func(m *EvseMutation) {
		m.oldValue = func(context.Context) (*Evse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EvseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EvseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Evse entities.
func (m *EvseMutation) SetID(id datasource.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EvseMutation) ID() (id datasource.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EvseMutation) IDs(ctx context.Context) ([]datasource.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []datasource.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Evse.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSerial sets the "serial" field.
func (m *EvseMutation) SetSerial(s string) {
	m.serial = &s
}

// Serial returns the value of the "serial" field in the mutation.
func (m *EvseMutation) Serial() (r string, exists bool) {
	v := m.serial
	if v == nil {
		return
	}
	return *v, true
}

// OldSerial returns the old "serial" field's value of the Evse entity.
// If the Evse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvseMutation) OldSerial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerial: %w", err)
	}
	return oldValue.Serial, nil
}

// ResetSerial resets all changes to the "serial" field.
func (m *EvseMutation) ResetSerial() {
	m.serial = nil
}

// SetConnectorNumber sets the "connector_number" field.
func (m *EvseMutation) SetConnectorNumber(i int) {
	m.connector_number = &i
	m.addconnector_number = nil
}

// ConnectorNumber returns the value of the "connector_number" field in the mutation.
func (m *EvseMutation) ConnectorNumber() (r int, exists bool) {
	v := m.connector_number
	if v == nil {
		return
	}
	return *v, true
}

// OldConnectorNumber returns the old "connector_number" field's value of the Evse entity.
// If the Evse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvseMutation) OldConnectorNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConnectorNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConnectorNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConnectorNumber: %w", err)
	}
	return oldValue.ConnectorNumber, nil
}

// AddConnectorNumber adds i to the "connector_number" field.
func (m *EvseMutation) AddConnectorNumber(i int) {
	if m.addconnector_number != nil {
		*m.addconnector_number += i
	} else {
		m.addconnector_number = &i
	}
}

// AddedConnectorNumber returns the value that was added to the "connector_number" field in this mutation.
func (m *EvseMutation) AddedConnectorNumber() (r int, exists bool) {
	v := m.addconnector_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetConnectorNumber resets all changes to the "connector_number" field.
func (m *EvseMutation) ResetConnectorNumber() {
	m.connector_number = nil
	m.addconnector_number = nil
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by id.
func (m *EvseMutation) SetEquipmentID(id datasource.UUID) {
	m.equipment = &id
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *EvseMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *EvseMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentID returns the "equipment" edge ID in the mutation.
func (m *EvseMutation) EquipmentID() (id datasource.UUID, exists bool) {
	if m.equipment != nil {
		return *m.equipment, true
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *EvseMutation) EquipmentIDs() (ids []datasource.UUID) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *EvseMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// AddConnectorIDs adds the "connectors" edge to the Connector entity by ids.
func (m *EvseMutation) AddConnectorIDs(ids ...datasource.UUID) {
	if m.connectors == nil {
		m.connectors = make(map[datasource.UUID]struct{})
	}
	for i := range ids {
		m.connectors[ids[i]] = struct{}{}
	}
}

// ClearConnectors clears the "connectors" edge to the Connector entity.
func (m *EvseMutation) ClearConnectors() {
	m.clearedconnectors = true
}

// ConnectorsCleared reports if the "connectors" edge to the Connector entity was cleared.
func (m *EvseMutation) ConnectorsCleared() bool {
	return m.clearedconnectors
}

// RemoveConnectorIDs removes the "connectors" edge to the Connector entity by IDs.
func (m *EvseMutation) RemoveConnectorIDs(ids ...datasource.UUID) {
	if m.removedconnectors == nil {
		m.removedconnectors = make(map[datasource.UUID]struct{})
	}
	for i := range ids {
		delete(m.connectors, ids[i])
		m.removedconnectors[ids[i]] = struct{}{}
	}
}

// RemovedConnectors returns the removed IDs of the "connectors" edge to the Connector entity.
func (m *EvseMutation) RemovedConnectorsIDs() (ids []datasource.UUID) {
	for id := range m.removedconnectors {
		ids = append(ids, id)
	}
	return
}

// ConnectorsIDs returns the "connectors" edge IDs in the mutation.
func (m *EvseMutation) ConnectorsIDs() (ids []datasource.UUID) {
	for id := range m.connectors {
		ids = append(ids, id)
	}
	return
}

// ResetConnectors resets all changes to the "connectors" edge.
func (m *EvseMutation) ResetConnectors() {
	m.connectors = nil
	m.clearedconnectors = false
	m.removedconnectors = nil
}

// Where appends a list predicates to the EvseMutation builder.
func (m *EvseMutation) Where(ps ...predicate.Evse) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EvseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Evse).
func (m *EvseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EvseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.serial != nil {
		fields = append(fields, evse.FieldSerial)
	}
	if m.connector_number != nil {
		fields = append(fields, evse.FieldConnectorNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EvseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case evse.FieldSerial:
		return m.Serial()
	case evse.FieldConnectorNumber:
		return m.ConnectorNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EvseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case evse.FieldSerial:
		return m.OldSerial(ctx)
	case evse.FieldConnectorNumber:
		return m.OldConnectorNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Evse field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EvseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case evse.FieldSerial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerial(v)
		return nil
	case evse.FieldConnectorNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConnectorNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Evse field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EvseMutation) AddedFields() []string {
	var fields []string
	if m.addconnector_number != nil {
		fields = append(fields, evse.FieldConnectorNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EvseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case evse.FieldConnectorNumber:
		return m.AddedConnectorNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EvseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case evse.FieldConnectorNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConnectorNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Evse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EvseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EvseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EvseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Evse nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EvseMutation) ResetField(name string) error {
	switch name {
	case evse.FieldSerial:
		m.ResetSerial()
		return nil
	case evse.FieldConnectorNumber:
		m.ResetConnectorNumber()
		return nil
	}
	return fmt.Errorf("unknown Evse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EvseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.equipment != nil {
		edges = append(edges, evse.EdgeEquipment)
	}
	if m.connectors != nil {
		edges = append(edges, evse.EdgeConnectors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EvseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case evse.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	case evse.EdgeConnectors:
		ids := make([]ent.Value, 0, len(m.connectors))
		for id := range m.connectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EvseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedconnectors != nil {
		edges = append(edges, evse.EdgeConnectors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EvseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case evse.EdgeConnectors:
		ids := make([]ent.Value, 0, len(m.removedconnectors))
		for id := range m.removedconnectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EvseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedequipment {
		edges = append(edges, evse.EdgeEquipment)
	}
	if m.clearedconnectors {
		edges = append(edges, evse.EdgeConnectors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EvseMutation) EdgeCleared(name string) bool {
	switch name {
	case evse.EdgeEquipment:
		return m.clearedequipment
	case evse.EdgeConnectors:
		return m.clearedconnectors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EvseMutation) ClearEdge(name string) error {
	switch name {
	case evse.EdgeEquipment:
		m.ClearEquipment()
		return nil
	}
	return fmt.Errorf("unknown Evse unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EvseMutation) ResetEdge(name string) error {
	switch name {
	case evse.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case evse.EdgeConnectors:
		m.ResetConnectors()
		return nil
	}
	return fmt.Errorf("unknown Evse edge %s", name)
}
