// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/cwmodel/ent/appmoduleinfo"
)

// AppModuleInfoCreate is the builder for creating a AppModuleInfo entity.
type AppModuleInfoCreate struct {
	config
	mutation *AppModuleInfoMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (amic *AppModuleInfoCreate) SetName(s string) *AppModuleInfoCreate {
	amic.mutation.SetName(s)
	return amic
}

// SetDesc sets the "desc" field.
func (amic *AppModuleInfoCreate) SetDesc(s string) *AppModuleInfoCreate {
	amic.mutation.SetDesc(s)
	return amic
}

// Mutation returns the AppModuleInfoMutation object of the builder.
func (amic *AppModuleInfoCreate) Mutation() *AppModuleInfoMutation {
	return amic.mutation
}

// Save creates the AppModuleInfo in the database.
func (amic *AppModuleInfoCreate) Save(ctx context.Context) (*AppModuleInfo, error) {
	var (
		err  error
		node *AppModuleInfo
	)
	if len(amic.hooks) == 0 {
		if err = amic.check(); err != nil {
			return nil, err
		}
		node, err = amic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppModuleInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amic.check(); err != nil {
				return nil, err
			}
			amic.mutation = mutation
			if node, err = amic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(amic.hooks) - 1; i >= 0; i-- {
			if amic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = amic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, amic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppModuleInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppModuleInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amic *AppModuleInfoCreate) SaveX(ctx context.Context) *AppModuleInfo {
	v, err := amic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amic *AppModuleInfoCreate) Exec(ctx context.Context) error {
	_, err := amic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amic *AppModuleInfoCreate) ExecX(ctx context.Context) {
	if err := amic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amic *AppModuleInfoCreate) check() error {
	if _, ok := amic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AppModuleInfo.name"`)}
	}
	if _, ok := amic.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "AppModuleInfo.desc"`)}
	}
	return nil
}

func (amic *AppModuleInfoCreate) sqlSave(ctx context.Context) (*AppModuleInfo, error) {
	_node, _spec := amic.createSpec()
	if err := sqlgraph.CreateNode(ctx, amic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (amic *AppModuleInfoCreate) createSpec() (*AppModuleInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &AppModuleInfo{config: amic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appmoduleinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appmoduleinfo.FieldID,
			},
		}
	)
	if value, ok := amic.mutation.Name(); ok {
		_spec.SetField(appmoduleinfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := amic.mutation.Desc(); ok {
		_spec.SetField(appmoduleinfo.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	return _node, _spec
}

// AppModuleInfoCreateBulk is the builder for creating many AppModuleInfo entities in bulk.
type AppModuleInfoCreateBulk struct {
	config
	builders []*AppModuleInfoCreate
}

// Save creates the AppModuleInfo entities in the database.
func (amicb *AppModuleInfoCreateBulk) Save(ctx context.Context) ([]*AppModuleInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amicb.builders))
	nodes := make([]*AppModuleInfo, len(amicb.builders))
	mutators := make([]Mutator, len(amicb.builders))
	for i := range amicb.builders {
		func(i int, root context.Context) {
			builder := amicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppModuleInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amicb *AppModuleInfoCreateBulk) SaveX(ctx context.Context) []*AppModuleInfo {
	v, err := amicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amicb *AppModuleInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := amicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amicb *AppModuleInfoCreateBulk) ExecX(ctx context.Context) {
	if err := amicb.Exec(ctx); err != nil {
		panic(err)
	}
}
