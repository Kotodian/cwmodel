// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentfirmwareeffect"
	"github.com/Kotodian/ent-practice/ent/firmware"
)

// EquipmentFirmwareEffectCreate is the builder for creating a EquipmentFirmwareEffect entity.
type EquipmentFirmwareEffectCreate struct {
	config
	mutation *EquipmentFirmwareEffectMutation
	hooks    []Hook
}

// SetRequestID sets the "request_id" field.
func (efec *EquipmentFirmwareEffectCreate) SetRequestID(i int64) *EquipmentFirmwareEffectCreate {
	efec.mutation.SetRequestID(i)
	return efec
}

// SetState sets the "state" field.
func (efec *EquipmentFirmwareEffectCreate) SetState(i int) *EquipmentFirmwareEffectCreate {
	efec.mutation.SetState(i)
	return efec
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (efec *EquipmentFirmwareEffectCreate) SetEquipmentID(id int) *EquipmentFirmwareEffectCreate {
	efec.mutation.SetEquipmentID(id)
	return efec
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (efec *EquipmentFirmwareEffectCreate) SetNillableEquipmentID(id *int) *EquipmentFirmwareEffectCreate {
	if id != nil {
		efec = efec.SetEquipmentID(*id)
	}
	return efec
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (efec *EquipmentFirmwareEffectCreate) SetEquipment(e *Equipment) *EquipmentFirmwareEffectCreate {
	return efec.SetEquipmentID(e.ID)
}

// SetFirmwareID sets the "firmware" edge to the Firmware entity by ID.
func (efec *EquipmentFirmwareEffectCreate) SetFirmwareID(id int) *EquipmentFirmwareEffectCreate {
	efec.mutation.SetFirmwareID(id)
	return efec
}

// SetNillableFirmwareID sets the "firmware" edge to the Firmware entity by ID if the given value is not nil.
func (efec *EquipmentFirmwareEffectCreate) SetNillableFirmwareID(id *int) *EquipmentFirmwareEffectCreate {
	if id != nil {
		efec = efec.SetFirmwareID(*id)
	}
	return efec
}

// SetFirmware sets the "firmware" edge to the Firmware entity.
func (efec *EquipmentFirmwareEffectCreate) SetFirmware(f *Firmware) *EquipmentFirmwareEffectCreate {
	return efec.SetFirmwareID(f.ID)
}

// Mutation returns the EquipmentFirmwareEffectMutation object of the builder.
func (efec *EquipmentFirmwareEffectCreate) Mutation() *EquipmentFirmwareEffectMutation {
	return efec.mutation
}

// Save creates the EquipmentFirmwareEffect in the database.
func (efec *EquipmentFirmwareEffectCreate) Save(ctx context.Context) (*EquipmentFirmwareEffect, error) {
	var (
		err  error
		node *EquipmentFirmwareEffect
	)
	if len(efec.hooks) == 0 {
		if err = efec.check(); err != nil {
			return nil, err
		}
		node, err = efec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentFirmwareEffectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = efec.check(); err != nil {
				return nil, err
			}
			efec.mutation = mutation
			if node, err = efec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(efec.hooks) - 1; i >= 0; i-- {
			if efec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = efec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, efec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (efec *EquipmentFirmwareEffectCreate) SaveX(ctx context.Context) *EquipmentFirmwareEffect {
	v, err := efec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (efec *EquipmentFirmwareEffectCreate) Exec(ctx context.Context) error {
	_, err := efec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efec *EquipmentFirmwareEffectCreate) ExecX(ctx context.Context) {
	if err := efec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efec *EquipmentFirmwareEffectCreate) check() error {
	if _, ok := efec.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "EquipmentFirmwareEffect.request_id"`)}
	}
	if _, ok := efec.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "EquipmentFirmwareEffect.state"`)}
	}
	return nil
}

func (efec *EquipmentFirmwareEffectCreate) sqlSave(ctx context.Context) (*EquipmentFirmwareEffect, error) {
	_node, _spec := efec.createSpec()
	if err := sqlgraph.CreateNode(ctx, efec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (efec *EquipmentFirmwareEffectCreate) createSpec() (*EquipmentFirmwareEffect, *sqlgraph.CreateSpec) {
	var (
		_node = &EquipmentFirmwareEffect{config: efec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: equipmentfirmwareeffect.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipmentfirmwareeffect.FieldID,
			},
		}
	)
	if value, ok := efec.mutation.RequestID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipmentfirmwareeffect.FieldRequestID,
		})
		_node.RequestID = value
	}
	if value, ok := efec.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: equipmentfirmwareeffect.FieldState,
		})
		_node.State = value
	}
	if nodes := efec.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentfirmwareeffect.EquipmentTable,
			Columns: []string{equipmentfirmwareeffect.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.equipment_equipment_firmware_effect = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := efec.mutation.FirmwareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentfirmwareeffect.FirmwareTable,
			Columns: []string{equipmentfirmwareeffect.FirmwareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: firmware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.firmware_equipment_firmware_effect = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EquipmentFirmwareEffectCreateBulk is the builder for creating many EquipmentFirmwareEffect entities in bulk.
type EquipmentFirmwareEffectCreateBulk struct {
	config
	builders []*EquipmentFirmwareEffectCreate
}

// Save creates the EquipmentFirmwareEffect entities in the database.
func (efecb *EquipmentFirmwareEffectCreateBulk) Save(ctx context.Context) ([]*EquipmentFirmwareEffect, error) {
	specs := make([]*sqlgraph.CreateSpec, len(efecb.builders))
	nodes := make([]*EquipmentFirmwareEffect, len(efecb.builders))
	mutators := make([]Mutator, len(efecb.builders))
	for i := range efecb.builders {
		func(i int, root context.Context) {
			builder := efecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EquipmentFirmwareEffectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, efecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, efecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, efecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (efecb *EquipmentFirmwareEffectCreateBulk) SaveX(ctx context.Context) []*EquipmentFirmwareEffect {
	v, err := efecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (efecb *EquipmentFirmwareEffectCreateBulk) Exec(ctx context.Context) error {
	_, err := efecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efecb *EquipmentFirmwareEffectCreateBulk) ExecX(ctx context.Context) {
	if err := efecb.Exec(ctx); err != nil {
		panic(err)
	}
}
