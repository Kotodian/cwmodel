// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/smartchargingevent"
	"github.com/Kotodian/ent-practice/ent/types"
	"github.com/Kotodian/gokit/datasource"
)

// SmartChargingEventCreate is the builder for creating a SmartChargingEvent entity.
type SmartChargingEventCreate struct {
	config
	mutation *SmartChargingEventMutation
	hooks    []Hook
}

// SetSmartID sets the "smart_id" field.
func (scec *SmartChargingEventCreate) SetSmartID(d datasource.UUID) *SmartChargingEventCreate {
	scec.mutation.SetSmartID(d)
	return scec
}

// SetEquipmentID sets the "equipment_id" field.
func (scec *SmartChargingEventCreate) SetEquipmentID(d datasource.UUID) *SmartChargingEventCreate {
	scec.mutation.SetEquipmentID(d)
	return scec
}

// SetConnectorID sets the "connector_id" field.
func (scec *SmartChargingEventCreate) SetConnectorID(d datasource.UUID) *SmartChargingEventCreate {
	scec.mutation.SetConnectorID(d)
	return scec
}

// SetOrderID sets the "order_id" field.
func (scec *SmartChargingEventCreate) SetOrderID(d datasource.UUID) *SmartChargingEventCreate {
	scec.mutation.SetOrderID(d)
	return scec
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (scec *SmartChargingEventCreate) SetNillableOrderID(d *datasource.UUID) *SmartChargingEventCreate {
	if d != nil {
		scec.SetOrderID(*d)
	}
	return scec
}

// SetUnit sets the "unit" field.
func (scec *SmartChargingEventCreate) SetUnit(s string) *SmartChargingEventCreate {
	scec.mutation.SetUnit(s)
	return scec
}

// SetValidFrom sets the "valid_from" field.
func (scec *SmartChargingEventCreate) SetValidFrom(i int64) *SmartChargingEventCreate {
	scec.mutation.SetValidFrom(i)
	return scec
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (scec *SmartChargingEventCreate) SetNillableValidFrom(i *int64) *SmartChargingEventCreate {
	if i != nil {
		scec.SetValidFrom(*i)
	}
	return scec
}

// SetValidTo sets the "valid_to" field.
func (scec *SmartChargingEventCreate) SetValidTo(i int64) *SmartChargingEventCreate {
	scec.mutation.SetValidTo(i)
	return scec
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (scec *SmartChargingEventCreate) SetNillableValidTo(i *int64) *SmartChargingEventCreate {
	if i != nil {
		scec.SetValidTo(*i)
	}
	return scec
}

// SetSpec sets the "spec" field.
func (scec *SmartChargingEventCreate) SetSpec(tsp []types.ChargingSchedulePeriod) *SmartChargingEventCreate {
	scec.mutation.SetSpec(tsp)
	return scec
}

// Mutation returns the SmartChargingEventMutation object of the builder.
func (scec *SmartChargingEventCreate) Mutation() *SmartChargingEventMutation {
	return scec.mutation
}

// Save creates the SmartChargingEvent in the database.
func (scec *SmartChargingEventCreate) Save(ctx context.Context) (*SmartChargingEvent, error) {
	var (
		err  error
		node *SmartChargingEvent
	)
	if len(scec.hooks) == 0 {
		if err = scec.check(); err != nil {
			return nil, err
		}
		node, err = scec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SmartChargingEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scec.check(); err != nil {
				return nil, err
			}
			scec.mutation = mutation
			if node, err = scec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(scec.hooks) - 1; i >= 0; i-- {
			if scec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scec *SmartChargingEventCreate) SaveX(ctx context.Context) *SmartChargingEvent {
	v, err := scec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scec *SmartChargingEventCreate) Exec(ctx context.Context) error {
	_, err := scec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scec *SmartChargingEventCreate) ExecX(ctx context.Context) {
	if err := scec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scec *SmartChargingEventCreate) check() error {
	if _, ok := scec.mutation.SmartID(); !ok {
		return &ValidationError{Name: "smart_id", err: errors.New(`ent: missing required field "SmartChargingEvent.smart_id"`)}
	}
	if _, ok := scec.mutation.EquipmentID(); !ok {
		return &ValidationError{Name: "equipment_id", err: errors.New(`ent: missing required field "SmartChargingEvent.equipment_id"`)}
	}
	if _, ok := scec.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector_id", err: errors.New(`ent: missing required field "SmartChargingEvent.connector_id"`)}
	}
	if _, ok := scec.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "SmartChargingEvent.unit"`)}
	}
	if _, ok := scec.mutation.Spec(); !ok {
		return &ValidationError{Name: "spec", err: errors.New(`ent: missing required field "SmartChargingEvent.spec"`)}
	}
	return nil
}

func (scec *SmartChargingEventCreate) sqlSave(ctx context.Context) (*SmartChargingEvent, error) {
	_node, _spec := scec.createSpec()
	if err := sqlgraph.CreateNode(ctx, scec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (scec *SmartChargingEventCreate) createSpec() (*SmartChargingEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &SmartChargingEvent{config: scec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: smartchargingevent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: smartchargingevent.FieldID,
			},
		}
	)
	if value, ok := scec.mutation.SmartID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smartchargingevent.FieldSmartID,
		})
		_node.SmartID = value
	}
	if value, ok := scec.mutation.EquipmentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smartchargingevent.FieldEquipmentID,
		})
		_node.EquipmentID = value
	}
	if value, ok := scec.mutation.ConnectorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smartchargingevent.FieldConnectorID,
		})
		_node.ConnectorID = value
	}
	if value, ok := scec.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: smartchargingevent.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := scec.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smartchargingevent.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := scec.mutation.ValidFrom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smartchargingevent.FieldValidFrom,
		})
		_node.ValidFrom = value
	}
	if value, ok := scec.mutation.ValidTo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: smartchargingevent.FieldValidTo,
		})
		_node.ValidTo = value
	}
	if value, ok := scec.mutation.Spec(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: smartchargingevent.FieldSpec,
		})
		_node.Spec = value
	}
	return _node, _spec
}

// SmartChargingEventCreateBulk is the builder for creating many SmartChargingEvent entities in bulk.
type SmartChargingEventCreateBulk struct {
	config
	builders []*SmartChargingEventCreate
}

// Save creates the SmartChargingEvent entities in the database.
func (scecb *SmartChargingEventCreateBulk) Save(ctx context.Context) ([]*SmartChargingEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scecb.builders))
	nodes := make([]*SmartChargingEvent, len(scecb.builders))
	mutators := make([]Mutator, len(scecb.builders))
	for i := range scecb.builders {
		func(i int, root context.Context) {
			builder := scecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SmartChargingEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scecb *SmartChargingEventCreateBulk) SaveX(ctx context.Context) []*SmartChargingEvent {
	v, err := scecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scecb *SmartChargingEventCreateBulk) Exec(ctx context.Context) error {
	_, err := scecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scecb *SmartChargingEventCreateBulk) ExecX(ctx context.Context) {
	if err := scecb.Exec(ctx); err != nil {
		panic(err)
	}
}
