// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/connector"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/reservation"
)

// ReservationCreate is the builder for creating a Reservation entity.
type ReservationCreate struct {
	config
	mutation *ReservationMutation
	hooks    []Hook
}

// SetReservationID sets the "reservation_id" field.
func (rc *ReservationCreate) SetReservationID(i int64) *ReservationCreate {
	rc.mutation.SetReservationID(i)
	return rc
}

// SetAuthorizationMode sets the "authorization_mode" field.
func (rc *ReservationCreate) SetAuthorizationMode(i int) *ReservationCreate {
	rc.mutation.SetAuthorizationMode(i)
	return rc
}

// SetAuthorizationID sets the "authorization_id" field.
func (rc *ReservationCreate) SetAuthorizationID(s string) *ReservationCreate {
	rc.mutation.SetAuthorizationID(s)
	return rc
}

// SetAdditional sets the "additional" field.
func (rc *ReservationCreate) SetAdditional(s string) *ReservationCreate {
	rc.mutation.SetAdditional(s)
	return rc
}

// SetNillableAdditional sets the "additional" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableAdditional(s *string) *ReservationCreate {
	if s != nil {
		rc.SetAdditional(*s)
	}
	return rc
}

// SetCustomerID sets the "customer_id" field.
func (rc *ReservationCreate) SetCustomerID(s string) *ReservationCreate {
	rc.mutation.SetCustomerID(s)
	return rc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableCustomerID(s *string) *ReservationCreate {
	if s != nil {
		rc.SetCustomerID(*s)
	}
	return rc
}

// SetExpired sets the "expired" field.
func (rc *ReservationCreate) SetExpired(i int64) *ReservationCreate {
	rc.mutation.SetExpired(i)
	return rc
}

// SetState sets the "state" field.
func (rc *ReservationCreate) SetState(i int) *ReservationCreate {
	rc.mutation.SetState(i)
	return rc
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (rc *ReservationCreate) SetEquipmentID(id int) *ReservationCreate {
	rc.mutation.SetEquipmentID(id)
	return rc
}

// SetNillableEquipmentID sets the "equipment" edge to the Equipment entity by ID if the given value is not nil.
func (rc *ReservationCreate) SetNillableEquipmentID(id *int) *ReservationCreate {
	if id != nil {
		rc = rc.SetEquipmentID(*id)
	}
	return rc
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (rc *ReservationCreate) SetEquipment(e *Equipment) *ReservationCreate {
	return rc.SetEquipmentID(e.ID)
}

// SetConnectorID sets the "connector" edge to the Connector entity by ID.
func (rc *ReservationCreate) SetConnectorID(id int) *ReservationCreate {
	rc.mutation.SetConnectorID(id)
	return rc
}

// SetNillableConnectorID sets the "connector" edge to the Connector entity by ID if the given value is not nil.
func (rc *ReservationCreate) SetNillableConnectorID(id *int) *ReservationCreate {
	if id != nil {
		rc = rc.SetConnectorID(*id)
	}
	return rc
}

// SetConnector sets the "connector" edge to the Connector entity.
func (rc *ReservationCreate) SetConnector(c *Connector) *ReservationCreate {
	return rc.SetConnectorID(c.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (rc *ReservationCreate) Mutation() *ReservationMutation {
	return rc.mutation
}

// Save creates the Reservation in the database.
func (rc *ReservationCreate) Save(ctx context.Context) (*Reservation, error) {
	var (
		err  error
		node *Reservation
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReservationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReservationCreate) SaveX(ctx context.Context) *Reservation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReservationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReservationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReservationCreate) check() error {
	if _, ok := rc.mutation.ReservationID(); !ok {
		return &ValidationError{Name: "reservation_id", err: errors.New(`ent: missing required field "Reservation.reservation_id"`)}
	}
	if _, ok := rc.mutation.AuthorizationMode(); !ok {
		return &ValidationError{Name: "authorization_mode", err: errors.New(`ent: missing required field "Reservation.authorization_mode"`)}
	}
	if _, ok := rc.mutation.AuthorizationID(); !ok {
		return &ValidationError{Name: "authorization_id", err: errors.New(`ent: missing required field "Reservation.authorization_id"`)}
	}
	if _, ok := rc.mutation.Expired(); !ok {
		return &ValidationError{Name: "expired", err: errors.New(`ent: missing required field "Reservation.expired"`)}
	}
	if _, ok := rc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Reservation.state"`)}
	}
	return nil
}

func (rc *ReservationCreate) sqlSave(ctx context.Context) (*Reservation, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *ReservationCreate) createSpec() (*Reservation, *sqlgraph.CreateSpec) {
	var (
		_node = &Reservation{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reservation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reservation.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.ReservationID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reservation.FieldReservationID,
		})
		_node.ReservationID = value
	}
	if value, ok := rc.mutation.AuthorizationMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reservation.FieldAuthorizationMode,
		})
		_node.AuthorizationMode = value
	}
	if value, ok := rc.mutation.AuthorizationID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reservation.FieldAuthorizationID,
		})
		_node.AuthorizationID = value
	}
	if value, ok := rc.mutation.Additional(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reservation.FieldAdditional,
		})
		_node.Additional = value
	}
	if value, ok := rc.mutation.CustomerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reservation.FieldCustomerID,
		})
		_node.CustomerID = value
	}
	if value, ok := rc.mutation.Expired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: reservation.FieldExpired,
		})
		_node.Expired = value
	}
	if value, ok := rc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reservation.FieldState,
		})
		_node.State = value
	}
	if nodes := rc.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.EquipmentTable,
			Columns: []string{reservation.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.equipment_reservation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.ConnectorTable,
			Columns: []string{reservation.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connector_reservation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReservationCreateBulk is the builder for creating many Reservation entities in bulk.
type ReservationCreateBulk struct {
	config
	builders []*ReservationCreate
}

// Save creates the Reservation entities in the database.
func (rcb *ReservationCreateBulk) Save(ctx context.Context) ([]*Reservation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reservation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReservationCreateBulk) SaveX(ctx context.Context) []*Reservation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReservationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
