// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/evse"
	"github.com/Kotodian/gokit/datasource"
)

// Evse is the model entity for the Evse schema.
type Evse struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID datasource.UUID `json:"id,omitempty"`
	// Serial holds the value of the "serial" field.
	// 设备序列号
	Serial string `json:"serial,omitempty"`
	// ConnectorNumber holds the value of the "connector_number" field.
	// 枪数量
	ConnectorNumber int `json:"connector_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EvseQuery when eager-loading is set.
	Edges           EvseEdges `json:"edges"`
	equipment_evses *datasource.UUID
}

// EvseEdges holds the relations/edges for other nodes in the graph.
type EvseEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// Connectors holds the value of the connectors edge.
	Connectors []*Connector `json:"connectors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EvseEdges) EquipmentOrErr() (*Equipment, error) {
	if e.loadedTypes[0] {
		if e.Equipment == nil {
			// The edge equipment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: equipment.Label}
		}
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// ConnectorsOrErr returns the Connectors value or an error if the edge
// was not loaded in eager-loading.
func (e EvseEdges) ConnectorsOrErr() ([]*Connector, error) {
	if e.loadedTypes[1] {
		return e.Connectors, nil
	}
	return nil, &NotLoadedError{edge: "connectors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Evse) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case evse.FieldID, evse.FieldConnectorNumber:
			values[i] = new(sql.NullInt64)
		case evse.FieldSerial:
			values[i] = new(sql.NullString)
		case evse.ForeignKeys[0]: // equipment_evses
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Evse", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Evse fields.
func (e *Evse) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case evse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = datasource.UUID(value.Int64)
		case evse.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				e.Serial = value.String
			}
		case evse.FieldConnectorNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field connector_number", values[i])
			} else if value.Valid {
				e.ConnectorNumber = int(value.Int64)
			}
		case evse.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field equipment_evses", value)
			} else if value.Valid {
				e.equipment_evses = new(datasource.UUID)
				*e.equipment_evses = datasource.UUID(value.Int64)
			}
		}
	}
	return nil
}

// QueryEquipment queries the "equipment" edge of the Evse entity.
func (e *Evse) QueryEquipment() *EquipmentQuery {
	return (&EvseClient{config: e.config}).QueryEquipment(e)
}

// QueryConnectors queries the "connectors" edge of the Evse entity.
func (e *Evse) QueryConnectors() *ConnectorQuery {
	return (&EvseClient{config: e.config}).QueryConnectors(e)
}

// Update returns a builder for updating this Evse.
// Note that you need to call Evse.Unwrap() before calling this method if this Evse
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Evse) Update() *EvseUpdateOne {
	return (&EvseClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Evse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Evse) Unwrap() *Evse {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Evse is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Evse) String() string {
	var builder strings.Builder
	builder.WriteString("Evse(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", serial=")
	builder.WriteString(e.Serial)
	builder.WriteString(", connector_number=")
	builder.WriteString(fmt.Sprintf("%v", e.ConnectorNumber))
	builder.WriteByte(')')
	return builder.String()
}

// Evses is a parsable slice of Evse.
type Evses []*Evse

func (e Evses) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
