// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/ent-practice/ent/firmware"
)

// Firmware is the model entity for the Firmware schema.
type Firmware struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 固件版本
	EquipVersion string `json:"equip_version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FirmwareQuery when eager-loading is set.
	Edges FirmwareEdges `json:"edges"`
}

// FirmwareEdges holds the relations/edges for other nodes in the graph.
type FirmwareEdges struct {
	// EquipmentFirmwareEffect holds the value of the equipment_firmware_effect edge.
	EquipmentFirmwareEffect []*EquipmentFirmwareEffect `json:"equipment_firmware_effect,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EquipmentFirmwareEffectOrErr returns the EquipmentFirmwareEffect value or an error if the edge
// was not loaded in eager-loading.
func (e FirmwareEdges) EquipmentFirmwareEffectOrErr() ([]*EquipmentFirmwareEffect, error) {
	if e.loadedTypes[0] {
		return e.EquipmentFirmwareEffect, nil
	}
	return nil, &NotLoadedError{edge: "equipment_firmware_effect"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Firmware) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case firmware.FieldID:
			values[i] = new(sql.NullInt64)
		case firmware.FieldEquipVersion:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Firmware", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Firmware fields.
func (f *Firmware) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case firmware.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case firmware.FieldEquipVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equip_version", values[i])
			} else if value.Valid {
				f.EquipVersion = value.String
			}
		}
	}
	return nil
}

// QueryEquipmentFirmwareEffect queries the "equipment_firmware_effect" edge of the Firmware entity.
func (f *Firmware) QueryEquipmentFirmwareEffect() *EquipmentFirmwareEffectQuery {
	return (&FirmwareClient{config: f.config}).QueryEquipmentFirmwareEffect(f)
}

// Update returns a builder for updating this Firmware.
// Note that you need to call Firmware.Unwrap() before calling this method if this Firmware
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Firmware) Update() *FirmwareUpdateOne {
	return (&FirmwareClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Firmware entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Firmware) Unwrap() *Firmware {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Firmware is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Firmware) String() string {
	var builder strings.Builder
	builder.WriteString("Firmware(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("equip_version=")
	builder.WriteString(f.EquipVersion)
	builder.WriteByte(')')
	return builder.String()
}

// Firmwares is a parsable slice of Firmware.
type Firmwares []*Firmware

func (f Firmwares) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
