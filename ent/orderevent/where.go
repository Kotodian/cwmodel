// Code generated by ent, DO NOT EDIT.

package orderevent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v datasource.UUID) predicate.OrderEvent {
	vc := uint64(v)
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), vc))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// Occurrence applies equality check predicate on the "occurrence" field. It's identical to OccurrenceEQ.
func Occurrence(v int64) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccurrence), v))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v datasource.UUID) predicate.OrderEvent {
	vc := uint64(v)
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), vc))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v datasource.UUID) predicate.OrderEvent {
	vc := uint64(v)
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), vc))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...datasource.UUID) predicate.OrderEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...datasource.UUID) predicate.OrderEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v datasource.UUID) predicate.OrderEvent {
	vc := uint64(v)
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), vc))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v datasource.UUID) predicate.OrderEvent {
	vc := uint64(v)
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), vc))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v datasource.UUID) predicate.OrderEvent {
	vc := uint64(v)
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), vc))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v datasource.UUID) predicate.OrderEvent {
	vc := uint64(v)
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), vc))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.OrderEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.OrderEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// OccurrenceEQ applies the EQ predicate on the "occurrence" field.
func OccurrenceEQ(v int64) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccurrence), v))
	})
}

// OccurrenceNEQ applies the NEQ predicate on the "occurrence" field.
func OccurrenceNEQ(v int64) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOccurrence), v))
	})
}

// OccurrenceIn applies the In predicate on the "occurrence" field.
func OccurrenceIn(vs ...int64) predicate.OrderEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOccurrence), v...))
	})
}

// OccurrenceNotIn applies the NotIn predicate on the "occurrence" field.
func OccurrenceNotIn(vs ...int64) predicate.OrderEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOccurrence), v...))
	})
}

// OccurrenceGT applies the GT predicate on the "occurrence" field.
func OccurrenceGT(v int64) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOccurrence), v))
	})
}

// OccurrenceGTE applies the GTE predicate on the "occurrence" field.
func OccurrenceGTE(v int64) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOccurrence), v))
	})
}

// OccurrenceLT applies the LT predicate on the "occurrence" field.
func OccurrenceLT(v int64) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOccurrence), v))
	})
}

// OccurrenceLTE applies the LTE predicate on the "occurrence" field.
func OccurrenceLTE(v int64) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOccurrence), v))
	})
}

// HasOrderInfo applies the HasEdge predicate on the "order_info" edge.
func HasOrderInfo() predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderInfoWith applies the HasEdge predicate on the "order_info" edge with a given conditions (other predicates).
func HasOrderInfoWith(preds ...predicate.OrderInfo) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderEvent) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderEvent) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderEvent) predicate.OrderEvent {
	return predicate.OrderEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
