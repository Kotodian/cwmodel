// Code generated by ent, DO NOT EDIT.

package firmware

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/ent-practice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EquipVersion applies equality check predicate on the "equip_version" field. It's identical to EquipVersionEQ.
func EquipVersion(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionEQ applies the EQ predicate on the "equip_version" field.
func EquipVersionEQ(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionNEQ applies the NEQ predicate on the "equip_version" field.
func EquipVersionNEQ(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionIn applies the In predicate on the "equip_version" field.
func EquipVersionIn(vs ...string) predicate.Firmware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquipVersion), v...))
	})
}

// EquipVersionNotIn applies the NotIn predicate on the "equip_version" field.
func EquipVersionNotIn(vs ...string) predicate.Firmware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquipVersion), v...))
	})
}

// EquipVersionGT applies the GT predicate on the "equip_version" field.
func EquipVersionGT(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionGTE applies the GTE predicate on the "equip_version" field.
func EquipVersionGTE(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionLT applies the LT predicate on the "equip_version" field.
func EquipVersionLT(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionLTE applies the LTE predicate on the "equip_version" field.
func EquipVersionLTE(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionContains applies the Contains predicate on the "equip_version" field.
func EquipVersionContains(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionHasPrefix applies the HasPrefix predicate on the "equip_version" field.
func EquipVersionHasPrefix(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionHasSuffix applies the HasSuffix predicate on the "equip_version" field.
func EquipVersionHasSuffix(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionEqualFold applies the EqualFold predicate on the "equip_version" field.
func EquipVersionEqualFold(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEquipVersion), v))
	})
}

// EquipVersionContainsFold applies the ContainsFold predicate on the "equip_version" field.
func EquipVersionContainsFold(v string) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEquipVersion), v))
	})
}

// HasEquipmentFirmwareEffect applies the HasEdge predicate on the "equipment_firmware_effect" edge.
func HasEquipmentFirmwareEffect() predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentFirmwareEffectTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentFirmwareEffectTable, EquipmentFirmwareEffectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentFirmwareEffectWith applies the HasEdge predicate on the "equipment_firmware_effect" edge with a given conditions (other predicates).
func HasEquipmentFirmwareEffectWith(preds ...predicate.EquipmentFirmwareEffect) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentFirmwareEffectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentFirmwareEffectTable, EquipmentFirmwareEffectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Firmware) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Firmware) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Firmware) predicate.Firmware {
	return predicate.Firmware(func(s *sql.Selector) {
		p(s.Not())
	})
}
