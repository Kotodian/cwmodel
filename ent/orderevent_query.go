// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/orderevent"
	"github.com/Kotodian/ent-practice/ent/orderinfo"
	"github.com/Kotodian/ent-practice/ent/predicate"
)

// OrderEventQuery is the builder for querying OrderEvent entities.
type OrderEventQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderEvent
	// eager-loading edges.
	withOrderInfo *OrderInfoQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderEventQuery builder.
func (oeq *OrderEventQuery) Where(ps ...predicate.OrderEvent) *OrderEventQuery {
	oeq.predicates = append(oeq.predicates, ps...)
	return oeq
}

// Limit adds a limit step to the query.
func (oeq *OrderEventQuery) Limit(limit int) *OrderEventQuery {
	oeq.limit = &limit
	return oeq
}

// Offset adds an offset step to the query.
func (oeq *OrderEventQuery) Offset(offset int) *OrderEventQuery {
	oeq.offset = &offset
	return oeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oeq *OrderEventQuery) Unique(unique bool) *OrderEventQuery {
	oeq.unique = &unique
	return oeq
}

// Order adds an order step to the query.
func (oeq *OrderEventQuery) Order(o ...OrderFunc) *OrderEventQuery {
	oeq.order = append(oeq.order, o...)
	return oeq
}

// QueryOrderInfo chains the current query on the "order_info" edge.
func (oeq *OrderEventQuery) QueryOrderInfo() *OrderInfoQuery {
	query := &OrderInfoQuery{config: oeq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderevent.Table, orderevent.FieldID, selector),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderevent.OrderInfoTable, orderevent.OrderInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(oeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderEvent entity from the query.
// Returns a *NotFoundError when no OrderEvent was found.
func (oeq *OrderEventQuery) First(ctx context.Context) (*OrderEvent, error) {
	nodes, err := oeq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oeq *OrderEventQuery) FirstX(ctx context.Context) *OrderEvent {
	node, err := oeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderEvent ID from the query.
// Returns a *NotFoundError when no OrderEvent ID was found.
func (oeq *OrderEventQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oeq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oeq *OrderEventQuery) FirstIDX(ctx context.Context) int {
	id, err := oeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderEvent entity is found.
// Returns a *NotFoundError when no OrderEvent entities are found.
func (oeq *OrderEventQuery) Only(ctx context.Context) (*OrderEvent, error) {
	nodes, err := oeq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderevent.Label}
	default:
		return nil, &NotSingularError{orderevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oeq *OrderEventQuery) OnlyX(ctx context.Context) *OrderEvent {
	node, err := oeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderEvent ID in the query.
// Returns a *NotSingularError when more than one OrderEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (oeq *OrderEventQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oeq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = &NotSingularError{orderevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oeq *OrderEventQuery) OnlyIDX(ctx context.Context) int {
	id, err := oeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderEvents.
func (oeq *OrderEventQuery) All(ctx context.Context) ([]*OrderEvent, error) {
	if err := oeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oeq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oeq *OrderEventQuery) AllX(ctx context.Context) []*OrderEvent {
	nodes, err := oeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderEvent IDs.
func (oeq *OrderEventQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := oeq.Select(orderevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oeq *OrderEventQuery) IDsX(ctx context.Context) []int {
	ids, err := oeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oeq *OrderEventQuery) Count(ctx context.Context) (int, error) {
	if err := oeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oeq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oeq *OrderEventQuery) CountX(ctx context.Context) int {
	count, err := oeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oeq *OrderEventQuery) Exist(ctx context.Context) (bool, error) {
	if err := oeq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oeq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oeq *OrderEventQuery) ExistX(ctx context.Context) bool {
	exist, err := oeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oeq *OrderEventQuery) Clone() *OrderEventQuery {
	if oeq == nil {
		return nil
	}
	return &OrderEventQuery{
		config:        oeq.config,
		limit:         oeq.limit,
		offset:        oeq.offset,
		order:         append([]OrderFunc{}, oeq.order...),
		predicates:    append([]predicate.OrderEvent{}, oeq.predicates...),
		withOrderInfo: oeq.withOrderInfo.Clone(),
		// clone intermediate query.
		sql:    oeq.sql.Clone(),
		path:   oeq.path,
		unique: oeq.unique,
	}
}

// WithOrderInfo tells the query-builder to eager-load the nodes that are connected to
// the "order_info" edge. The optional arguments are used to configure the query builder of the edge.
func (oeq *OrderEventQuery) WithOrderInfo(opts ...func(*OrderInfoQuery)) *OrderEventQuery {
	query := &OrderInfoQuery{config: oeq.config}
	for _, opt := range opts {
		opt(query)
	}
	oeq.withOrderInfo = query
	return oeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OrderID datasource.UUID `json:"order_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderEvent.Query().
//		GroupBy(orderevent.FieldOrderID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oeq *OrderEventQuery) GroupBy(field string, fields ...string) *OrderEventGroupBy {
	group := &OrderEventGroupBy{config: oeq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oeq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OrderID datasource.UUID `json:"order_id,omitempty"`
//	}
//
//	client.OrderEvent.Query().
//		Select(orderevent.FieldOrderID).
//		Scan(ctx, &v)
func (oeq *OrderEventQuery) Select(fields ...string) *OrderEventSelect {
	oeq.fields = append(oeq.fields, fields...)
	return &OrderEventSelect{OrderEventQuery: oeq}
}

func (oeq *OrderEventQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oeq.fields {
		if !orderevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oeq.path != nil {
		prev, err := oeq.path(ctx)
		if err != nil {
			return err
		}
		oeq.sql = prev
	}
	return nil
}

func (oeq *OrderEventQuery) sqlAll(ctx context.Context) ([]*OrderEvent, error) {
	var (
		nodes       = []*OrderEvent{}
		withFKs     = oeq.withFKs
		_spec       = oeq.querySpec()
		loadedTypes = [1]bool{
			oeq.withOrderInfo != nil,
		}
	)
	if oeq.withOrderInfo != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderevent.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &OrderEvent{config: oeq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, oeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := oeq.withOrderInfo; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderEvent)
		for i := range nodes {
			if nodes[i].order_info_order_event == nil {
				continue
			}
			fk := *nodes[i].order_info_order_event
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderinfo.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_info_order_event" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderInfo = n
			}
		}
	}

	return nodes, nil
}

func (oeq *OrderEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oeq.querySpec()
	_spec.Node.Columns = oeq.fields
	if len(oeq.fields) > 0 {
		_spec.Unique = oeq.unique != nil && *oeq.unique
	}
	return sqlgraph.CountNodes(ctx, oeq.driver, _spec)
}

func (oeq *OrderEventQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := oeq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (oeq *OrderEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderevent.Table,
			Columns: orderevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderevent.FieldID,
			},
		},
		From:   oeq.sql,
		Unique: true,
	}
	if unique := oeq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oeq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderevent.FieldID)
		for i := range fields {
			if fields[i] != orderevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oeq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oeq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oeq *OrderEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oeq.driver.Dialect())
	t1 := builder.Table(orderevent.Table)
	columns := oeq.fields
	if len(columns) == 0 {
		columns = orderevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oeq.sql != nil {
		selector = oeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oeq.unique != nil && *oeq.unique {
		selector.Distinct()
	}
	for _, p := range oeq.predicates {
		p(selector)
	}
	for _, p := range oeq.order {
		p(selector)
	}
	if offset := oeq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oeq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderEventGroupBy is the group-by builder for OrderEvent entities.
type OrderEventGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oegb *OrderEventGroupBy) Aggregate(fns ...AggregateFunc) *OrderEventGroupBy {
	oegb.fns = append(oegb.fns, fns...)
	return oegb
}

// Scan applies the group-by query and scans the result into the given value.
func (oegb *OrderEventGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := oegb.path(ctx)
	if err != nil {
		return err
	}
	oegb.sql = query
	return oegb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oegb *OrderEventGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := oegb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(oegb.fields) > 1 {
		return nil, errors.New("ent: OrderEventGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := oegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oegb *OrderEventGroupBy) StringsX(ctx context.Context) []string {
	v, err := oegb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oegb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oegb *OrderEventGroupBy) StringX(ctx context.Context) string {
	v, err := oegb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(oegb.fields) > 1 {
		return nil, errors.New("ent: OrderEventGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := oegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oegb *OrderEventGroupBy) IntsX(ctx context.Context) []int {
	v, err := oegb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oegb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oegb *OrderEventGroupBy) IntX(ctx context.Context) int {
	v, err := oegb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(oegb.fields) > 1 {
		return nil, errors.New("ent: OrderEventGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := oegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oegb *OrderEventGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := oegb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oegb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oegb *OrderEventGroupBy) Float64X(ctx context.Context) float64 {
	v, err := oegb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(oegb.fields) > 1 {
		return nil, errors.New("ent: OrderEventGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := oegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oegb *OrderEventGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := oegb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oegb *OrderEventGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oegb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oegb *OrderEventGroupBy) BoolX(ctx context.Context) bool {
	v, err := oegb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oegb *OrderEventGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range oegb.fields {
		if !orderevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := oegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oegb *OrderEventGroupBy) sqlQuery() *sql.Selector {
	selector := oegb.sql.Select()
	aggregation := make([]string, 0, len(oegb.fns))
	for _, fn := range oegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(oegb.fields)+len(oegb.fns))
		for _, f := range oegb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(oegb.fields...)...)
}

// OrderEventSelect is the builder for selecting fields of OrderEvent entities.
type OrderEventSelect struct {
	*OrderEventQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (oes *OrderEventSelect) Scan(ctx context.Context, v interface{}) error {
	if err := oes.prepareQuery(ctx); err != nil {
		return err
	}
	oes.sql = oes.OrderEventQuery.sqlQuery(ctx)
	return oes.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oes *OrderEventSelect) ScanX(ctx context.Context, v interface{}) {
	if err := oes.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) Strings(ctx context.Context) ([]string, error) {
	if len(oes.fields) > 1 {
		return nil, errors.New("ent: OrderEventSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := oes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oes *OrderEventSelect) StringsX(ctx context.Context) []string {
	v, err := oes.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oes.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oes *OrderEventSelect) StringX(ctx context.Context) string {
	v, err := oes.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) Ints(ctx context.Context) ([]int, error) {
	if len(oes.fields) > 1 {
		return nil, errors.New("ent: OrderEventSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := oes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oes *OrderEventSelect) IntsX(ctx context.Context) []int {
	v, err := oes.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oes.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oes *OrderEventSelect) IntX(ctx context.Context) int {
	v, err := oes.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(oes.fields) > 1 {
		return nil, errors.New("ent: OrderEventSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := oes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oes *OrderEventSelect) Float64sX(ctx context.Context) []float64 {
	v, err := oes.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oes.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oes *OrderEventSelect) Float64X(ctx context.Context) float64 {
	v, err := oes.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(oes.fields) > 1 {
		return nil, errors.New("ent: OrderEventSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := oes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oes *OrderEventSelect) BoolsX(ctx context.Context) []bool {
	v, err := oes.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (oes *OrderEventSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oes.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderevent.Label}
	default:
		err = fmt.Errorf("ent: OrderEventSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oes *OrderEventSelect) BoolX(ctx context.Context) bool {
	v, err := oes.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oes *OrderEventSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := oes.sql.Query()
	if err := oes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
