// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/connector"
	"github.com/Kotodian/ent-practice/ent/enums"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/evse"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// ConnectorUpdate is the builder for updating Connector entities.
type ConnectorUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectorMutation
}

// Where appends a list predicates to the ConnectorUpdate builder.
func (cu *ConnectorUpdate) Where(ps ...predicate.Connector) *ConnectorUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetEquipmentSn sets the "equipment_sn" field.
func (cu *ConnectorUpdate) SetEquipmentSn(s string) *ConnectorUpdate {
	cu.mutation.SetEquipmentSn(s)
	return cu
}

// SetEvseSerial sets the "evse_serial" field.
func (cu *ConnectorUpdate) SetEvseSerial(s string) *ConnectorUpdate {
	cu.mutation.SetEvseSerial(s)
	return cu
}

// SetSerial sets the "serial" field.
func (cu *ConnectorUpdate) SetSerial(s string) *ConnectorUpdate {
	cu.mutation.SetSerial(s)
	return cu
}

// SetCurrentState sets the "current_state" field.
func (cu *ConnectorUpdate) SetCurrentState(es enums.ConnectorState) *ConnectorUpdate {
	cu.mutation.SetCurrentState(es)
	return cu
}

// SetBeforeState sets the "before_state" field.
func (cu *ConnectorUpdate) SetBeforeState(es enums.ConnectorState) *ConnectorUpdate {
	cu.mutation.SetBeforeState(es)
	return cu
}

// SetEvseID sets the "evse" edge to the Evse entity by ID.
func (cu *ConnectorUpdate) SetEvseID(id datasource.UUID) *ConnectorUpdate {
	cu.mutation.SetEvseID(id)
	return cu
}

// SetEvse sets the "evse" edge to the Evse entity.
func (cu *ConnectorUpdate) SetEvse(e *Evse) *ConnectorUpdate {
	return cu.SetEvseID(e.ID)
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (cu *ConnectorUpdate) SetEquipmentID(id datasource.UUID) *ConnectorUpdate {
	cu.mutation.SetEquipmentID(id)
	return cu
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (cu *ConnectorUpdate) SetEquipment(e *Equipment) *ConnectorUpdate {
	return cu.SetEquipmentID(e.ID)
}

// Mutation returns the ConnectorMutation object of the builder.
func (cu *ConnectorUpdate) Mutation() *ConnectorMutation {
	return cu.mutation
}

// ClearEvse clears the "evse" edge to the Evse entity.
func (cu *ConnectorUpdate) ClearEvse() *ConnectorUpdate {
	cu.mutation.ClearEvse()
	return cu
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (cu *ConnectorUpdate) ClearEquipment() *ConnectorUpdate {
	cu.mutation.ClearEquipment()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConnectorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConnectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConnectorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConnectorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConnectorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConnectorUpdate) check() error {
	if v, ok := cu.mutation.CurrentState(); ok {
		if err := connector.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "Connector.current_state": %w`, err)}
		}
	}
	if v, ok := cu.mutation.BeforeState(); ok {
		if err := connector.BeforeStateValidator(v); err != nil {
			return &ValidationError{Name: "before_state", err: fmt.Errorf(`ent: validator failed for field "Connector.before_state": %w`, err)}
		}
	}
	if _, ok := cu.mutation.EvseID(); cu.mutation.EvseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Connector.evse"`)
	}
	if _, ok := cu.mutation.EquipmentID(); cu.mutation.EquipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Connector.equipment"`)
	}
	return nil
}

func (cu *ConnectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   connector.Table,
			Columns: connector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: connector.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.EquipmentSn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: connector.FieldEquipmentSn,
		})
	}
	if value, ok := cu.mutation.EvseSerial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: connector.FieldEvseSerial,
		})
	}
	if value, ok := cu.mutation.Serial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: connector.FieldSerial,
		})
	}
	if value, ok := cu.mutation.CurrentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: connector.FieldCurrentState,
		})
	}
	if value, ok := cu.mutation.BeforeState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: connector.FieldBeforeState,
		})
	}
	if cu.mutation.EvseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EvseTable,
			Columns: []string{connector.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EvseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EvseTable,
			Columns: []string{connector.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EquipmentTable,
			Columns: []string{connector.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EquipmentTable,
			Columns: []string{connector.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ConnectorUpdateOne is the builder for updating a single Connector entity.
type ConnectorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectorMutation
}

// SetEquipmentSn sets the "equipment_sn" field.
func (cuo *ConnectorUpdateOne) SetEquipmentSn(s string) *ConnectorUpdateOne {
	cuo.mutation.SetEquipmentSn(s)
	return cuo
}

// SetEvseSerial sets the "evse_serial" field.
func (cuo *ConnectorUpdateOne) SetEvseSerial(s string) *ConnectorUpdateOne {
	cuo.mutation.SetEvseSerial(s)
	return cuo
}

// SetSerial sets the "serial" field.
func (cuo *ConnectorUpdateOne) SetSerial(s string) *ConnectorUpdateOne {
	cuo.mutation.SetSerial(s)
	return cuo
}

// SetCurrentState sets the "current_state" field.
func (cuo *ConnectorUpdateOne) SetCurrentState(es enums.ConnectorState) *ConnectorUpdateOne {
	cuo.mutation.SetCurrentState(es)
	return cuo
}

// SetBeforeState sets the "before_state" field.
func (cuo *ConnectorUpdateOne) SetBeforeState(es enums.ConnectorState) *ConnectorUpdateOne {
	cuo.mutation.SetBeforeState(es)
	return cuo
}

// SetEvseID sets the "evse" edge to the Evse entity by ID.
func (cuo *ConnectorUpdateOne) SetEvseID(id datasource.UUID) *ConnectorUpdateOne {
	cuo.mutation.SetEvseID(id)
	return cuo
}

// SetEvse sets the "evse" edge to the Evse entity.
func (cuo *ConnectorUpdateOne) SetEvse(e *Evse) *ConnectorUpdateOne {
	return cuo.SetEvseID(e.ID)
}

// SetEquipmentID sets the "equipment" edge to the Equipment entity by ID.
func (cuo *ConnectorUpdateOne) SetEquipmentID(id datasource.UUID) *ConnectorUpdateOne {
	cuo.mutation.SetEquipmentID(id)
	return cuo
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (cuo *ConnectorUpdateOne) SetEquipment(e *Equipment) *ConnectorUpdateOne {
	return cuo.SetEquipmentID(e.ID)
}

// Mutation returns the ConnectorMutation object of the builder.
func (cuo *ConnectorUpdateOne) Mutation() *ConnectorMutation {
	return cuo.mutation
}

// ClearEvse clears the "evse" edge to the Evse entity.
func (cuo *ConnectorUpdateOne) ClearEvse() *ConnectorUpdateOne {
	cuo.mutation.ClearEvse()
	return cuo
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (cuo *ConnectorUpdateOne) ClearEquipment() *ConnectorUpdateOne {
	cuo.mutation.ClearEquipment()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConnectorUpdateOne) Select(field string, fields ...string) *ConnectorUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Connector entity.
func (cuo *ConnectorUpdateOne) Save(ctx context.Context) (*Connector, error) {
	var (
		err  error
		node *Connector
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConnectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConnectorUpdateOne) SaveX(ctx context.Context) *Connector {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConnectorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConnectorUpdateOne) check() error {
	if v, ok := cuo.mutation.CurrentState(); ok {
		if err := connector.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "Connector.current_state": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.BeforeState(); ok {
		if err := connector.BeforeStateValidator(v); err != nil {
			return &ValidationError{Name: "before_state", err: fmt.Errorf(`ent: validator failed for field "Connector.before_state": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.EvseID(); cuo.mutation.EvseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Connector.evse"`)
	}
	if _, ok := cuo.mutation.EquipmentID(); cuo.mutation.EquipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Connector.equipment"`)
	}
	return nil
}

func (cuo *ConnectorUpdateOne) sqlSave(ctx context.Context) (_node *Connector, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   connector.Table,
			Columns: connector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: connector.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Connector.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connector.FieldID)
		for _, f := range fields {
			if !connector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.EquipmentSn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: connector.FieldEquipmentSn,
		})
	}
	if value, ok := cuo.mutation.EvseSerial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: connector.FieldEvseSerial,
		})
	}
	if value, ok := cuo.mutation.Serial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: connector.FieldSerial,
		})
	}
	if value, ok := cuo.mutation.CurrentState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: connector.FieldCurrentState,
		})
	}
	if value, ok := cuo.mutation.BeforeState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: connector.FieldBeforeState,
		})
	}
	if cuo.mutation.EvseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EvseTable,
			Columns: []string{connector.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EvseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EvseTable,
			Columns: []string{connector.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EquipmentTable,
			Columns: []string{connector.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.EquipmentTable,
			Columns: []string{connector.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Connector{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
