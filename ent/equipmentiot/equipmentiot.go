// Code generated by entc, DO NOT EDIT.

package equipmentiot

const (
	// Label holds the string label denoting the equipmentiot type in the database.
	Label = "equipment_iot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIccid holds the string denoting the iccid field in the database.
	FieldIccid = "iccid"
	// FieldImei holds the string denoting the imei field in the database.
	FieldImei = "imei"
	// FieldRemoteAddress holds the string denoting the remote_address field in the database.
	FieldRemoteAddress = "remote_address"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// Table holds the table name of the equipmentiot in the database.
	Table = "equip_iot"
	// EquipmentTable is the table that holds the equipment relation/edge.
	EquipmentTable = "equip_iot"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "base_equipment"
	// EquipmentColumn is the table column denoting the equipment relation/edge.
	EquipmentColumn = "equipment_equipment_iot"
)

// Columns holds all SQL columns for equipmentiot fields.
var Columns = []string{
	FieldID,
	FieldIccid,
	FieldImei,
	FieldRemoteAddress,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "equip_iot"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"equipment_equipment_iot",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
