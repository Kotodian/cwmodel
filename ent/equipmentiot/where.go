// Code generated by ent, DO NOT EDIT.

package equipmentiot

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/ent-practice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Iccid applies equality check predicate on the "iccid" field. It's identical to IccidEQ.
func Iccid(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIccid), v))
	})
}

// Imei applies equality check predicate on the "imei" field. It's identical to ImeiEQ.
func Imei(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImei), v))
	})
}

// RemoteAddress applies equality check predicate on the "remote_address" field. It's identical to RemoteAddressEQ.
func RemoteAddress(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemoteAddress), v))
	})
}

// IccidEQ applies the EQ predicate on the "iccid" field.
func IccidEQ(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIccid), v))
	})
}

// IccidNEQ applies the NEQ predicate on the "iccid" field.
func IccidNEQ(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIccid), v))
	})
}

// IccidIn applies the In predicate on the "iccid" field.
func IccidIn(vs ...string) predicate.EquipmentIot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIccid), v...))
	})
}

// IccidNotIn applies the NotIn predicate on the "iccid" field.
func IccidNotIn(vs ...string) predicate.EquipmentIot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIccid), v...))
	})
}

// IccidGT applies the GT predicate on the "iccid" field.
func IccidGT(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIccid), v))
	})
}

// IccidGTE applies the GTE predicate on the "iccid" field.
func IccidGTE(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIccid), v))
	})
}

// IccidLT applies the LT predicate on the "iccid" field.
func IccidLT(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIccid), v))
	})
}

// IccidLTE applies the LTE predicate on the "iccid" field.
func IccidLTE(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIccid), v))
	})
}

// IccidContains applies the Contains predicate on the "iccid" field.
func IccidContains(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIccid), v))
	})
}

// IccidHasPrefix applies the HasPrefix predicate on the "iccid" field.
func IccidHasPrefix(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIccid), v))
	})
}

// IccidHasSuffix applies the HasSuffix predicate on the "iccid" field.
func IccidHasSuffix(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIccid), v))
	})
}

// IccidIsNil applies the IsNil predicate on the "iccid" field.
func IccidIsNil() predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIccid)))
	})
}

// IccidNotNil applies the NotNil predicate on the "iccid" field.
func IccidNotNil() predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIccid)))
	})
}

// IccidEqualFold applies the EqualFold predicate on the "iccid" field.
func IccidEqualFold(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIccid), v))
	})
}

// IccidContainsFold applies the ContainsFold predicate on the "iccid" field.
func IccidContainsFold(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIccid), v))
	})
}

// ImeiEQ applies the EQ predicate on the "imei" field.
func ImeiEQ(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImei), v))
	})
}

// ImeiNEQ applies the NEQ predicate on the "imei" field.
func ImeiNEQ(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImei), v))
	})
}

// ImeiIn applies the In predicate on the "imei" field.
func ImeiIn(vs ...string) predicate.EquipmentIot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImei), v...))
	})
}

// ImeiNotIn applies the NotIn predicate on the "imei" field.
func ImeiNotIn(vs ...string) predicate.EquipmentIot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImei), v...))
	})
}

// ImeiGT applies the GT predicate on the "imei" field.
func ImeiGT(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImei), v))
	})
}

// ImeiGTE applies the GTE predicate on the "imei" field.
func ImeiGTE(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImei), v))
	})
}

// ImeiLT applies the LT predicate on the "imei" field.
func ImeiLT(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImei), v))
	})
}

// ImeiLTE applies the LTE predicate on the "imei" field.
func ImeiLTE(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImei), v))
	})
}

// ImeiContains applies the Contains predicate on the "imei" field.
func ImeiContains(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImei), v))
	})
}

// ImeiHasPrefix applies the HasPrefix predicate on the "imei" field.
func ImeiHasPrefix(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImei), v))
	})
}

// ImeiHasSuffix applies the HasSuffix predicate on the "imei" field.
func ImeiHasSuffix(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImei), v))
	})
}

// ImeiIsNil applies the IsNil predicate on the "imei" field.
func ImeiIsNil() predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImei)))
	})
}

// ImeiNotNil applies the NotNil predicate on the "imei" field.
func ImeiNotNil() predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImei)))
	})
}

// ImeiEqualFold applies the EqualFold predicate on the "imei" field.
func ImeiEqualFold(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImei), v))
	})
}

// ImeiContainsFold applies the ContainsFold predicate on the "imei" field.
func ImeiContainsFold(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImei), v))
	})
}

// RemoteAddressEQ applies the EQ predicate on the "remote_address" field.
func RemoteAddressEQ(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressNEQ applies the NEQ predicate on the "remote_address" field.
func RemoteAddressNEQ(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressIn applies the In predicate on the "remote_address" field.
func RemoteAddressIn(vs ...string) predicate.EquipmentIot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemoteAddress), v...))
	})
}

// RemoteAddressNotIn applies the NotIn predicate on the "remote_address" field.
func RemoteAddressNotIn(vs ...string) predicate.EquipmentIot {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemoteAddress), v...))
	})
}

// RemoteAddressGT applies the GT predicate on the "remote_address" field.
func RemoteAddressGT(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressGTE applies the GTE predicate on the "remote_address" field.
func RemoteAddressGTE(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressLT applies the LT predicate on the "remote_address" field.
func RemoteAddressLT(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressLTE applies the LTE predicate on the "remote_address" field.
func RemoteAddressLTE(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressContains applies the Contains predicate on the "remote_address" field.
func RemoteAddressContains(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressHasPrefix applies the HasPrefix predicate on the "remote_address" field.
func RemoteAddressHasPrefix(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressHasSuffix applies the HasSuffix predicate on the "remote_address" field.
func RemoteAddressHasSuffix(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressIsNil applies the IsNil predicate on the "remote_address" field.
func RemoteAddressIsNil() predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemoteAddress)))
	})
}

// RemoteAddressNotNil applies the NotNil predicate on the "remote_address" field.
func RemoteAddressNotNil() predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemoteAddress)))
	})
}

// RemoteAddressEqualFold applies the EqualFold predicate on the "remote_address" field.
func RemoteAddressEqualFold(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemoteAddress), v))
	})
}

// RemoteAddressContainsFold applies the ContainsFold predicate on the "remote_address" field.
func RemoteAddressContainsFold(v string) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemoteAddress), v))
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EquipmentIot) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EquipmentIot) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EquipmentIot) predicate.EquipmentIot {
	return predicate.EquipmentIot(func(s *sql.Selector) {
		p(s.Not())
	})
}
