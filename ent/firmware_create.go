// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentfirmwareeffect"
	"github.com/Kotodian/ent-practice/ent/firmware"
)

// FirmwareCreate is the builder for creating a Firmware entity.
type FirmwareCreate struct {
	config
	mutation *FirmwareMutation
	hooks    []Hook
}

// SetEquipVersion sets the "equip_version" field.
func (fc *FirmwareCreate) SetEquipVersion(s string) *FirmwareCreate {
	fc.mutation.SetEquipVersion(s)
	return fc
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (fc *FirmwareCreate) AddEquipmentIDs(ids ...int) *FirmwareCreate {
	fc.mutation.AddEquipmentIDs(ids...)
	return fc
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (fc *FirmwareCreate) AddEquipment(e ...*Equipment) *FirmwareCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fc.AddEquipmentIDs(ids...)
}

// AddEquipmentFirmwareEffectIDs adds the "equipment_firmware_effect" edge to the EquipmentFirmwareEffect entity by IDs.
func (fc *FirmwareCreate) AddEquipmentFirmwareEffectIDs(ids ...int) *FirmwareCreate {
	fc.mutation.AddEquipmentFirmwareEffectIDs(ids...)
	return fc
}

// AddEquipmentFirmwareEffect adds the "equipment_firmware_effect" edges to the EquipmentFirmwareEffect entity.
func (fc *FirmwareCreate) AddEquipmentFirmwareEffect(e ...*EquipmentFirmwareEffect) *FirmwareCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fc.AddEquipmentFirmwareEffectIDs(ids...)
}

// Mutation returns the FirmwareMutation object of the builder.
func (fc *FirmwareCreate) Mutation() *FirmwareMutation {
	return fc.mutation
}

// Save creates the Firmware in the database.
func (fc *FirmwareCreate) Save(ctx context.Context) (*Firmware, error) {
	var (
		err  error
		node *Firmware
	)
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FirmwareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FirmwareCreate) SaveX(ctx context.Context) *Firmware {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FirmwareCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FirmwareCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FirmwareCreate) check() error {
	if _, ok := fc.mutation.EquipVersion(); !ok {
		return &ValidationError{Name: "equip_version", err: errors.New(`ent: missing required field "Firmware.equip_version"`)}
	}
	return nil
}

func (fc *FirmwareCreate) sqlSave(ctx context.Context) (*Firmware, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fc *FirmwareCreate) createSpec() (*Firmware, *sqlgraph.CreateSpec) {
	var (
		_node = &Firmware{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: firmware.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: firmware.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.EquipVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: firmware.FieldEquipVersion,
		})
		_node.EquipVersion = value
	}
	if nodes := fc.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   firmware.EquipmentTable,
			Columns: []string{firmware.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.EquipmentFirmwareEffectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   firmware.EquipmentFirmwareEffectTable,
			Columns: []string{firmware.EquipmentFirmwareEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmentfirmwareeffect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FirmwareCreateBulk is the builder for creating many Firmware entities in bulk.
type FirmwareCreateBulk struct {
	config
	builders []*FirmwareCreate
}

// Save creates the Firmware entities in the database.
func (fcb *FirmwareCreateBulk) Save(ctx context.Context) ([]*Firmware, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Firmware, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FirmwareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FirmwareCreateBulk) SaveX(ctx context.Context) []*Firmware {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FirmwareCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FirmwareCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
