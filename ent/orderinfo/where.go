// Code generated by ent, DO NOT EDIT.

package orderinfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/cwmodel/ent/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// ID filters vertices based on their ID field.
func ID(id datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id datasource.UUID) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// RemoteStartID applies equality check predicate on the "remote_start_id" field. It's identical to RemoteStartIDEQ.
func RemoteStartID(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemoteStartID), v))
	})
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// AuthorizationID applies equality check predicate on the "authorization_id" field. It's identical to AuthorizationIDEQ.
func AuthorizationID(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizationID), v))
	})
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CallerOrderID applies equality check predicate on the "caller_order_id" field. It's identical to CallerOrderIDEQ.
func CallerOrderID(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallerOrderID), v))
	})
}

// TotalElectricity applies equality check predicate on the "total_electricity" field. It's identical to TotalElectricityEQ.
func TotalElectricity(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalElectricity), v))
	})
}

// ChargeStartElectricity applies equality check predicate on the "charge_start_electricity" field. It's identical to ChargeStartElectricityEQ.
func ChargeStartElectricity(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeStartElectricity), v))
	})
}

// ChargeFinalElectricity applies equality check predicate on the "charge_final_electricity" field. It's identical to ChargeFinalElectricityEQ.
func ChargeFinalElectricity(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeFinalElectricity), v))
	})
}

// SharpElectricity applies equality check predicate on the "sharp_electricity" field. It's identical to SharpElectricityEQ.
func SharpElectricity(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSharpElectricity), v))
	})
}

// PeakElectricity applies equality check predicate on the "peak_electricity" field. It's identical to PeakElectricityEQ.
func PeakElectricity(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPeakElectricity), v))
	})
}

// FlatElectricity applies equality check predicate on the "flat_electricity" field. It's identical to FlatElectricityEQ.
func FlatElectricity(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlatElectricity), v))
	})
}

// ValleyElectricity applies equality check predicate on the "valley_electricity" field. It's identical to ValleyElectricityEQ.
func ValleyElectricity(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValleyElectricity), v))
	})
}

// StopReasonCode applies equality check predicate on the "stop_reason_code" field. It's identical to StopReasonCodeEQ.
func StopReasonCode(v int32) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStopReasonCode), v))
	})
}

// Offline applies equality check predicate on the "offline" field. It's identical to OfflineEQ.
func Offline(v bool) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOffline), v))
	})
}

// PriceSchemeReleaseID applies equality check predicate on the "price_scheme_release_id" field. It's identical to PriceSchemeReleaseIDEQ.
func PriceSchemeReleaseID(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceSchemeReleaseID), v))
	})
}

// OrderStartTime applies equality check predicate on the "order_start_time" field. It's identical to OrderStartTimeEQ.
func OrderStartTime(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderStartTime), v))
	})
}

// OrderFinalTime applies equality check predicate on the "order_final_time" field. It's identical to OrderFinalTimeEQ.
func OrderFinalTime(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderFinalTime), v))
	})
}

// ChargeStartTime applies equality check predicate on the "charge_start_time" field. It's identical to ChargeStartTimeEQ.
func ChargeStartTime(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeStartTime), v))
	})
}

// ChargeFinalTime applies equality check predicate on the "charge_final_time" field. It's identical to ChargeFinalTimeEQ.
func ChargeFinalTime(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeFinalTime), v))
	})
}

// IntellectID applies equality check predicate on the "intellect_id" field. It's identical to IntellectIDEQ.
func IntellectID(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntellectID), v))
	})
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStationID), vc))
	})
}

// OperatorID applies equality check predicate on the "operator_id" field. It's identical to OperatorIDEQ.
func OperatorID(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorID), vc))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), vc))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// RemoteStartIDEQ applies the EQ predicate on the "remote_start_id" field.
func RemoteStartIDEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemoteStartID), v))
	})
}

// RemoteStartIDNEQ applies the NEQ predicate on the "remote_start_id" field.
func RemoteStartIDNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemoteStartID), v))
	})
}

// RemoteStartIDIn applies the In predicate on the "remote_start_id" field.
func RemoteStartIDIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemoteStartID), v...))
	})
}

// RemoteStartIDNotIn applies the NotIn predicate on the "remote_start_id" field.
func RemoteStartIDNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemoteStartID), v...))
	})
}

// RemoteStartIDGT applies the GT predicate on the "remote_start_id" field.
func RemoteStartIDGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemoteStartID), v))
	})
}

// RemoteStartIDGTE applies the GTE predicate on the "remote_start_id" field.
func RemoteStartIDGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemoteStartID), v))
	})
}

// RemoteStartIDLT applies the LT predicate on the "remote_start_id" field.
func RemoteStartIDLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemoteStartID), v))
	})
}

// RemoteStartIDLTE applies the LTE predicate on the "remote_start_id" field.
func RemoteStartIDLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemoteStartID), v))
	})
}

// RemoteStartIDIsNil applies the IsNil predicate on the "remote_start_id" field.
func RemoteStartIDIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemoteStartID)))
	})
}

// RemoteStartIDNotNil applies the NotNil predicate on the "remote_start_id" field.
func RemoteStartIDNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemoteStartID)))
	})
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionID), v))
	})
}

// AuthorizationIDEQ applies the EQ predicate on the "authorization_id" field.
func AuthorizationIDEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDNEQ applies the NEQ predicate on the "authorization_id" field.
func AuthorizationIDNEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDIn applies the In predicate on the "authorization_id" field.
func AuthorizationIDIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAuthorizationID), v...))
	})
}

// AuthorizationIDNotIn applies the NotIn predicate on the "authorization_id" field.
func AuthorizationIDNotIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAuthorizationID), v...))
	})
}

// AuthorizationIDGT applies the GT predicate on the "authorization_id" field.
func AuthorizationIDGT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDGTE applies the GTE predicate on the "authorization_id" field.
func AuthorizationIDGTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDLT applies the LT predicate on the "authorization_id" field.
func AuthorizationIDLT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDLTE applies the LTE predicate on the "authorization_id" field.
func AuthorizationIDLTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDContains applies the Contains predicate on the "authorization_id" field.
func AuthorizationIDContains(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDHasPrefix applies the HasPrefix predicate on the "authorization_id" field.
func AuthorizationIDHasPrefix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDHasSuffix applies the HasSuffix predicate on the "authorization_id" field.
func AuthorizationIDHasSuffix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDIsNil applies the IsNil predicate on the "authorization_id" field.
func AuthorizationIDIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthorizationID)))
	})
}

// AuthorizationIDNotNil applies the NotNil predicate on the "authorization_id" field.
func AuthorizationIDNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthorizationID)))
	})
}

// AuthorizationIDEqualFold applies the EqualFold predicate on the "authorization_id" field.
func AuthorizationIDEqualFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDContainsFold applies the ContainsFold predicate on the "authorization_id" field.
func AuthorizationIDContainsFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthorizationID), v))
	})
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerID), v))
	})
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerID), v))
	})
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerID), v))
	})
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerID), v))
	})
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerID), v))
	})
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerID), v))
	})
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerID), v))
	})
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCustomerID)))
	})
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCustomerID)))
	})
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerID), v))
	})
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerID), v))
	})
}

// CallerOrderIDEQ applies the EQ predicate on the "caller_order_id" field.
func CallerOrderIDEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDNEQ applies the NEQ predicate on the "caller_order_id" field.
func CallerOrderIDNEQ(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDIn applies the In predicate on the "caller_order_id" field.
func CallerOrderIDIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCallerOrderID), v...))
	})
}

// CallerOrderIDNotIn applies the NotIn predicate on the "caller_order_id" field.
func CallerOrderIDNotIn(vs ...string) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCallerOrderID), v...))
	})
}

// CallerOrderIDGT applies the GT predicate on the "caller_order_id" field.
func CallerOrderIDGT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDGTE applies the GTE predicate on the "caller_order_id" field.
func CallerOrderIDGTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDLT applies the LT predicate on the "caller_order_id" field.
func CallerOrderIDLT(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDLTE applies the LTE predicate on the "caller_order_id" field.
func CallerOrderIDLTE(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDContains applies the Contains predicate on the "caller_order_id" field.
func CallerOrderIDContains(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDHasPrefix applies the HasPrefix predicate on the "caller_order_id" field.
func CallerOrderIDHasPrefix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDHasSuffix applies the HasSuffix predicate on the "caller_order_id" field.
func CallerOrderIDHasSuffix(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDIsNil applies the IsNil predicate on the "caller_order_id" field.
func CallerOrderIDIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCallerOrderID)))
	})
}

// CallerOrderIDNotNil applies the NotNil predicate on the "caller_order_id" field.
func CallerOrderIDNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCallerOrderID)))
	})
}

// CallerOrderIDEqualFold applies the EqualFold predicate on the "caller_order_id" field.
func CallerOrderIDEqualFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCallerOrderID), v))
	})
}

// CallerOrderIDContainsFold applies the ContainsFold predicate on the "caller_order_id" field.
func CallerOrderIDContainsFold(v string) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCallerOrderID), v))
	})
}

// TotalElectricityEQ applies the EQ predicate on the "total_electricity" field.
func TotalElectricityEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalElectricity), v))
	})
}

// TotalElectricityNEQ applies the NEQ predicate on the "total_electricity" field.
func TotalElectricityNEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalElectricity), v))
	})
}

// TotalElectricityIn applies the In predicate on the "total_electricity" field.
func TotalElectricityIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalElectricity), v...))
	})
}

// TotalElectricityNotIn applies the NotIn predicate on the "total_electricity" field.
func TotalElectricityNotIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalElectricity), v...))
	})
}

// TotalElectricityGT applies the GT predicate on the "total_electricity" field.
func TotalElectricityGT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalElectricity), v))
	})
}

// TotalElectricityGTE applies the GTE predicate on the "total_electricity" field.
func TotalElectricityGTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalElectricity), v))
	})
}

// TotalElectricityLT applies the LT predicate on the "total_electricity" field.
func TotalElectricityLT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalElectricity), v))
	})
}

// TotalElectricityLTE applies the LTE predicate on the "total_electricity" field.
func TotalElectricityLTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalElectricity), v))
	})
}

// TotalElectricityIsNil applies the IsNil predicate on the "total_electricity" field.
func TotalElectricityIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalElectricity)))
	})
}

// TotalElectricityNotNil applies the NotNil predicate on the "total_electricity" field.
func TotalElectricityNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalElectricity)))
	})
}

// ChargeStartElectricityEQ applies the EQ predicate on the "charge_start_electricity" field.
func ChargeStartElectricityEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeStartElectricity), v))
	})
}

// ChargeStartElectricityNEQ applies the NEQ predicate on the "charge_start_electricity" field.
func ChargeStartElectricityNEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeStartElectricity), v))
	})
}

// ChargeStartElectricityIn applies the In predicate on the "charge_start_electricity" field.
func ChargeStartElectricityIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChargeStartElectricity), v...))
	})
}

// ChargeStartElectricityNotIn applies the NotIn predicate on the "charge_start_electricity" field.
func ChargeStartElectricityNotIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChargeStartElectricity), v...))
	})
}

// ChargeStartElectricityGT applies the GT predicate on the "charge_start_electricity" field.
func ChargeStartElectricityGT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargeStartElectricity), v))
	})
}

// ChargeStartElectricityGTE applies the GTE predicate on the "charge_start_electricity" field.
func ChargeStartElectricityGTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargeStartElectricity), v))
	})
}

// ChargeStartElectricityLT applies the LT predicate on the "charge_start_electricity" field.
func ChargeStartElectricityLT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargeStartElectricity), v))
	})
}

// ChargeStartElectricityLTE applies the LTE predicate on the "charge_start_electricity" field.
func ChargeStartElectricityLTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargeStartElectricity), v))
	})
}

// ChargeStartElectricityIsNil applies the IsNil predicate on the "charge_start_electricity" field.
func ChargeStartElectricityIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeStartElectricity)))
	})
}

// ChargeStartElectricityNotNil applies the NotNil predicate on the "charge_start_electricity" field.
func ChargeStartElectricityNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeStartElectricity)))
	})
}

// ChargeFinalElectricityEQ applies the EQ predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeFinalElectricity), v))
	})
}

// ChargeFinalElectricityNEQ applies the NEQ predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityNEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeFinalElectricity), v))
	})
}

// ChargeFinalElectricityIn applies the In predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChargeFinalElectricity), v...))
	})
}

// ChargeFinalElectricityNotIn applies the NotIn predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityNotIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChargeFinalElectricity), v...))
	})
}

// ChargeFinalElectricityGT applies the GT predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityGT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargeFinalElectricity), v))
	})
}

// ChargeFinalElectricityGTE applies the GTE predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityGTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargeFinalElectricity), v))
	})
}

// ChargeFinalElectricityLT applies the LT predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityLT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargeFinalElectricity), v))
	})
}

// ChargeFinalElectricityLTE applies the LTE predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityLTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargeFinalElectricity), v))
	})
}

// ChargeFinalElectricityIsNil applies the IsNil predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeFinalElectricity)))
	})
}

// ChargeFinalElectricityNotNil applies the NotNil predicate on the "charge_final_electricity" field.
func ChargeFinalElectricityNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeFinalElectricity)))
	})
}

// SharpElectricityEQ applies the EQ predicate on the "sharp_electricity" field.
func SharpElectricityEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSharpElectricity), v))
	})
}

// SharpElectricityNEQ applies the NEQ predicate on the "sharp_electricity" field.
func SharpElectricityNEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSharpElectricity), v))
	})
}

// SharpElectricityIn applies the In predicate on the "sharp_electricity" field.
func SharpElectricityIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSharpElectricity), v...))
	})
}

// SharpElectricityNotIn applies the NotIn predicate on the "sharp_electricity" field.
func SharpElectricityNotIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSharpElectricity), v...))
	})
}

// SharpElectricityGT applies the GT predicate on the "sharp_electricity" field.
func SharpElectricityGT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSharpElectricity), v))
	})
}

// SharpElectricityGTE applies the GTE predicate on the "sharp_electricity" field.
func SharpElectricityGTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSharpElectricity), v))
	})
}

// SharpElectricityLT applies the LT predicate on the "sharp_electricity" field.
func SharpElectricityLT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSharpElectricity), v))
	})
}

// SharpElectricityLTE applies the LTE predicate on the "sharp_electricity" field.
func SharpElectricityLTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSharpElectricity), v))
	})
}

// SharpElectricityIsNil applies the IsNil predicate on the "sharp_electricity" field.
func SharpElectricityIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSharpElectricity)))
	})
}

// SharpElectricityNotNil applies the NotNil predicate on the "sharp_electricity" field.
func SharpElectricityNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSharpElectricity)))
	})
}

// PeakElectricityEQ applies the EQ predicate on the "peak_electricity" field.
func PeakElectricityEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPeakElectricity), v))
	})
}

// PeakElectricityNEQ applies the NEQ predicate on the "peak_electricity" field.
func PeakElectricityNEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPeakElectricity), v))
	})
}

// PeakElectricityIn applies the In predicate on the "peak_electricity" field.
func PeakElectricityIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPeakElectricity), v...))
	})
}

// PeakElectricityNotIn applies the NotIn predicate on the "peak_electricity" field.
func PeakElectricityNotIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPeakElectricity), v...))
	})
}

// PeakElectricityGT applies the GT predicate on the "peak_electricity" field.
func PeakElectricityGT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPeakElectricity), v))
	})
}

// PeakElectricityGTE applies the GTE predicate on the "peak_electricity" field.
func PeakElectricityGTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPeakElectricity), v))
	})
}

// PeakElectricityLT applies the LT predicate on the "peak_electricity" field.
func PeakElectricityLT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPeakElectricity), v))
	})
}

// PeakElectricityLTE applies the LTE predicate on the "peak_electricity" field.
func PeakElectricityLTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPeakElectricity), v))
	})
}

// PeakElectricityIsNil applies the IsNil predicate on the "peak_electricity" field.
func PeakElectricityIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPeakElectricity)))
	})
}

// PeakElectricityNotNil applies the NotNil predicate on the "peak_electricity" field.
func PeakElectricityNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPeakElectricity)))
	})
}

// FlatElectricityEQ applies the EQ predicate on the "flat_electricity" field.
func FlatElectricityEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlatElectricity), v))
	})
}

// FlatElectricityNEQ applies the NEQ predicate on the "flat_electricity" field.
func FlatElectricityNEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlatElectricity), v))
	})
}

// FlatElectricityIn applies the In predicate on the "flat_electricity" field.
func FlatElectricityIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFlatElectricity), v...))
	})
}

// FlatElectricityNotIn applies the NotIn predicate on the "flat_electricity" field.
func FlatElectricityNotIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFlatElectricity), v...))
	})
}

// FlatElectricityGT applies the GT predicate on the "flat_electricity" field.
func FlatElectricityGT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlatElectricity), v))
	})
}

// FlatElectricityGTE applies the GTE predicate on the "flat_electricity" field.
func FlatElectricityGTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlatElectricity), v))
	})
}

// FlatElectricityLT applies the LT predicate on the "flat_electricity" field.
func FlatElectricityLT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlatElectricity), v))
	})
}

// FlatElectricityLTE applies the LTE predicate on the "flat_electricity" field.
func FlatElectricityLTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlatElectricity), v))
	})
}

// FlatElectricityIsNil applies the IsNil predicate on the "flat_electricity" field.
func FlatElectricityIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFlatElectricity)))
	})
}

// FlatElectricityNotNil applies the NotNil predicate on the "flat_electricity" field.
func FlatElectricityNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFlatElectricity)))
	})
}

// ValleyElectricityEQ applies the EQ predicate on the "valley_electricity" field.
func ValleyElectricityEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValleyElectricity), v))
	})
}

// ValleyElectricityNEQ applies the NEQ predicate on the "valley_electricity" field.
func ValleyElectricityNEQ(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValleyElectricity), v))
	})
}

// ValleyElectricityIn applies the In predicate on the "valley_electricity" field.
func ValleyElectricityIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldValleyElectricity), v...))
	})
}

// ValleyElectricityNotIn applies the NotIn predicate on the "valley_electricity" field.
func ValleyElectricityNotIn(vs ...float64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldValleyElectricity), v...))
	})
}

// ValleyElectricityGT applies the GT predicate on the "valley_electricity" field.
func ValleyElectricityGT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValleyElectricity), v))
	})
}

// ValleyElectricityGTE applies the GTE predicate on the "valley_electricity" field.
func ValleyElectricityGTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValleyElectricity), v))
	})
}

// ValleyElectricityLT applies the LT predicate on the "valley_electricity" field.
func ValleyElectricityLT(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValleyElectricity), v))
	})
}

// ValleyElectricityLTE applies the LTE predicate on the "valley_electricity" field.
func ValleyElectricityLTE(v float64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValleyElectricity), v))
	})
}

// ValleyElectricityIsNil applies the IsNil predicate on the "valley_electricity" field.
func ValleyElectricityIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldValleyElectricity)))
	})
}

// ValleyElectricityNotNil applies the NotNil predicate on the "valley_electricity" field.
func ValleyElectricityNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldValleyElectricity)))
	})
}

// StopReasonCodeEQ applies the EQ predicate on the "stop_reason_code" field.
func StopReasonCodeEQ(v int32) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStopReasonCode), v))
	})
}

// StopReasonCodeNEQ applies the NEQ predicate on the "stop_reason_code" field.
func StopReasonCodeNEQ(v int32) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStopReasonCode), v))
	})
}

// StopReasonCodeIn applies the In predicate on the "stop_reason_code" field.
func StopReasonCodeIn(vs ...int32) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStopReasonCode), v...))
	})
}

// StopReasonCodeNotIn applies the NotIn predicate on the "stop_reason_code" field.
func StopReasonCodeNotIn(vs ...int32) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStopReasonCode), v...))
	})
}

// StopReasonCodeGT applies the GT predicate on the "stop_reason_code" field.
func StopReasonCodeGT(v int32) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStopReasonCode), v))
	})
}

// StopReasonCodeGTE applies the GTE predicate on the "stop_reason_code" field.
func StopReasonCodeGTE(v int32) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStopReasonCode), v))
	})
}

// StopReasonCodeLT applies the LT predicate on the "stop_reason_code" field.
func StopReasonCodeLT(v int32) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStopReasonCode), v))
	})
}

// StopReasonCodeLTE applies the LTE predicate on the "stop_reason_code" field.
func StopReasonCodeLTE(v int32) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStopReasonCode), v))
	})
}

// StopReasonCodeIsNil applies the IsNil predicate on the "stop_reason_code" field.
func StopReasonCodeIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStopReasonCode)))
	})
}

// StopReasonCodeNotNil applies the NotNil predicate on the "stop_reason_code" field.
func StopReasonCodeNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStopReasonCode)))
	})
}

// OfflineEQ applies the EQ predicate on the "offline" field.
func OfflineEQ(v bool) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOffline), v))
	})
}

// OfflineNEQ applies the NEQ predicate on the "offline" field.
func OfflineNEQ(v bool) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOffline), v))
	})
}

// PriceSchemeReleaseIDEQ applies the EQ predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceSchemeReleaseID), v))
	})
}

// PriceSchemeReleaseIDNEQ applies the NEQ predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceSchemeReleaseID), v))
	})
}

// PriceSchemeReleaseIDIn applies the In predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPriceSchemeReleaseID), v...))
	})
}

// PriceSchemeReleaseIDNotIn applies the NotIn predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPriceSchemeReleaseID), v...))
	})
}

// PriceSchemeReleaseIDGT applies the GT predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceSchemeReleaseID), v))
	})
}

// PriceSchemeReleaseIDGTE applies the GTE predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceSchemeReleaseID), v))
	})
}

// PriceSchemeReleaseIDLT applies the LT predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceSchemeReleaseID), v))
	})
}

// PriceSchemeReleaseIDLTE applies the LTE predicate on the "price_scheme_release_id" field.
func PriceSchemeReleaseIDLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceSchemeReleaseID), v))
	})
}

// OrderStartTimeEQ applies the EQ predicate on the "order_start_time" field.
func OrderStartTimeEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderStartTime), v))
	})
}

// OrderStartTimeNEQ applies the NEQ predicate on the "order_start_time" field.
func OrderStartTimeNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderStartTime), v))
	})
}

// OrderStartTimeIn applies the In predicate on the "order_start_time" field.
func OrderStartTimeIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderStartTime), v...))
	})
}

// OrderStartTimeNotIn applies the NotIn predicate on the "order_start_time" field.
func OrderStartTimeNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderStartTime), v...))
	})
}

// OrderStartTimeGT applies the GT predicate on the "order_start_time" field.
func OrderStartTimeGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderStartTime), v))
	})
}

// OrderStartTimeGTE applies the GTE predicate on the "order_start_time" field.
func OrderStartTimeGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderStartTime), v))
	})
}

// OrderStartTimeLT applies the LT predicate on the "order_start_time" field.
func OrderStartTimeLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderStartTime), v))
	})
}

// OrderStartTimeLTE applies the LTE predicate on the "order_start_time" field.
func OrderStartTimeLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderStartTime), v))
	})
}

// OrderStartTimeIsNil applies the IsNil predicate on the "order_start_time" field.
func OrderStartTimeIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderStartTime)))
	})
}

// OrderStartTimeNotNil applies the NotNil predicate on the "order_start_time" field.
func OrderStartTimeNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderStartTime)))
	})
}

// OrderFinalTimeEQ applies the EQ predicate on the "order_final_time" field.
func OrderFinalTimeEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderFinalTime), v))
	})
}

// OrderFinalTimeNEQ applies the NEQ predicate on the "order_final_time" field.
func OrderFinalTimeNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderFinalTime), v))
	})
}

// OrderFinalTimeIn applies the In predicate on the "order_final_time" field.
func OrderFinalTimeIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderFinalTime), v...))
	})
}

// OrderFinalTimeNotIn applies the NotIn predicate on the "order_final_time" field.
func OrderFinalTimeNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderFinalTime), v...))
	})
}

// OrderFinalTimeGT applies the GT predicate on the "order_final_time" field.
func OrderFinalTimeGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderFinalTime), v))
	})
}

// OrderFinalTimeGTE applies the GTE predicate on the "order_final_time" field.
func OrderFinalTimeGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderFinalTime), v))
	})
}

// OrderFinalTimeLT applies the LT predicate on the "order_final_time" field.
func OrderFinalTimeLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderFinalTime), v))
	})
}

// OrderFinalTimeLTE applies the LTE predicate on the "order_final_time" field.
func OrderFinalTimeLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderFinalTime), v))
	})
}

// OrderFinalTimeIsNil applies the IsNil predicate on the "order_final_time" field.
func OrderFinalTimeIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderFinalTime)))
	})
}

// OrderFinalTimeNotNil applies the NotNil predicate on the "order_final_time" field.
func OrderFinalTimeNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderFinalTime)))
	})
}

// ChargeStartTimeEQ applies the EQ predicate on the "charge_start_time" field.
func ChargeStartTimeEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeStartTime), v))
	})
}

// ChargeStartTimeNEQ applies the NEQ predicate on the "charge_start_time" field.
func ChargeStartTimeNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeStartTime), v))
	})
}

// ChargeStartTimeIn applies the In predicate on the "charge_start_time" field.
func ChargeStartTimeIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChargeStartTime), v...))
	})
}

// ChargeStartTimeNotIn applies the NotIn predicate on the "charge_start_time" field.
func ChargeStartTimeNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChargeStartTime), v...))
	})
}

// ChargeStartTimeGT applies the GT predicate on the "charge_start_time" field.
func ChargeStartTimeGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargeStartTime), v))
	})
}

// ChargeStartTimeGTE applies the GTE predicate on the "charge_start_time" field.
func ChargeStartTimeGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargeStartTime), v))
	})
}

// ChargeStartTimeLT applies the LT predicate on the "charge_start_time" field.
func ChargeStartTimeLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargeStartTime), v))
	})
}

// ChargeStartTimeLTE applies the LTE predicate on the "charge_start_time" field.
func ChargeStartTimeLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargeStartTime), v))
	})
}

// ChargeStartTimeIsNil applies the IsNil predicate on the "charge_start_time" field.
func ChargeStartTimeIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeStartTime)))
	})
}

// ChargeStartTimeNotNil applies the NotNil predicate on the "charge_start_time" field.
func ChargeStartTimeNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeStartTime)))
	})
}

// ChargeFinalTimeEQ applies the EQ predicate on the "charge_final_time" field.
func ChargeFinalTimeEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeFinalTime), v))
	})
}

// ChargeFinalTimeNEQ applies the NEQ predicate on the "charge_final_time" field.
func ChargeFinalTimeNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeFinalTime), v))
	})
}

// ChargeFinalTimeIn applies the In predicate on the "charge_final_time" field.
func ChargeFinalTimeIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChargeFinalTime), v...))
	})
}

// ChargeFinalTimeNotIn applies the NotIn predicate on the "charge_final_time" field.
func ChargeFinalTimeNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChargeFinalTime), v...))
	})
}

// ChargeFinalTimeGT applies the GT predicate on the "charge_final_time" field.
func ChargeFinalTimeGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargeFinalTime), v))
	})
}

// ChargeFinalTimeGTE applies the GTE predicate on the "charge_final_time" field.
func ChargeFinalTimeGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargeFinalTime), v))
	})
}

// ChargeFinalTimeLT applies the LT predicate on the "charge_final_time" field.
func ChargeFinalTimeLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargeFinalTime), v))
	})
}

// ChargeFinalTimeLTE applies the LTE predicate on the "charge_final_time" field.
func ChargeFinalTimeLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargeFinalTime), v))
	})
}

// ChargeFinalTimeIsNil applies the IsNil predicate on the "charge_final_time" field.
func ChargeFinalTimeIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeFinalTime)))
	})
}

// ChargeFinalTimeNotNil applies the NotNil predicate on the "charge_final_time" field.
func ChargeFinalTimeNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeFinalTime)))
	})
}

// IntellectIDEQ applies the EQ predicate on the "intellect_id" field.
func IntellectIDEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntellectID), v))
	})
}

// IntellectIDNEQ applies the NEQ predicate on the "intellect_id" field.
func IntellectIDNEQ(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntellectID), v))
	})
}

// IntellectIDIn applies the In predicate on the "intellect_id" field.
func IntellectIDIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIntellectID), v...))
	})
}

// IntellectIDNotIn applies the NotIn predicate on the "intellect_id" field.
func IntellectIDNotIn(vs ...int64) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIntellectID), v...))
	})
}

// IntellectIDGT applies the GT predicate on the "intellect_id" field.
func IntellectIDGT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntellectID), v))
	})
}

// IntellectIDGTE applies the GTE predicate on the "intellect_id" field.
func IntellectIDGTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntellectID), v))
	})
}

// IntellectIDLT applies the LT predicate on the "intellect_id" field.
func IntellectIDLT(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntellectID), v))
	})
}

// IntellectIDLTE applies the LTE predicate on the "intellect_id" field.
func IntellectIDLTE(v int64) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntellectID), v))
	})
}

// IntellectIDIsNil applies the IsNil predicate on the "intellect_id" field.
func IntellectIDIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIntellectID)))
	})
}

// IntellectIDNotNil applies the NotNil predicate on the "intellect_id" field.
func IntellectIDNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIntellectID)))
	})
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStationID), vc))
	})
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStationID), vc))
	})
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStationID), v...))
	})
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStationID), v...))
	})
}

// StationIDGT applies the GT predicate on the "station_id" field.
func StationIDGT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStationID), vc))
	})
}

// StationIDGTE applies the GTE predicate on the "station_id" field.
func StationIDGTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStationID), vc))
	})
}

// StationIDLT applies the LT predicate on the "station_id" field.
func StationIDLT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStationID), vc))
	})
}

// StationIDLTE applies the LTE predicate on the "station_id" field.
func StationIDLTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStationID), vc))
	})
}

// StationIDIsNil applies the IsNil predicate on the "station_id" field.
func StationIDIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStationID)))
	})
}

// StationIDNotNil applies the NotNil predicate on the "station_id" field.
func StationIDNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStationID)))
	})
}

// OperatorIDEQ applies the EQ predicate on the "operator_id" field.
func OperatorIDEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDNEQ applies the NEQ predicate on the "operator_id" field.
func OperatorIDNEQ(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDIn applies the In predicate on the "operator_id" field.
func OperatorIDIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOperatorID), v...))
	})
}

// OperatorIDNotIn applies the NotIn predicate on the "operator_id" field.
func OperatorIDNotIn(vs ...datasource.UUID) predicate.OrderInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOperatorID), v...))
	})
}

// OperatorIDGT applies the GT predicate on the "operator_id" field.
func OperatorIDGT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDGTE applies the GTE predicate on the "operator_id" field.
func OperatorIDGTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDLT applies the LT predicate on the "operator_id" field.
func OperatorIDLT(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDLTE applies the LTE predicate on the "operator_id" field.
func OperatorIDLTE(v datasource.UUID) predicate.OrderInfo {
	vc := uint64(v)
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDIsNil applies the IsNil predicate on the "operator_id" field.
func OperatorIDIsNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperatorID)))
	})
}

// OperatorIDNotNil applies the NotNil predicate on the "operator_id" field.
func OperatorIDNotNil() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperatorID)))
	})
}

// HasConnector applies the HasEdge predicate on the "connector" edge.
func HasConnector() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConnectorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectorTable, ConnectorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectorWith applies the HasEdge predicate on the "connector" edge with a given conditions (other predicates).
func HasConnectorWith(preds ...predicate.Connector) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConnectorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectorTable, ConnectorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderEvent applies the HasEdge predicate on the "order_event" edge.
func HasOrderEvent() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderEventTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderEventTable, OrderEventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderEventWith applies the HasEdge predicate on the "order_event" edge with a given conditions (other predicates).
func HasOrderEventWith(preds ...predicate.OrderEvent) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderEventInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderEventTable, OrderEventColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSmartChargingEffect applies the HasEdge predicate on the "smart_charging_effect" edge.
func HasSmartChargingEffect() predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmartChargingEffectTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SmartChargingEffectTable, SmartChargingEffectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmartChargingEffectWith applies the HasEdge predicate on the "smart_charging_effect" edge with a given conditions (other predicates).
func HasSmartChargingEffectWith(preds ...predicate.SmartChargingEffect) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmartChargingEffectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SmartChargingEffectTable, SmartChargingEffectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderInfo) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderInfo) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderInfo) predicate.OrderInfo {
	return predicate.OrderInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
