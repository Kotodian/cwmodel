// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/appmoduleinfo"
	"github.com/Kotodian/ent-practice/ent/predicate"
)

// AppModuleInfoUpdate is the builder for updating AppModuleInfo entities.
type AppModuleInfoUpdate struct {
	config
	hooks    []Hook
	mutation *AppModuleInfoMutation
}

// Where appends a list predicates to the AppModuleInfoUpdate builder.
func (amiu *AppModuleInfoUpdate) Where(ps ...predicate.AppModuleInfo) *AppModuleInfoUpdate {
	amiu.mutation.Where(ps...)
	return amiu
}

// SetName sets the "name" field.
func (amiu *AppModuleInfoUpdate) SetName(s string) *AppModuleInfoUpdate {
	amiu.mutation.SetName(s)
	return amiu
}

// SetDesc sets the "desc" field.
func (amiu *AppModuleInfoUpdate) SetDesc(s string) *AppModuleInfoUpdate {
	amiu.mutation.SetDesc(s)
	return amiu
}

// Mutation returns the AppModuleInfoMutation object of the builder.
func (amiu *AppModuleInfoUpdate) Mutation() *AppModuleInfoMutation {
	return amiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amiu *AppModuleInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(amiu.hooks) == 0 {
		affected, err = amiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppModuleInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amiu.mutation = mutation
			affected, err = amiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amiu.hooks) - 1; i >= 0; i-- {
			if amiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = amiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amiu *AppModuleInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := amiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amiu *AppModuleInfoUpdate) Exec(ctx context.Context) error {
	_, err := amiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amiu *AppModuleInfoUpdate) ExecX(ctx context.Context) {
	if err := amiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amiu *AppModuleInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appmoduleinfo.Table,
			Columns: appmoduleinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appmoduleinfo.FieldID,
			},
		},
	}
	if ps := amiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appmoduleinfo.FieldName,
		})
	}
	if value, ok := amiu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appmoduleinfo.FieldDesc,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appmoduleinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppModuleInfoUpdateOne is the builder for updating a single AppModuleInfo entity.
type AppModuleInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppModuleInfoMutation
}

// SetName sets the "name" field.
func (amiuo *AppModuleInfoUpdateOne) SetName(s string) *AppModuleInfoUpdateOne {
	amiuo.mutation.SetName(s)
	return amiuo
}

// SetDesc sets the "desc" field.
func (amiuo *AppModuleInfoUpdateOne) SetDesc(s string) *AppModuleInfoUpdateOne {
	amiuo.mutation.SetDesc(s)
	return amiuo
}

// Mutation returns the AppModuleInfoMutation object of the builder.
func (amiuo *AppModuleInfoUpdateOne) Mutation() *AppModuleInfoMutation {
	return amiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amiuo *AppModuleInfoUpdateOne) Select(field string, fields ...string) *AppModuleInfoUpdateOne {
	amiuo.fields = append([]string{field}, fields...)
	return amiuo
}

// Save executes the query and returns the updated AppModuleInfo entity.
func (amiuo *AppModuleInfoUpdateOne) Save(ctx context.Context) (*AppModuleInfo, error) {
	var (
		err  error
		node *AppModuleInfo
	)
	if len(amiuo.hooks) == 0 {
		node, err = amiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppModuleInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amiuo.mutation = mutation
			node, err = amiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amiuo.hooks) - 1; i >= 0; i-- {
			if amiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = amiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amiuo *AppModuleInfoUpdateOne) SaveX(ctx context.Context) *AppModuleInfo {
	node, err := amiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amiuo *AppModuleInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := amiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amiuo *AppModuleInfoUpdateOne) ExecX(ctx context.Context) {
	if err := amiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amiuo *AppModuleInfoUpdateOne) sqlSave(ctx context.Context) (_node *AppModuleInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appmoduleinfo.Table,
			Columns: appmoduleinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appmoduleinfo.FieldID,
			},
		},
	}
	id, ok := amiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppModuleInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appmoduleinfo.FieldID)
		for _, f := range fields {
			if !appmoduleinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appmoduleinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appmoduleinfo.FieldName,
		})
	}
	if value, ok := amiuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appmoduleinfo.FieldDesc,
		})
	}
	_node = &AppModuleInfo{config: amiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appmoduleinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
