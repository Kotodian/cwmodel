// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/connector"
	"github.com/Kotodian/ent-practice/ent/enums"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentinfo"
	"github.com/Kotodian/ent-practice/ent/evse"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentUpdate is the builder for updating Equipment entities.
type EquipmentUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentMutation
}

// Where appends a list predicates to the EquipmentUpdate builder.
func (eu *EquipmentUpdate) Where(ps ...predicate.Equipment) *EquipmentUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetSn sets the "sn" field.
func (eu *EquipmentUpdate) SetSn(s string) *EquipmentUpdate {
	eu.mutation.SetSn(s)
	return eu
}

// SetCategory sets the "category" field.
func (eu *EquipmentUpdate) SetCategory(ec enums.EquipmentCategory) *EquipmentUpdate {
	eu.mutation.SetCategory(ec)
	return eu
}

// SetOperatorID sets the "operator_id" field.
func (eu *EquipmentUpdate) SetOperatorID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.ResetOperatorID()
	eu.mutation.SetOperatorID(d)
	return eu
}

// AddOperatorID adds d to the "operator_id" field.
func (eu *EquipmentUpdate) AddOperatorID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddOperatorID(d)
	return eu
}

// SetStationID sets the "station_id" field.
func (eu *EquipmentUpdate) SetStationID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.ResetStationID()
	eu.mutation.SetStationID(d)
	return eu
}

// AddStationID adds d to the "station_id" field.
func (eu *EquipmentUpdate) AddStationID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddStationID(d)
	return eu
}

// SetEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID.
func (eu *EquipmentUpdate) SetEquipmentInfoID(id datasource.UUID) *EquipmentUpdate {
	eu.mutation.SetEquipmentInfoID(id)
	return eu
}

// SetNillableEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableEquipmentInfoID(id *datasource.UUID) *EquipmentUpdate {
	if id != nil {
		eu = eu.SetEquipmentInfoID(*id)
	}
	return eu
}

// SetEquipmentInfo sets the "equipment_info" edge to the EquipmentInfo entity.
func (eu *EquipmentUpdate) SetEquipmentInfo(e *EquipmentInfo) *EquipmentUpdate {
	return eu.SetEquipmentInfoID(e.ID)
}

// AddEvseIDs adds the "evses" edge to the Evse entity by IDs.
func (eu *EquipmentUpdate) AddEvseIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddEvseIDs(ids...)
	return eu
}

// AddEvses adds the "evses" edges to the Evse entity.
func (eu *EquipmentUpdate) AddEvses(e ...*Evse) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEvseIDs(ids...)
}

// AddConnectorIDs adds the "connectors" edge to the Connector entity by IDs.
func (eu *EquipmentUpdate) AddConnectorIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddConnectorIDs(ids...)
	return eu
}

// AddConnectors adds the "connectors" edges to the Connector entity.
func (eu *EquipmentUpdate) AddConnectors(c ...*Connector) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddConnectorIDs(ids...)
}

// Mutation returns the EquipmentMutation object of the builder.
func (eu *EquipmentUpdate) Mutation() *EquipmentMutation {
	return eu.mutation
}

// ClearEquipmentInfo clears the "equipment_info" edge to the EquipmentInfo entity.
func (eu *EquipmentUpdate) ClearEquipmentInfo() *EquipmentUpdate {
	eu.mutation.ClearEquipmentInfo()
	return eu
}

// ClearEvses clears all "evses" edges to the Evse entity.
func (eu *EquipmentUpdate) ClearEvses() *EquipmentUpdate {
	eu.mutation.ClearEvses()
	return eu
}

// RemoveEvseIDs removes the "evses" edge to Evse entities by IDs.
func (eu *EquipmentUpdate) RemoveEvseIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveEvseIDs(ids...)
	return eu
}

// RemoveEvses removes "evses" edges to Evse entities.
func (eu *EquipmentUpdate) RemoveEvses(e ...*Evse) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEvseIDs(ids...)
}

// ClearConnectors clears all "connectors" edges to the Connector entity.
func (eu *EquipmentUpdate) ClearConnectors() *EquipmentUpdate {
	eu.mutation.ClearConnectors()
	return eu
}

// RemoveConnectorIDs removes the "connectors" edge to Connector entities by IDs.
func (eu *EquipmentUpdate) RemoveConnectorIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveConnectorIDs(ids...)
	return eu
}

// RemoveConnectors removes "connectors" edges to Connector entities.
func (eu *EquipmentUpdate) RemoveConnectors(c ...*Connector) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveConnectorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EquipmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EquipmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EquipmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EquipmentUpdate) check() error {
	if v, ok := eu.mutation.Sn(); ok {
		if err := equipment.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Equipment.sn": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Category(); ok {
		if err := equipment.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Equipment.category": %w`, err)}
		}
	}
	return nil
}

func (eu *EquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipment.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldSn,
		})
	}
	if value, ok := eu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: equipment.FieldCategory,
		})
	}
	if value, ok := eu.mutation.OperatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := eu.mutation.AddedOperatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := eu.mutation.StationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if value, ok := eu.mutation.AddedStationID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if eu.mutation.EquipmentInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EvsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvsesTable,
			Columns: []string{equipment.EvsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEvsesIDs(); len(nodes) > 0 && !eu.mutation.EvsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvsesTable,
			Columns: []string{equipment.EvsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EvsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvsesTable,
			Columns: []string{equipment.EvsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorsTable,
			Columns: []string{equipment.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedConnectorsIDs(); len(nodes) > 0 && !eu.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorsTable,
			Columns: []string{equipment.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ConnectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorsTable,
			Columns: []string{equipment.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EquipmentUpdateOne is the builder for updating a single Equipment entity.
type EquipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentMutation
}

// SetSn sets the "sn" field.
func (euo *EquipmentUpdateOne) SetSn(s string) *EquipmentUpdateOne {
	euo.mutation.SetSn(s)
	return euo
}

// SetCategory sets the "category" field.
func (euo *EquipmentUpdateOne) SetCategory(ec enums.EquipmentCategory) *EquipmentUpdateOne {
	euo.mutation.SetCategory(ec)
	return euo
}

// SetOperatorID sets the "operator_id" field.
func (euo *EquipmentUpdateOne) SetOperatorID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.ResetOperatorID()
	euo.mutation.SetOperatorID(d)
	return euo
}

// AddOperatorID adds d to the "operator_id" field.
func (euo *EquipmentUpdateOne) AddOperatorID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddOperatorID(d)
	return euo
}

// SetStationID sets the "station_id" field.
func (euo *EquipmentUpdateOne) SetStationID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.ResetStationID()
	euo.mutation.SetStationID(d)
	return euo
}

// AddStationID adds d to the "station_id" field.
func (euo *EquipmentUpdateOne) AddStationID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddStationID(d)
	return euo
}

// SetEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID.
func (euo *EquipmentUpdateOne) SetEquipmentInfoID(id datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.SetEquipmentInfoID(id)
	return euo
}

// SetNillableEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableEquipmentInfoID(id *datasource.UUID) *EquipmentUpdateOne {
	if id != nil {
		euo = euo.SetEquipmentInfoID(*id)
	}
	return euo
}

// SetEquipmentInfo sets the "equipment_info" edge to the EquipmentInfo entity.
func (euo *EquipmentUpdateOne) SetEquipmentInfo(e *EquipmentInfo) *EquipmentUpdateOne {
	return euo.SetEquipmentInfoID(e.ID)
}

// AddEvseIDs adds the "evses" edge to the Evse entity by IDs.
func (euo *EquipmentUpdateOne) AddEvseIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddEvseIDs(ids...)
	return euo
}

// AddEvses adds the "evses" edges to the Evse entity.
func (euo *EquipmentUpdateOne) AddEvses(e ...*Evse) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEvseIDs(ids...)
}

// AddConnectorIDs adds the "connectors" edge to the Connector entity by IDs.
func (euo *EquipmentUpdateOne) AddConnectorIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddConnectorIDs(ids...)
	return euo
}

// AddConnectors adds the "connectors" edges to the Connector entity.
func (euo *EquipmentUpdateOne) AddConnectors(c ...*Connector) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddConnectorIDs(ids...)
}

// Mutation returns the EquipmentMutation object of the builder.
func (euo *EquipmentUpdateOne) Mutation() *EquipmentMutation {
	return euo.mutation
}

// ClearEquipmentInfo clears the "equipment_info" edge to the EquipmentInfo entity.
func (euo *EquipmentUpdateOne) ClearEquipmentInfo() *EquipmentUpdateOne {
	euo.mutation.ClearEquipmentInfo()
	return euo
}

// ClearEvses clears all "evses" edges to the Evse entity.
func (euo *EquipmentUpdateOne) ClearEvses() *EquipmentUpdateOne {
	euo.mutation.ClearEvses()
	return euo
}

// RemoveEvseIDs removes the "evses" edge to Evse entities by IDs.
func (euo *EquipmentUpdateOne) RemoveEvseIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveEvseIDs(ids...)
	return euo
}

// RemoveEvses removes "evses" edges to Evse entities.
func (euo *EquipmentUpdateOne) RemoveEvses(e ...*Evse) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEvseIDs(ids...)
}

// ClearConnectors clears all "connectors" edges to the Connector entity.
func (euo *EquipmentUpdateOne) ClearConnectors() *EquipmentUpdateOne {
	euo.mutation.ClearConnectors()
	return euo
}

// RemoveConnectorIDs removes the "connectors" edge to Connector entities by IDs.
func (euo *EquipmentUpdateOne) RemoveConnectorIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveConnectorIDs(ids...)
	return euo
}

// RemoveConnectors removes "connectors" edges to Connector entities.
func (euo *EquipmentUpdateOne) RemoveConnectors(c ...*Connector) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveConnectorIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EquipmentUpdateOne) Select(field string, fields ...string) *EquipmentUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Equipment entity.
func (euo *EquipmentUpdateOne) Save(ctx context.Context) (*Equipment, error) {
	var (
		err  error
		node *Equipment
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EquipmentUpdateOne) SaveX(ctx context.Context) *Equipment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EquipmentUpdateOne) check() error {
	if v, ok := euo.mutation.Sn(); ok {
		if err := equipment.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Equipment.sn": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Category(); ok {
		if err := equipment.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Equipment.category": %w`, err)}
		}
	}
	return nil
}

func (euo *EquipmentUpdateOne) sqlSave(ctx context.Context) (_node *Equipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Equipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipment.FieldID)
		for _, f := range fields {
			if !equipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != equipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldSn,
		})
	}
	if value, ok := euo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: equipment.FieldCategory,
		})
	}
	if value, ok := euo.mutation.OperatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := euo.mutation.AddedOperatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := euo.mutation.StationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if value, ok := euo.mutation.AddedStationID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if euo.mutation.EquipmentInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EvsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvsesTable,
			Columns: []string{equipment.EvsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEvsesIDs(); len(nodes) > 0 && !euo.mutation.EvsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvsesTable,
			Columns: []string{equipment.EvsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EvsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvsesTable,
			Columns: []string{equipment.EvsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorsTable,
			Columns: []string{equipment.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedConnectorsIDs(); len(nodes) > 0 && !euo.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorsTable,
			Columns: []string{equipment.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ConnectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorsTable,
			Columns: []string{equipment.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Equipment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
