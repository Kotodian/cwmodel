// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/connector"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentalarm"
	"github.com/Kotodian/ent-practice/ent/equipmentfirmwareeffect"
	"github.com/Kotodian/ent-practice/ent/equipmentinfo"
	"github.com/Kotodian/ent-practice/ent/equipmentiot"
	"github.com/Kotodian/ent-practice/ent/equipmentlog"
	"github.com/Kotodian/ent-practice/ent/evse"
	"github.com/Kotodian/ent-practice/ent/orderinfo"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/ent-practice/ent/reservation"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentUpdate is the builder for updating Equipment entities.
type EquipmentUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentMutation
}

// Where appends a list predicates to the EquipmentUpdate builder.
func (eu *EquipmentUpdate) Where(ps ...predicate.Equipment) *EquipmentUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetVersion sets the "version" field.
func (eu *EquipmentUpdate) SetVersion(i int64) *EquipmentUpdate {
	eu.mutation.ResetVersion()
	eu.mutation.SetVersion(i)
	return eu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableVersion(i *int64) *EquipmentUpdate {
	if i != nil {
		eu.SetVersion(*i)
	}
	return eu
}

// AddVersion adds i to the "version" field.
func (eu *EquipmentUpdate) AddVersion(i int64) *EquipmentUpdate {
	eu.mutation.AddVersion(i)
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EquipmentUpdate) SetUpdatedBy(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.ResetUpdatedBy()
	eu.mutation.SetUpdatedBy(d)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableUpdatedBy(d *datasource.UUID) *EquipmentUpdate {
	if d != nil {
		eu.SetUpdatedBy(*d)
	}
	return eu
}

// AddUpdatedBy adds d to the "updated_by" field.
func (eu *EquipmentUpdate) AddUpdatedBy(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddUpdatedBy(d)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EquipmentUpdate) SetUpdatedAt(i int64) *EquipmentUpdate {
	eu.mutation.ResetUpdatedAt()
	eu.mutation.SetUpdatedAt(i)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableUpdatedAt(i *int64) *EquipmentUpdate {
	if i != nil {
		eu.SetUpdatedAt(*i)
	}
	return eu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (eu *EquipmentUpdate) AddUpdatedAt(i int64) *EquipmentUpdate {
	eu.mutation.AddUpdatedAt(i)
	return eu
}

// SetSn sets the "sn" field.
func (eu *EquipmentUpdate) SetSn(s string) *EquipmentUpdate {
	eu.mutation.SetSn(s)
	return eu
}

// SetOperatorID sets the "operator_id" field.
func (eu *EquipmentUpdate) SetOperatorID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.ResetOperatorID()
	eu.mutation.SetOperatorID(d)
	return eu
}

// AddOperatorID adds d to the "operator_id" field.
func (eu *EquipmentUpdate) AddOperatorID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddOperatorID(d)
	return eu
}

// SetStationID sets the "station_id" field.
func (eu *EquipmentUpdate) SetStationID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.ResetStationID()
	eu.mutation.SetStationID(d)
	return eu
}

// AddStationID adds d to the "station_id" field.
func (eu *EquipmentUpdate) AddStationID(d datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddStationID(d)
	return eu
}

// SetEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID.
func (eu *EquipmentUpdate) SetEquipmentInfoID(id datasource.UUID) *EquipmentUpdate {
	eu.mutation.SetEquipmentInfoID(id)
	return eu
}

// SetNillableEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableEquipmentInfoID(id *datasource.UUID) *EquipmentUpdate {
	if id != nil {
		eu = eu.SetEquipmentInfoID(*id)
	}
	return eu
}

// SetEquipmentInfo sets the "equipment_info" edge to the EquipmentInfo entity.
func (eu *EquipmentUpdate) SetEquipmentInfo(e *EquipmentInfo) *EquipmentUpdate {
	return eu.SetEquipmentInfoID(e.ID)
}

// AddEvseIDs adds the "evse" edge to the Evse entity by IDs.
func (eu *EquipmentUpdate) AddEvseIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddEvseIDs(ids...)
	return eu
}

// AddEvse adds the "evse" edges to the Evse entity.
func (eu *EquipmentUpdate) AddEvse(e ...*Evse) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEvseIDs(ids...)
}

// AddConnectorIDs adds the "connector" edge to the Connector entity by IDs.
func (eu *EquipmentUpdate) AddConnectorIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddConnectorIDs(ids...)
	return eu
}

// AddConnector adds the "connector" edges to the Connector entity.
func (eu *EquipmentUpdate) AddConnector(c ...*Connector) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddConnectorIDs(ids...)
}

// AddEquipmentAlarmIDs adds the "equipment_alarm" edge to the EquipmentAlarm entity by IDs.
func (eu *EquipmentUpdate) AddEquipmentAlarmIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddEquipmentAlarmIDs(ids...)
	return eu
}

// AddEquipmentAlarm adds the "equipment_alarm" edges to the EquipmentAlarm entity.
func (eu *EquipmentUpdate) AddEquipmentAlarm(e ...*EquipmentAlarm) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEquipmentAlarmIDs(ids...)
}

// SetEquipmentIotID sets the "equipment_iot" edge to the EquipmentIot entity by ID.
func (eu *EquipmentUpdate) SetEquipmentIotID(id datasource.UUID) *EquipmentUpdate {
	eu.mutation.SetEquipmentIotID(id)
	return eu
}

// SetNillableEquipmentIotID sets the "equipment_iot" edge to the EquipmentIot entity by ID if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableEquipmentIotID(id *datasource.UUID) *EquipmentUpdate {
	if id != nil {
		eu = eu.SetEquipmentIotID(*id)
	}
	return eu
}

// SetEquipmentIot sets the "equipment_iot" edge to the EquipmentIot entity.
func (eu *EquipmentUpdate) SetEquipmentIot(e *EquipmentIot) *EquipmentUpdate {
	return eu.SetEquipmentIotID(e.ID)
}

// AddEquipmentFirmwareEffectIDs adds the "equipment_firmware_effect" edge to the EquipmentFirmwareEffect entity by IDs.
func (eu *EquipmentUpdate) AddEquipmentFirmwareEffectIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddEquipmentFirmwareEffectIDs(ids...)
	return eu
}

// AddEquipmentFirmwareEffect adds the "equipment_firmware_effect" edges to the EquipmentFirmwareEffect entity.
func (eu *EquipmentUpdate) AddEquipmentFirmwareEffect(e ...*EquipmentFirmwareEffect) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEquipmentFirmwareEffectIDs(ids...)
}

// AddOrderInfoIDs adds the "order_info" edge to the OrderInfo entity by IDs.
func (eu *EquipmentUpdate) AddOrderInfoIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddOrderInfoIDs(ids...)
	return eu
}

// AddOrderInfo adds the "order_info" edges to the OrderInfo entity.
func (eu *EquipmentUpdate) AddOrderInfo(o ...*OrderInfo) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOrderInfoIDs(ids...)
}

// AddReservationIDs adds the "reservation" edge to the Reservation entity by IDs.
func (eu *EquipmentUpdate) AddReservationIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddReservationIDs(ids...)
	return eu
}

// AddReservation adds the "reservation" edges to the Reservation entity.
func (eu *EquipmentUpdate) AddReservation(r ...*Reservation) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddReservationIDs(ids...)
}

// AddEquipmentLogIDs adds the "equipment_log" edge to the EquipmentLog entity by IDs.
func (eu *EquipmentUpdate) AddEquipmentLogIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.AddEquipmentLogIDs(ids...)
	return eu
}

// AddEquipmentLog adds the "equipment_log" edges to the EquipmentLog entity.
func (eu *EquipmentUpdate) AddEquipmentLog(e ...*EquipmentLog) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEquipmentLogIDs(ids...)
}

// Mutation returns the EquipmentMutation object of the builder.
func (eu *EquipmentUpdate) Mutation() *EquipmentMutation {
	return eu.mutation
}

// ClearEquipmentInfo clears the "equipment_info" edge to the EquipmentInfo entity.
func (eu *EquipmentUpdate) ClearEquipmentInfo() *EquipmentUpdate {
	eu.mutation.ClearEquipmentInfo()
	return eu
}

// ClearEvse clears all "evse" edges to the Evse entity.
func (eu *EquipmentUpdate) ClearEvse() *EquipmentUpdate {
	eu.mutation.ClearEvse()
	return eu
}

// RemoveEvseIDs removes the "evse" edge to Evse entities by IDs.
func (eu *EquipmentUpdate) RemoveEvseIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveEvseIDs(ids...)
	return eu
}

// RemoveEvse removes "evse" edges to Evse entities.
func (eu *EquipmentUpdate) RemoveEvse(e ...*Evse) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEvseIDs(ids...)
}

// ClearConnector clears all "connector" edges to the Connector entity.
func (eu *EquipmentUpdate) ClearConnector() *EquipmentUpdate {
	eu.mutation.ClearConnector()
	return eu
}

// RemoveConnectorIDs removes the "connector" edge to Connector entities by IDs.
func (eu *EquipmentUpdate) RemoveConnectorIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveConnectorIDs(ids...)
	return eu
}

// RemoveConnector removes "connector" edges to Connector entities.
func (eu *EquipmentUpdate) RemoveConnector(c ...*Connector) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveConnectorIDs(ids...)
}

// ClearEquipmentAlarm clears all "equipment_alarm" edges to the EquipmentAlarm entity.
func (eu *EquipmentUpdate) ClearEquipmentAlarm() *EquipmentUpdate {
	eu.mutation.ClearEquipmentAlarm()
	return eu
}

// RemoveEquipmentAlarmIDs removes the "equipment_alarm" edge to EquipmentAlarm entities by IDs.
func (eu *EquipmentUpdate) RemoveEquipmentAlarmIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveEquipmentAlarmIDs(ids...)
	return eu
}

// RemoveEquipmentAlarm removes "equipment_alarm" edges to EquipmentAlarm entities.
func (eu *EquipmentUpdate) RemoveEquipmentAlarm(e ...*EquipmentAlarm) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEquipmentAlarmIDs(ids...)
}

// ClearEquipmentIot clears the "equipment_iot" edge to the EquipmentIot entity.
func (eu *EquipmentUpdate) ClearEquipmentIot() *EquipmentUpdate {
	eu.mutation.ClearEquipmentIot()
	return eu
}

// ClearEquipmentFirmwareEffect clears all "equipment_firmware_effect" edges to the EquipmentFirmwareEffect entity.
func (eu *EquipmentUpdate) ClearEquipmentFirmwareEffect() *EquipmentUpdate {
	eu.mutation.ClearEquipmentFirmwareEffect()
	return eu
}

// RemoveEquipmentFirmwareEffectIDs removes the "equipment_firmware_effect" edge to EquipmentFirmwareEffect entities by IDs.
func (eu *EquipmentUpdate) RemoveEquipmentFirmwareEffectIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveEquipmentFirmwareEffectIDs(ids...)
	return eu
}

// RemoveEquipmentFirmwareEffect removes "equipment_firmware_effect" edges to EquipmentFirmwareEffect entities.
func (eu *EquipmentUpdate) RemoveEquipmentFirmwareEffect(e ...*EquipmentFirmwareEffect) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEquipmentFirmwareEffectIDs(ids...)
}

// ClearOrderInfo clears all "order_info" edges to the OrderInfo entity.
func (eu *EquipmentUpdate) ClearOrderInfo() *EquipmentUpdate {
	eu.mutation.ClearOrderInfo()
	return eu
}

// RemoveOrderInfoIDs removes the "order_info" edge to OrderInfo entities by IDs.
func (eu *EquipmentUpdate) RemoveOrderInfoIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveOrderInfoIDs(ids...)
	return eu
}

// RemoveOrderInfo removes "order_info" edges to OrderInfo entities.
func (eu *EquipmentUpdate) RemoveOrderInfo(o ...*OrderInfo) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOrderInfoIDs(ids...)
}

// ClearReservation clears all "reservation" edges to the Reservation entity.
func (eu *EquipmentUpdate) ClearReservation() *EquipmentUpdate {
	eu.mutation.ClearReservation()
	return eu
}

// RemoveReservationIDs removes the "reservation" edge to Reservation entities by IDs.
func (eu *EquipmentUpdate) RemoveReservationIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveReservationIDs(ids...)
	return eu
}

// RemoveReservation removes "reservation" edges to Reservation entities.
func (eu *EquipmentUpdate) RemoveReservation(r ...*Reservation) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveReservationIDs(ids...)
}

// ClearEquipmentLog clears all "equipment_log" edges to the EquipmentLog entity.
func (eu *EquipmentUpdate) ClearEquipmentLog() *EquipmentUpdate {
	eu.mutation.ClearEquipmentLog()
	return eu
}

// RemoveEquipmentLogIDs removes the "equipment_log" edge to EquipmentLog entities by IDs.
func (eu *EquipmentUpdate) RemoveEquipmentLogIDs(ids ...datasource.UUID) *EquipmentUpdate {
	eu.mutation.RemoveEquipmentLogIDs(ids...)
	return eu
}

// RemoveEquipmentLog removes "equipment_log" edges to EquipmentLog entities.
func (eu *EquipmentUpdate) RemoveEquipmentLog(e ...*EquipmentLog) *EquipmentUpdate {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEquipmentLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EquipmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EquipmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EquipmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EquipmentUpdate) check() error {
	if v, ok := eu.mutation.Sn(); ok {
		if err := equipment.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Equipment.sn": %w`, err)}
		}
	}
	return nil
}

func (eu *EquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipment.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldVersion,
		})
	}
	if value, ok := eu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldVersion,
		})
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldUpdatedBy,
		})
	}
	if value, ok := eu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldUpdatedBy,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldSn,
		})
	}
	if value, ok := eu.mutation.OperatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := eu.mutation.AddedOperatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := eu.mutation.StationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if value, ok := eu.mutation.AddedStationID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if eu.mutation.EquipmentInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EvseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvseTable,
			Columns: []string{equipment.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEvseIDs(); len(nodes) > 0 && !eu.mutation.EvseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvseTable,
			Columns: []string{equipment.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EvseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvseTable,
			Columns: []string{equipment.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorTable,
			Columns: []string{equipment.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedConnectorIDs(); len(nodes) > 0 && !eu.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorTable,
			Columns: []string{equipment.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorTable,
			Columns: []string{equipment.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EquipmentAlarmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentAlarmTable,
			Columns: []string{equipment.EquipmentAlarmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentalarm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEquipmentAlarmIDs(); len(nodes) > 0 && !eu.mutation.EquipmentAlarmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentAlarmTable,
			Columns: []string{equipment.EquipmentAlarmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentalarm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentAlarmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentAlarmTable,
			Columns: []string{equipment.EquipmentAlarmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentalarm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EquipmentIotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentIotTable,
			Columns: []string{equipment.EquipmentIotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentiot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentIotIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentIotTable,
			Columns: []string{equipment.EquipmentIotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentiot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EquipmentFirmwareEffectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentFirmwareEffectTable,
			Columns: []string{equipment.EquipmentFirmwareEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentfirmwareeffect.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEquipmentFirmwareEffectIDs(); len(nodes) > 0 && !eu.mutation.EquipmentFirmwareEffectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentFirmwareEffectTable,
			Columns: []string{equipment.EquipmentFirmwareEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentfirmwareeffect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentFirmwareEffectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentFirmwareEffectTable,
			Columns: []string{equipment.EquipmentFirmwareEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentfirmwareeffect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderInfoTable,
			Columns: []string{equipment.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOrderInfoIDs(); len(nodes) > 0 && !eu.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderInfoTable,
			Columns: []string{equipment.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderInfoTable,
			Columns: []string{equipment.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ReservationTable,
			Columns: []string{equipment.ReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reservation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedReservationIDs(); len(nodes) > 0 && !eu.mutation.ReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ReservationTable,
			Columns: []string{equipment.ReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ReservationTable,
			Columns: []string{equipment.ReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EquipmentLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentLogTable,
			Columns: []string{equipment.EquipmentLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEquipmentLogIDs(); len(nodes) > 0 && !eu.mutation.EquipmentLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentLogTable,
			Columns: []string{equipment.EquipmentLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentLogTable,
			Columns: []string{equipment.EquipmentLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EquipmentUpdateOne is the builder for updating a single Equipment entity.
type EquipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentMutation
}

// SetVersion sets the "version" field.
func (euo *EquipmentUpdateOne) SetVersion(i int64) *EquipmentUpdateOne {
	euo.mutation.ResetVersion()
	euo.mutation.SetVersion(i)
	return euo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableVersion(i *int64) *EquipmentUpdateOne {
	if i != nil {
		euo.SetVersion(*i)
	}
	return euo
}

// AddVersion adds i to the "version" field.
func (euo *EquipmentUpdateOne) AddVersion(i int64) *EquipmentUpdateOne {
	euo.mutation.AddVersion(i)
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EquipmentUpdateOne) SetUpdatedBy(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.ResetUpdatedBy()
	euo.mutation.SetUpdatedBy(d)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableUpdatedBy(d *datasource.UUID) *EquipmentUpdateOne {
	if d != nil {
		euo.SetUpdatedBy(*d)
	}
	return euo
}

// AddUpdatedBy adds d to the "updated_by" field.
func (euo *EquipmentUpdateOne) AddUpdatedBy(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddUpdatedBy(d)
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EquipmentUpdateOne) SetUpdatedAt(i int64) *EquipmentUpdateOne {
	euo.mutation.ResetUpdatedAt()
	euo.mutation.SetUpdatedAt(i)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableUpdatedAt(i *int64) *EquipmentUpdateOne {
	if i != nil {
		euo.SetUpdatedAt(*i)
	}
	return euo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (euo *EquipmentUpdateOne) AddUpdatedAt(i int64) *EquipmentUpdateOne {
	euo.mutation.AddUpdatedAt(i)
	return euo
}

// SetSn sets the "sn" field.
func (euo *EquipmentUpdateOne) SetSn(s string) *EquipmentUpdateOne {
	euo.mutation.SetSn(s)
	return euo
}

// SetOperatorID sets the "operator_id" field.
func (euo *EquipmentUpdateOne) SetOperatorID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.ResetOperatorID()
	euo.mutation.SetOperatorID(d)
	return euo
}

// AddOperatorID adds d to the "operator_id" field.
func (euo *EquipmentUpdateOne) AddOperatorID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddOperatorID(d)
	return euo
}

// SetStationID sets the "station_id" field.
func (euo *EquipmentUpdateOne) SetStationID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.ResetStationID()
	euo.mutation.SetStationID(d)
	return euo
}

// AddStationID adds d to the "station_id" field.
func (euo *EquipmentUpdateOne) AddStationID(d datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddStationID(d)
	return euo
}

// SetEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID.
func (euo *EquipmentUpdateOne) SetEquipmentInfoID(id datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.SetEquipmentInfoID(id)
	return euo
}

// SetNillableEquipmentInfoID sets the "equipment_info" edge to the EquipmentInfo entity by ID if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableEquipmentInfoID(id *datasource.UUID) *EquipmentUpdateOne {
	if id != nil {
		euo = euo.SetEquipmentInfoID(*id)
	}
	return euo
}

// SetEquipmentInfo sets the "equipment_info" edge to the EquipmentInfo entity.
func (euo *EquipmentUpdateOne) SetEquipmentInfo(e *EquipmentInfo) *EquipmentUpdateOne {
	return euo.SetEquipmentInfoID(e.ID)
}

// AddEvseIDs adds the "evse" edge to the Evse entity by IDs.
func (euo *EquipmentUpdateOne) AddEvseIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddEvseIDs(ids...)
	return euo
}

// AddEvse adds the "evse" edges to the Evse entity.
func (euo *EquipmentUpdateOne) AddEvse(e ...*Evse) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEvseIDs(ids...)
}

// AddConnectorIDs adds the "connector" edge to the Connector entity by IDs.
func (euo *EquipmentUpdateOne) AddConnectorIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddConnectorIDs(ids...)
	return euo
}

// AddConnector adds the "connector" edges to the Connector entity.
func (euo *EquipmentUpdateOne) AddConnector(c ...*Connector) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddConnectorIDs(ids...)
}

// AddEquipmentAlarmIDs adds the "equipment_alarm" edge to the EquipmentAlarm entity by IDs.
func (euo *EquipmentUpdateOne) AddEquipmentAlarmIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddEquipmentAlarmIDs(ids...)
	return euo
}

// AddEquipmentAlarm adds the "equipment_alarm" edges to the EquipmentAlarm entity.
func (euo *EquipmentUpdateOne) AddEquipmentAlarm(e ...*EquipmentAlarm) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEquipmentAlarmIDs(ids...)
}

// SetEquipmentIotID sets the "equipment_iot" edge to the EquipmentIot entity by ID.
func (euo *EquipmentUpdateOne) SetEquipmentIotID(id datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.SetEquipmentIotID(id)
	return euo
}

// SetNillableEquipmentIotID sets the "equipment_iot" edge to the EquipmentIot entity by ID if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableEquipmentIotID(id *datasource.UUID) *EquipmentUpdateOne {
	if id != nil {
		euo = euo.SetEquipmentIotID(*id)
	}
	return euo
}

// SetEquipmentIot sets the "equipment_iot" edge to the EquipmentIot entity.
func (euo *EquipmentUpdateOne) SetEquipmentIot(e *EquipmentIot) *EquipmentUpdateOne {
	return euo.SetEquipmentIotID(e.ID)
}

// AddEquipmentFirmwareEffectIDs adds the "equipment_firmware_effect" edge to the EquipmentFirmwareEffect entity by IDs.
func (euo *EquipmentUpdateOne) AddEquipmentFirmwareEffectIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddEquipmentFirmwareEffectIDs(ids...)
	return euo
}

// AddEquipmentFirmwareEffect adds the "equipment_firmware_effect" edges to the EquipmentFirmwareEffect entity.
func (euo *EquipmentUpdateOne) AddEquipmentFirmwareEffect(e ...*EquipmentFirmwareEffect) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEquipmentFirmwareEffectIDs(ids...)
}

// AddOrderInfoIDs adds the "order_info" edge to the OrderInfo entity by IDs.
func (euo *EquipmentUpdateOne) AddOrderInfoIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddOrderInfoIDs(ids...)
	return euo
}

// AddOrderInfo adds the "order_info" edges to the OrderInfo entity.
func (euo *EquipmentUpdateOne) AddOrderInfo(o ...*OrderInfo) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOrderInfoIDs(ids...)
}

// AddReservationIDs adds the "reservation" edge to the Reservation entity by IDs.
func (euo *EquipmentUpdateOne) AddReservationIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddReservationIDs(ids...)
	return euo
}

// AddReservation adds the "reservation" edges to the Reservation entity.
func (euo *EquipmentUpdateOne) AddReservation(r ...*Reservation) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddReservationIDs(ids...)
}

// AddEquipmentLogIDs adds the "equipment_log" edge to the EquipmentLog entity by IDs.
func (euo *EquipmentUpdateOne) AddEquipmentLogIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.AddEquipmentLogIDs(ids...)
	return euo
}

// AddEquipmentLog adds the "equipment_log" edges to the EquipmentLog entity.
func (euo *EquipmentUpdateOne) AddEquipmentLog(e ...*EquipmentLog) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEquipmentLogIDs(ids...)
}

// Mutation returns the EquipmentMutation object of the builder.
func (euo *EquipmentUpdateOne) Mutation() *EquipmentMutation {
	return euo.mutation
}

// ClearEquipmentInfo clears the "equipment_info" edge to the EquipmentInfo entity.
func (euo *EquipmentUpdateOne) ClearEquipmentInfo() *EquipmentUpdateOne {
	euo.mutation.ClearEquipmentInfo()
	return euo
}

// ClearEvse clears all "evse" edges to the Evse entity.
func (euo *EquipmentUpdateOne) ClearEvse() *EquipmentUpdateOne {
	euo.mutation.ClearEvse()
	return euo
}

// RemoveEvseIDs removes the "evse" edge to Evse entities by IDs.
func (euo *EquipmentUpdateOne) RemoveEvseIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveEvseIDs(ids...)
	return euo
}

// RemoveEvse removes "evse" edges to Evse entities.
func (euo *EquipmentUpdateOne) RemoveEvse(e ...*Evse) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEvseIDs(ids...)
}

// ClearConnector clears all "connector" edges to the Connector entity.
func (euo *EquipmentUpdateOne) ClearConnector() *EquipmentUpdateOne {
	euo.mutation.ClearConnector()
	return euo
}

// RemoveConnectorIDs removes the "connector" edge to Connector entities by IDs.
func (euo *EquipmentUpdateOne) RemoveConnectorIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveConnectorIDs(ids...)
	return euo
}

// RemoveConnector removes "connector" edges to Connector entities.
func (euo *EquipmentUpdateOne) RemoveConnector(c ...*Connector) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveConnectorIDs(ids...)
}

// ClearEquipmentAlarm clears all "equipment_alarm" edges to the EquipmentAlarm entity.
func (euo *EquipmentUpdateOne) ClearEquipmentAlarm() *EquipmentUpdateOne {
	euo.mutation.ClearEquipmentAlarm()
	return euo
}

// RemoveEquipmentAlarmIDs removes the "equipment_alarm" edge to EquipmentAlarm entities by IDs.
func (euo *EquipmentUpdateOne) RemoveEquipmentAlarmIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveEquipmentAlarmIDs(ids...)
	return euo
}

// RemoveEquipmentAlarm removes "equipment_alarm" edges to EquipmentAlarm entities.
func (euo *EquipmentUpdateOne) RemoveEquipmentAlarm(e ...*EquipmentAlarm) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEquipmentAlarmIDs(ids...)
}

// ClearEquipmentIot clears the "equipment_iot" edge to the EquipmentIot entity.
func (euo *EquipmentUpdateOne) ClearEquipmentIot() *EquipmentUpdateOne {
	euo.mutation.ClearEquipmentIot()
	return euo
}

// ClearEquipmentFirmwareEffect clears all "equipment_firmware_effect" edges to the EquipmentFirmwareEffect entity.
func (euo *EquipmentUpdateOne) ClearEquipmentFirmwareEffect() *EquipmentUpdateOne {
	euo.mutation.ClearEquipmentFirmwareEffect()
	return euo
}

// RemoveEquipmentFirmwareEffectIDs removes the "equipment_firmware_effect" edge to EquipmentFirmwareEffect entities by IDs.
func (euo *EquipmentUpdateOne) RemoveEquipmentFirmwareEffectIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveEquipmentFirmwareEffectIDs(ids...)
	return euo
}

// RemoveEquipmentFirmwareEffect removes "equipment_firmware_effect" edges to EquipmentFirmwareEffect entities.
func (euo *EquipmentUpdateOne) RemoveEquipmentFirmwareEffect(e ...*EquipmentFirmwareEffect) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEquipmentFirmwareEffectIDs(ids...)
}

// ClearOrderInfo clears all "order_info" edges to the OrderInfo entity.
func (euo *EquipmentUpdateOne) ClearOrderInfo() *EquipmentUpdateOne {
	euo.mutation.ClearOrderInfo()
	return euo
}

// RemoveOrderInfoIDs removes the "order_info" edge to OrderInfo entities by IDs.
func (euo *EquipmentUpdateOne) RemoveOrderInfoIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveOrderInfoIDs(ids...)
	return euo
}

// RemoveOrderInfo removes "order_info" edges to OrderInfo entities.
func (euo *EquipmentUpdateOne) RemoveOrderInfo(o ...*OrderInfo) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOrderInfoIDs(ids...)
}

// ClearReservation clears all "reservation" edges to the Reservation entity.
func (euo *EquipmentUpdateOne) ClearReservation() *EquipmentUpdateOne {
	euo.mutation.ClearReservation()
	return euo
}

// RemoveReservationIDs removes the "reservation" edge to Reservation entities by IDs.
func (euo *EquipmentUpdateOne) RemoveReservationIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveReservationIDs(ids...)
	return euo
}

// RemoveReservation removes "reservation" edges to Reservation entities.
func (euo *EquipmentUpdateOne) RemoveReservation(r ...*Reservation) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveReservationIDs(ids...)
}

// ClearEquipmentLog clears all "equipment_log" edges to the EquipmentLog entity.
func (euo *EquipmentUpdateOne) ClearEquipmentLog() *EquipmentUpdateOne {
	euo.mutation.ClearEquipmentLog()
	return euo
}

// RemoveEquipmentLogIDs removes the "equipment_log" edge to EquipmentLog entities by IDs.
func (euo *EquipmentUpdateOne) RemoveEquipmentLogIDs(ids ...datasource.UUID) *EquipmentUpdateOne {
	euo.mutation.RemoveEquipmentLogIDs(ids...)
	return euo
}

// RemoveEquipmentLog removes "equipment_log" edges to EquipmentLog entities.
func (euo *EquipmentUpdateOne) RemoveEquipmentLog(e ...*EquipmentLog) *EquipmentUpdateOne {
	ids := make([]datasource.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEquipmentLogIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EquipmentUpdateOne) Select(field string, fields ...string) *EquipmentUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Equipment entity.
func (euo *EquipmentUpdateOne) Save(ctx context.Context) (*Equipment, error) {
	var (
		err  error
		node *Equipment
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Equipment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EquipmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EquipmentUpdateOne) SaveX(ctx context.Context) *Equipment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EquipmentUpdateOne) check() error {
	if v, ok := euo.mutation.Sn(); ok {
		if err := equipment.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Equipment.sn": %w`, err)}
		}
	}
	return nil
}

func (euo *EquipmentUpdateOne) sqlSave(ctx context.Context) (_node *Equipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Equipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipment.FieldID)
		for _, f := range fields {
			if !equipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != equipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldVersion,
		})
	}
	if value, ok := euo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldVersion,
		})
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldUpdatedBy,
		})
	}
	if value, ok := euo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldUpdatedBy,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldSn,
		})
	}
	if value, ok := euo.mutation.OperatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := euo.mutation.AddedOperatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldOperatorID,
		})
	}
	if value, ok := euo.mutation.StationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if value, ok := euo.mutation.AddedStationID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: equipment.FieldStationID,
		})
	}
	if euo.mutation.EquipmentInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentInfoTable,
			Columns: []string{equipment.EquipmentInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EvseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvseTable,
			Columns: []string{equipment.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEvseIDs(); len(nodes) > 0 && !euo.mutation.EvseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvseTable,
			Columns: []string{equipment.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EvseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EvseTable,
			Columns: []string{equipment.EvseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: evse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorTable,
			Columns: []string{equipment.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedConnectorIDs(); len(nodes) > 0 && !euo.mutation.ConnectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorTable,
			Columns: []string{equipment.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ConnectorTable,
			Columns: []string{equipment.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: connector.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EquipmentAlarmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentAlarmTable,
			Columns: []string{equipment.EquipmentAlarmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentalarm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEquipmentAlarmIDs(); len(nodes) > 0 && !euo.mutation.EquipmentAlarmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentAlarmTable,
			Columns: []string{equipment.EquipmentAlarmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentalarm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentAlarmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentAlarmTable,
			Columns: []string{equipment.EquipmentAlarmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentalarm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EquipmentIotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentIotTable,
			Columns: []string{equipment.EquipmentIotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentiot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentIotIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   equipment.EquipmentIotTable,
			Columns: []string{equipment.EquipmentIotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentiot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EquipmentFirmwareEffectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentFirmwareEffectTable,
			Columns: []string{equipment.EquipmentFirmwareEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentfirmwareeffect.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEquipmentFirmwareEffectIDs(); len(nodes) > 0 && !euo.mutation.EquipmentFirmwareEffectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentFirmwareEffectTable,
			Columns: []string{equipment.EquipmentFirmwareEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentfirmwareeffect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentFirmwareEffectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentFirmwareEffectTable,
			Columns: []string{equipment.EquipmentFirmwareEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentfirmwareeffect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderInfoTable,
			Columns: []string{equipment.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOrderInfoIDs(); len(nodes) > 0 && !euo.mutation.OrderInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderInfoTable,
			Columns: []string{equipment.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrderInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderInfoTable,
			Columns: []string{equipment.OrderInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ReservationTable,
			Columns: []string{equipment.ReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reservation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedReservationIDs(); len(nodes) > 0 && !euo.mutation.ReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ReservationTable,
			Columns: []string{equipment.ReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.ReservationTable,
			Columns: []string{equipment.ReservationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: reservation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EquipmentLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentLogTable,
			Columns: []string{equipment.EquipmentLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEquipmentLogIDs(); len(nodes) > 0 && !euo.mutation.EquipmentLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentLogTable,
			Columns: []string{equipment.EquipmentLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.EquipmentLogTable,
			Columns: []string{equipment.EquipmentLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipmentlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Equipment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
