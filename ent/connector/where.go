// Code generated by ent, DO NOT EDIT.

package connector

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// ID filters vertices based on their ID field.
func ID(id datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id datasource.UUID) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// EquipmentSn applies equality check predicate on the "equipment_sn" field. It's identical to EquipmentSnEQ.
func EquipmentSn(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipmentSn), v))
	})
}

// EvseSerial applies equality check predicate on the "evse_serial" field. It's identical to EvseSerialEQ.
func EvseSerial(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEvseSerial), v))
	})
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// CurrentState applies equality check predicate on the "current_state" field. It's identical to CurrentStateEQ.
func CurrentState(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentState), v))
	})
}

// BeforeState applies equality check predicate on the "before_state" field. It's identical to BeforeStateEQ.
func BeforeState(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeforeState), v))
	})
}

// ChargingState applies equality check predicate on the "charging_state" field. It's identical to ChargingStateEQ.
func ChargingState(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargingState), v))
	})
}

// ReservationID applies equality check predicate on the "reservation_id" field. It's identical to ReservationIDEQ.
func ReservationID(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservationID), vc))
	})
}

// ParkNo applies equality check predicate on the "park_no" field. It's identical to ParkNoEQ.
func ParkNo(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParkNo), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...datasource.UUID) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...datasource.UUID) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), vc))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...datasource.UUID) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...datasource.UUID) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// EquipmentSnEQ applies the EQ predicate on the "equipment_sn" field.
func EquipmentSnEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnNEQ applies the NEQ predicate on the "equipment_sn" field.
func EquipmentSnNEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnIn applies the In predicate on the "equipment_sn" field.
func EquipmentSnIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquipmentSn), v...))
	})
}

// EquipmentSnNotIn applies the NotIn predicate on the "equipment_sn" field.
func EquipmentSnNotIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquipmentSn), v...))
	})
}

// EquipmentSnGT applies the GT predicate on the "equipment_sn" field.
func EquipmentSnGT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnGTE applies the GTE predicate on the "equipment_sn" field.
func EquipmentSnGTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnLT applies the LT predicate on the "equipment_sn" field.
func EquipmentSnLT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnLTE applies the LTE predicate on the "equipment_sn" field.
func EquipmentSnLTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnContains applies the Contains predicate on the "equipment_sn" field.
func EquipmentSnContains(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnHasPrefix applies the HasPrefix predicate on the "equipment_sn" field.
func EquipmentSnHasPrefix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnHasSuffix applies the HasSuffix predicate on the "equipment_sn" field.
func EquipmentSnHasSuffix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnEqualFold applies the EqualFold predicate on the "equipment_sn" field.
func EquipmentSnEqualFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnContainsFold applies the ContainsFold predicate on the "equipment_sn" field.
func EquipmentSnContainsFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEquipmentSn), v))
	})
}

// EvseSerialEQ applies the EQ predicate on the "evse_serial" field.
func EvseSerialEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialNEQ applies the NEQ predicate on the "evse_serial" field.
func EvseSerialNEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialIn applies the In predicate on the "evse_serial" field.
func EvseSerialIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEvseSerial), v...))
	})
}

// EvseSerialNotIn applies the NotIn predicate on the "evse_serial" field.
func EvseSerialNotIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEvseSerial), v...))
	})
}

// EvseSerialGT applies the GT predicate on the "evse_serial" field.
func EvseSerialGT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialGTE applies the GTE predicate on the "evse_serial" field.
func EvseSerialGTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialLT applies the LT predicate on the "evse_serial" field.
func EvseSerialLT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialLTE applies the LTE predicate on the "evse_serial" field.
func EvseSerialLTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialContains applies the Contains predicate on the "evse_serial" field.
func EvseSerialContains(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialHasPrefix applies the HasPrefix predicate on the "evse_serial" field.
func EvseSerialHasPrefix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialHasSuffix applies the HasSuffix predicate on the "evse_serial" field.
func EvseSerialHasSuffix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialEqualFold applies the EqualFold predicate on the "evse_serial" field.
func EvseSerialEqualFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEvseSerial), v))
	})
}

// EvseSerialContainsFold applies the ContainsFold predicate on the "evse_serial" field.
func EvseSerialContainsFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEvseSerial), v))
	})
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSerial), v))
	})
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSerial), v...))
	})
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSerial), v...))
	})
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSerial), v))
	})
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSerial), v))
	})
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSerial), v))
	})
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSerial), v))
	})
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSerial), v))
	})
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSerial), v))
	})
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSerial), v))
	})
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSerial), v))
	})
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSerial), v))
	})
}

// CurrentStateEQ applies the EQ predicate on the "current_state" field.
func CurrentStateEQ(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentState), v))
	})
}

// CurrentStateNEQ applies the NEQ predicate on the "current_state" field.
func CurrentStateNEQ(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentState), v))
	})
}

// CurrentStateIn applies the In predicate on the "current_state" field.
func CurrentStateIn(vs ...int) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrentState), v...))
	})
}

// CurrentStateNotIn applies the NotIn predicate on the "current_state" field.
func CurrentStateNotIn(vs ...int) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrentState), v...))
	})
}

// CurrentStateGT applies the GT predicate on the "current_state" field.
func CurrentStateGT(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentState), v))
	})
}

// CurrentStateGTE applies the GTE predicate on the "current_state" field.
func CurrentStateGTE(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentState), v))
	})
}

// CurrentStateLT applies the LT predicate on the "current_state" field.
func CurrentStateLT(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentState), v))
	})
}

// CurrentStateLTE applies the LTE predicate on the "current_state" field.
func CurrentStateLTE(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentState), v))
	})
}

// BeforeStateEQ applies the EQ predicate on the "before_state" field.
func BeforeStateEQ(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeforeState), v))
	})
}

// BeforeStateNEQ applies the NEQ predicate on the "before_state" field.
func BeforeStateNEQ(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBeforeState), v))
	})
}

// BeforeStateIn applies the In predicate on the "before_state" field.
func BeforeStateIn(vs ...int) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBeforeState), v...))
	})
}

// BeforeStateNotIn applies the NotIn predicate on the "before_state" field.
func BeforeStateNotIn(vs ...int) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBeforeState), v...))
	})
}

// BeforeStateGT applies the GT predicate on the "before_state" field.
func BeforeStateGT(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBeforeState), v))
	})
}

// BeforeStateGTE applies the GTE predicate on the "before_state" field.
func BeforeStateGTE(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBeforeState), v))
	})
}

// BeforeStateLT applies the LT predicate on the "before_state" field.
func BeforeStateLT(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBeforeState), v))
	})
}

// BeforeStateLTE applies the LTE predicate on the "before_state" field.
func BeforeStateLTE(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBeforeState), v))
	})
}

// ChargingStateEQ applies the EQ predicate on the "charging_state" field.
func ChargingStateEQ(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargingState), v))
	})
}

// ChargingStateNEQ applies the NEQ predicate on the "charging_state" field.
func ChargingStateNEQ(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargingState), v))
	})
}

// ChargingStateIn applies the In predicate on the "charging_state" field.
func ChargingStateIn(vs ...int) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChargingState), v...))
	})
}

// ChargingStateNotIn applies the NotIn predicate on the "charging_state" field.
func ChargingStateNotIn(vs ...int) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChargingState), v...))
	})
}

// ChargingStateGT applies the GT predicate on the "charging_state" field.
func ChargingStateGT(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargingState), v))
	})
}

// ChargingStateGTE applies the GTE predicate on the "charging_state" field.
func ChargingStateGTE(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargingState), v))
	})
}

// ChargingStateLT applies the LT predicate on the "charging_state" field.
func ChargingStateLT(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargingState), v))
	})
}

// ChargingStateLTE applies the LTE predicate on the "charging_state" field.
func ChargingStateLTE(v int) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargingState), v))
	})
}

// ChargingStateIsNil applies the IsNil predicate on the "charging_state" field.
func ChargingStateIsNil() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargingState)))
	})
}

// ChargingStateNotNil applies the NotNil predicate on the "charging_state" field.
func ChargingStateNotNil() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargingState)))
	})
}

// ReservationIDEQ applies the EQ predicate on the "reservation_id" field.
func ReservationIDEQ(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservationID), vc))
	})
}

// ReservationIDNEQ applies the NEQ predicate on the "reservation_id" field.
func ReservationIDNEQ(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReservationID), vc))
	})
}

// ReservationIDIn applies the In predicate on the "reservation_id" field.
func ReservationIDIn(vs ...datasource.UUID) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReservationID), v...))
	})
}

// ReservationIDNotIn applies the NotIn predicate on the "reservation_id" field.
func ReservationIDNotIn(vs ...datasource.UUID) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReservationID), v...))
	})
}

// ReservationIDGT applies the GT predicate on the "reservation_id" field.
func ReservationIDGT(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReservationID), vc))
	})
}

// ReservationIDGTE applies the GTE predicate on the "reservation_id" field.
func ReservationIDGTE(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReservationID), vc))
	})
}

// ReservationIDLT applies the LT predicate on the "reservation_id" field.
func ReservationIDLT(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReservationID), vc))
	})
}

// ReservationIDLTE applies the LTE predicate on the "reservation_id" field.
func ReservationIDLTE(v datasource.UUID) predicate.Connector {
	vc := uint64(v)
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReservationID), vc))
	})
}

// ReservationIDIsNil applies the IsNil predicate on the "reservation_id" field.
func ReservationIDIsNil() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReservationID)))
	})
}

// ReservationIDNotNil applies the NotNil predicate on the "reservation_id" field.
func ReservationIDNotNil() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReservationID)))
	})
}

// ParkNoEQ applies the EQ predicate on the "park_no" field.
func ParkNoEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParkNo), v))
	})
}

// ParkNoNEQ applies the NEQ predicate on the "park_no" field.
func ParkNoNEQ(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParkNo), v))
	})
}

// ParkNoIn applies the In predicate on the "park_no" field.
func ParkNoIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldParkNo), v...))
	})
}

// ParkNoNotIn applies the NotIn predicate on the "park_no" field.
func ParkNoNotIn(vs ...string) predicate.Connector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldParkNo), v...))
	})
}

// ParkNoGT applies the GT predicate on the "park_no" field.
func ParkNoGT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParkNo), v))
	})
}

// ParkNoGTE applies the GTE predicate on the "park_no" field.
func ParkNoGTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParkNo), v))
	})
}

// ParkNoLT applies the LT predicate on the "park_no" field.
func ParkNoLT(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParkNo), v))
	})
}

// ParkNoLTE applies the LTE predicate on the "park_no" field.
func ParkNoLTE(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParkNo), v))
	})
}

// ParkNoContains applies the Contains predicate on the "park_no" field.
func ParkNoContains(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParkNo), v))
	})
}

// ParkNoHasPrefix applies the HasPrefix predicate on the "park_no" field.
func ParkNoHasPrefix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParkNo), v))
	})
}

// ParkNoHasSuffix applies the HasSuffix predicate on the "park_no" field.
func ParkNoHasSuffix(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParkNo), v))
	})
}

// ParkNoEqualFold applies the EqualFold predicate on the "park_no" field.
func ParkNoEqualFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParkNo), v))
	})
}

// ParkNoContainsFold applies the ContainsFold predicate on the "park_no" field.
func ParkNoContainsFold(v string) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParkNo), v))
	})
}

// HasEvse applies the HasEdge predicate on the "evse" edge.
func HasEvse() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EvseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EvseTable, EvseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEvseWith applies the HasEdge predicate on the "evse" edge with a given conditions (other predicates).
func HasEvseWith(preds ...predicate.Evse) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EvseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EvseTable, EvseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderInfo applies the HasEdge predicate on the "order_info" edge.
func HasOrderInfo() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderInfoWith applies the HasEdge predicate on the "order_info" edge with a given conditions (other predicates).
func HasOrderInfoWith(preds ...predicate.OrderInfo) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReservation applies the HasEdge predicate on the "reservation" edge.
func HasReservation() predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReservationTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReservationTable, ReservationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReservationWith applies the HasEdge predicate on the "reservation" edge with a given conditions (other predicates).
func HasReservationWith(preds ...predicate.Reservation) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReservationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReservationTable, ReservationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Connector) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Connector) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Connector) predicate.Connector {
	return predicate.Connector(func(s *sql.Selector) {
		p(s.Not())
	})
}
