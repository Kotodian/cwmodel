// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/ent-practice/ent/model"
)

// Model is the model entity for the Model schema.
type Model struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	// 型号代码
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	// 型号名称
	Name string `json:"name,omitempty"`
	// PhaseCategory holds the value of the "phase_category" field.
	// 相位类型
	PhaseCategory string `json:"phase_category,omitempty"`
	// CurrentCategory holds the value of the "current_category" field.
	// 电流类型
	CurrentCategory string `json:"current_category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelQuery when eager-loading is set.
	Edges ModelEdges `json:"edges"`
}

// ModelEdges holds the relations/edges for other nodes in the graph.
type ModelEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment []*Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading.
func (e ModelEdges) EquipmentOrErr() ([]*Equipment, error) {
	if e.loadedTypes[0] {
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Model) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case model.FieldID:
			values[i] = new(sql.NullInt64)
		case model.FieldCode, model.FieldName, model.FieldPhaseCategory, model.FieldCurrentCategory:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Model", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Model fields.
func (m *Model) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case model.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case model.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				m.Code = value.String
			}
		case model.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case model.FieldPhaseCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phase_category", values[i])
			} else if value.Valid {
				m.PhaseCategory = value.String
			}
		case model.FieldCurrentCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_category", values[i])
			} else if value.Valid {
				m.CurrentCategory = value.String
			}
		}
	}
	return nil
}

// QueryEquipment queries the "equipment" edge of the Model entity.
func (m *Model) QueryEquipment() *EquipmentQuery {
	return (&ModelClient{config: m.config}).QueryEquipment(m)
}

// Update returns a builder for updating this Model.
// Note that you need to call Model.Unwrap() before calling this method if this Model
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Model) Update() *ModelUpdateOne {
	return (&ModelClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Model entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Model) Unwrap() *Model {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Model is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Model) String() string {
	var builder strings.Builder
	builder.WriteString("Model(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", code=")
	builder.WriteString(m.Code)
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", phase_category=")
	builder.WriteString(m.PhaseCategory)
	builder.WriteString(", current_category=")
	builder.WriteString(m.CurrentCategory)
	builder.WriteByte(')')
	return builder.String()
}

// Models is a parsable slice of Model.
type Models []*Model

func (m Models) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
