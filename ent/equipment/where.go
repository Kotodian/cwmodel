// Code generated by ent, DO NOT EDIT.

package equipment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// ID filters vertices based on their ID field.
func ID(id datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id datasource.UUID) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// OperatorID applies equality check predicate on the "operator_id" field. It's identical to OperatorIDEQ.
func OperatorID(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorID), vc))
	})
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStationID), vc))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), vc))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSn), v))
	})
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSn), v...))
	})
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSn), v...))
	})
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSn), v))
	})
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSn), v))
	})
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSn), v))
	})
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSn), v))
	})
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSn), v))
	})
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSn), v))
	})
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSn), v))
	})
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSn), v))
	})
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSn), v))
	})
}

// OperatorIDEQ applies the EQ predicate on the "operator_id" field.
func OperatorIDEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDNEQ applies the NEQ predicate on the "operator_id" field.
func OperatorIDNEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDIn applies the In predicate on the "operator_id" field.
func OperatorIDIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOperatorID), v...))
	})
}

// OperatorIDNotIn applies the NotIn predicate on the "operator_id" field.
func OperatorIDNotIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOperatorID), v...))
	})
}

// OperatorIDGT applies the GT predicate on the "operator_id" field.
func OperatorIDGT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDGTE applies the GTE predicate on the "operator_id" field.
func OperatorIDGTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDLT applies the LT predicate on the "operator_id" field.
func OperatorIDLT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperatorID), vc))
	})
}

// OperatorIDLTE applies the LTE predicate on the "operator_id" field.
func OperatorIDLTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperatorID), vc))
	})
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStationID), vc))
	})
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStationID), vc))
	})
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStationID), v...))
	})
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...datasource.UUID) predicate.Equipment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStationID), v...))
	})
}

// StationIDGT applies the GT predicate on the "station_id" field.
func StationIDGT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStationID), vc))
	})
}

// StationIDGTE applies the GTE predicate on the "station_id" field.
func StationIDGTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStationID), vc))
	})
}

// StationIDLT applies the LT predicate on the "station_id" field.
func StationIDLT(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStationID), vc))
	})
}

// StationIDLTE applies the LTE predicate on the "station_id" field.
func StationIDLTE(v datasource.UUID) predicate.Equipment {
	vc := uint64(v)
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStationID), vc))
	})
}

// HasEquipmentInfo applies the HasEdge predicate on the "equipment_info" edge.
func HasEquipmentInfo() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInfoTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EquipmentInfoTable, EquipmentInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentInfoWith applies the HasEdge predicate on the "equipment_info" edge with a given conditions (other predicates).
func HasEquipmentInfoWith(preds ...predicate.EquipmentInfo) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EquipmentInfoTable, EquipmentInfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvse applies the HasEdge predicate on the "evse" edge.
func HasEvse() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EvseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EvseTable, EvseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEvseWith applies the HasEdge predicate on the "evse" edge with a given conditions (other predicates).
func HasEvseWith(preds ...predicate.Evse) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EvseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EvseTable, EvseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnector applies the HasEdge predicate on the "connector" edge.
func HasConnector() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConnectorTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConnectorTable, ConnectorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectorWith applies the HasEdge predicate on the "connector" edge with a given conditions (other predicates).
func HasConnectorWith(preds ...predicate.Connector) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConnectorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConnectorTable, ConnectorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentAlarm applies the HasEdge predicate on the "equipment_alarm" edge.
func HasEquipmentAlarm() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentAlarmTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentAlarmTable, EquipmentAlarmColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentAlarmWith applies the HasEdge predicate on the "equipment_alarm" edge with a given conditions (other predicates).
func HasEquipmentAlarmWith(preds ...predicate.EquipmentAlarm) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentAlarmInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentAlarmTable, EquipmentAlarmColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentIot applies the HasEdge predicate on the "equipment_iot" edge.
func HasEquipmentIot() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentIotTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EquipmentIotTable, EquipmentIotColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentIotWith applies the HasEdge predicate on the "equipment_iot" edge with a given conditions (other predicates).
func HasEquipmentIotWith(preds ...predicate.EquipmentIot) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentIotInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EquipmentIotTable, EquipmentIotColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentFirmwareEffect applies the HasEdge predicate on the "equipment_firmware_effect" edge.
func HasEquipmentFirmwareEffect() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentFirmwareEffectTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentFirmwareEffectTable, EquipmentFirmwareEffectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentFirmwareEffectWith applies the HasEdge predicate on the "equipment_firmware_effect" edge with a given conditions (other predicates).
func HasEquipmentFirmwareEffectWith(preds ...predicate.EquipmentFirmwareEffect) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentFirmwareEffectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentFirmwareEffectTable, EquipmentFirmwareEffectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderInfo applies the HasEdge predicate on the "order_info" edge.
func HasOrderInfo() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderInfoWith applies the HasEdge predicate on the "order_info" edge with a given conditions (other predicates).
func HasOrderInfoWith(preds ...predicate.OrderInfo) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderInfoTable, OrderInfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReservation applies the HasEdge predicate on the "reservation" edge.
func HasReservation() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReservationTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReservationTable, ReservationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReservationWith applies the HasEdge predicate on the "reservation" edge with a given conditions (other predicates).
func HasReservationWith(preds ...predicate.Reservation) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReservationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReservationTable, ReservationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentLog applies the HasEdge predicate on the "equipment_log" edge.
func HasEquipmentLog() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentLogTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentLogTable, EquipmentLogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentLogWith applies the HasEdge predicate on the "equipment_log" edge with a given conditions (other predicates).
func HasEquipmentLogWith(preds ...predicate.EquipmentLog) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentLogInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentLogTable, EquipmentLogColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSmartChargingEffect applies the HasEdge predicate on the "smart_charging_effect" edge.
func HasSmartChargingEffect() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmartChargingEffectTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SmartChargingEffectTable, SmartChargingEffectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmartChargingEffectWith applies the HasEdge predicate on the "smart_charging_effect" edge with a given conditions (other predicates).
func HasSmartChargingEffectWith(preds ...predicate.SmartChargingEffect) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SmartChargingEffectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SmartChargingEffectTable, SmartChargingEffectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Equipment) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Equipment) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Equipment) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		p(s.Not())
	})
}
