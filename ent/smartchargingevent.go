// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/ent-practice/ent/smartchargingevent"
	"github.com/Kotodian/ent-practice/ent/types"
	"github.com/Kotodian/gokit/datasource"
)

// SmartChargingEvent is the model entity for the SmartChargingEvent schema.
type SmartChargingEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 智慧id
	SmartID datasource.UUID `json:"smart_id,omitempty"`
	// 桩端id
	EquipmentID datasource.UUID `json:"equipment_id,omitempty"`
	// 枪id
	ConnectorID datasource.UUID `json:"connector_id,omitempty"`
	// 订单id
	OrderID datasource.UUID `json:"order_id,omitempty"`
	// 单位(W或者A)
	Unit string `json:"unit,omitempty"`
	// 有效开始时间
	ValidFrom int64 `json:"valid_from,omitempty"`
	// 有效结束时间
	ValidTo int64 `json:"valid_to,omitempty"`
	// 时间间隔
	Spec []types.ChargingSchedulePeriod `json:"spec,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SmartChargingEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case smartchargingevent.FieldSpec:
			values[i] = new([]byte)
		case smartchargingevent.FieldID, smartchargingevent.FieldSmartID, smartchargingevent.FieldEquipmentID, smartchargingevent.FieldConnectorID, smartchargingevent.FieldOrderID, smartchargingevent.FieldValidFrom, smartchargingevent.FieldValidTo:
			values[i] = new(sql.NullInt64)
		case smartchargingevent.FieldUnit:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SmartChargingEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SmartChargingEvent fields.
func (sce *SmartChargingEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smartchargingevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sce.ID = int(value.Int64)
		case smartchargingevent.FieldSmartID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field smart_id", values[i])
			} else if value.Valid {
				sce.SmartID = datasource.UUID(value.Int64)
			}
		case smartchargingevent.FieldEquipmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_id", values[i])
			} else if value.Valid {
				sce.EquipmentID = datasource.UUID(value.Int64)
			}
		case smartchargingevent.FieldConnectorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field connector_id", values[i])
			} else if value.Valid {
				sce.ConnectorID = datasource.UUID(value.Int64)
			}
		case smartchargingevent.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				sce.OrderID = datasource.UUID(value.Int64)
			}
		case smartchargingevent.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				sce.Unit = value.String
			}
		case smartchargingevent.FieldValidFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				sce.ValidFrom = value.Int64
			}
		case smartchargingevent.FieldValidTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to", values[i])
			} else if value.Valid {
				sce.ValidTo = value.Int64
			}
		case smartchargingevent.FieldSpec:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field spec", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sce.Spec); err != nil {
					return fmt.Errorf("unmarshal field spec: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SmartChargingEvent.
// Note that you need to call SmartChargingEvent.Unwrap() before calling this method if this SmartChargingEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (sce *SmartChargingEvent) Update() *SmartChargingEventUpdateOne {
	return (&SmartChargingEventClient{config: sce.config}).UpdateOne(sce)
}

// Unwrap unwraps the SmartChargingEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sce *SmartChargingEvent) Unwrap() *SmartChargingEvent {
	_tx, ok := sce.config.driver.(*txDriver)
	if !ok {
		panic("ent: SmartChargingEvent is not a transactional entity")
	}
	sce.config.driver = _tx.drv
	return sce
}

// String implements the fmt.Stringer.
func (sce *SmartChargingEvent) String() string {
	var builder strings.Builder
	builder.WriteString("SmartChargingEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sce.ID))
	builder.WriteString("smart_id=")
	builder.WriteString(fmt.Sprintf("%v", sce.SmartID))
	builder.WriteString(", ")
	builder.WriteString("equipment_id=")
	builder.WriteString(fmt.Sprintf("%v", sce.EquipmentID))
	builder.WriteString(", ")
	builder.WriteString("connector_id=")
	builder.WriteString(fmt.Sprintf("%v", sce.ConnectorID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", sce.OrderID))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(sce.Unit)
	builder.WriteString(", ")
	builder.WriteString("valid_from=")
	builder.WriteString(fmt.Sprintf("%v", sce.ValidFrom))
	builder.WriteString(", ")
	builder.WriteString("valid_to=")
	builder.WriteString(fmt.Sprintf("%v", sce.ValidTo))
	builder.WriteString(", ")
	builder.WriteString("spec=")
	builder.WriteString(fmt.Sprintf("%v", sce.Spec))
	builder.WriteByte(')')
	return builder.String()
}

// SmartChargingEvents is a parsable slice of SmartChargingEvent.
type SmartChargingEvents []*SmartChargingEvent

func (sce SmartChargingEvents) config(cfg config) {
	for _i := range sce {
		sce[_i].config = cfg
	}
}
