// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/ent-practice/ent/enums"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentinfo"
	"github.com/Kotodian/gokit/datasource"
)

// Equipment is the model entity for the Equipment schema.
type Equipment struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID datasource.UUID `json:"id,omitempty"`
	// Sn holds the value of the "sn" field.
	// 桩序列号
	Sn string `json:"sn,omitempty"`
	// Category holds the value of the "category" field.
	// 桩类型
	Category enums.EquipmentCategory `json:"category,omitempty"`
	// OperatorID holds the value of the "operator_id" field.
	// 运营商id
	OperatorID datasource.UUID `json:"operator_id,omitempty"`
	// StationID holds the value of the "station_id" field.
	// 站点id
	StationID datasource.UUID `json:"station_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentQuery when eager-loading is set.
	Edges EquipmentEdges `json:"edges"`
}

// EquipmentEdges holds the relations/edges for other nodes in the graph.
type EquipmentEdges struct {
	// EquipmentInfo holds the value of the equipment_info edge.
	EquipmentInfo *EquipmentInfo `json:"equipment_info,omitempty"`
	// Evses holds the value of the evses edge.
	Evses []*Evse `json:"evses,omitempty"`
	// Connectors holds the value of the connectors edge.
	Connectors []*Connector `json:"connectors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EquipmentInfoOrErr returns the EquipmentInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) EquipmentInfoOrErr() (*EquipmentInfo, error) {
	if e.loadedTypes[0] {
		if e.EquipmentInfo == nil {
			// The edge equipment_info was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: equipmentinfo.Label}
		}
		return e.EquipmentInfo, nil
	}
	return nil, &NotLoadedError{edge: "equipment_info"}
}

// EvsesOrErr returns the Evses value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEdges) EvsesOrErr() ([]*Evse, error) {
	if e.loadedTypes[1] {
		return e.Evses, nil
	}
	return nil, &NotLoadedError{edge: "evses"}
}

// ConnectorsOrErr returns the Connectors value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEdges) ConnectorsOrErr() ([]*Connector, error) {
	if e.loadedTypes[2] {
		return e.Connectors, nil
	}
	return nil, &NotLoadedError{edge: "connectors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipment.FieldCategory:
			values[i] = new(enums.EquipmentCategory)
		case equipment.FieldID, equipment.FieldOperatorID, equipment.FieldStationID:
			values[i] = new(sql.NullInt64)
		case equipment.FieldSn:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Equipment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipment fields.
func (e *Equipment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = datasource.UUID(value.Int64)
		case equipment.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				e.Sn = value.String
			}
		case equipment.FieldCategory:
			if value, ok := values[i].(*enums.EquipmentCategory); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value != nil {
				e.Category = *value
			}
		case equipment.FieldOperatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operator_id", values[i])
			} else if value.Valid {
				e.OperatorID = datasource.UUID(value.Int64)
			}
		case equipment.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				e.StationID = datasource.UUID(value.Int64)
			}
		}
	}
	return nil
}

// QueryEquipmentInfo queries the "equipment_info" edge of the Equipment entity.
func (e *Equipment) QueryEquipmentInfo() *EquipmentInfoQuery {
	return (&EquipmentClient{config: e.config}).QueryEquipmentInfo(e)
}

// QueryEvses queries the "evses" edge of the Equipment entity.
func (e *Equipment) QueryEvses() *EvseQuery {
	return (&EquipmentClient{config: e.config}).QueryEvses(e)
}

// QueryConnectors queries the "connectors" edge of the Equipment entity.
func (e *Equipment) QueryConnectors() *ConnectorQuery {
	return (&EquipmentClient{config: e.config}).QueryConnectors(e)
}

// Update returns a builder for updating this Equipment.
// Note that you need to call Equipment.Unwrap() before calling this method if this Equipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipment) Update() *EquipmentUpdateOne {
	return (&EquipmentClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Equipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Equipment) Unwrap() *Equipment {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipment is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipment) String() string {
	var builder strings.Builder
	builder.WriteString("Equipment(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", sn=")
	builder.WriteString(e.Sn)
	builder.WriteString(", category=")
	builder.WriteString(fmt.Sprintf("%v", e.Category))
	builder.WriteString(", operator_id=")
	builder.WriteString(fmt.Sprintf("%v", e.OperatorID))
	builder.WriteString(", station_id=")
	builder.WriteString(fmt.Sprintf("%v", e.StationID))
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentSlice is a parsable slice of Equipment.
type EquipmentSlice []*Equipment

func (e EquipmentSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
