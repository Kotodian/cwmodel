// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentalarm"
)

// EquipmentAlarm is the model entity for the EquipmentAlarm schema.
type EquipmentAlarm struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DtcCode holds the value of the "dtc_code" field.
	// 告警代码
	DtcCode int64 `json:"dtc_code,omitempty"`
	// RemoteAddress holds the value of the "remote_address" field.
	// ip地址
	RemoteAddress string `json:"remote_address,omitempty"`
	// TriggerTime holds the value of the "trigger_time" field.
	// 触发时间
	TriggerTime int64 `json:"trigger_time,omitempty"`
	// FinalTime holds the value of the "final_time" field.
	// 结束时间
	FinalTime int64 `json:"final_time,omitempty"`
	// Count holds the value of the "count" field.
	// 数量
	Count int `json:"count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentAlarmQuery when eager-loading is set.
	Edges                     EquipmentAlarmEdges `json:"edges"`
	equipment_equipment_alarm *int
}

// EquipmentAlarmEdges holds the relations/edges for other nodes in the graph.
type EquipmentAlarmEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment `json:"equipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentAlarmEdges) EquipmentOrErr() (*Equipment, error) {
	if e.loadedTypes[0] {
		if e.Equipment == nil {
			// The edge equipment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: equipment.Label}
		}
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EquipmentAlarm) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipmentalarm.FieldID, equipmentalarm.FieldDtcCode, equipmentalarm.FieldTriggerTime, equipmentalarm.FieldFinalTime, equipmentalarm.FieldCount:
			values[i] = new(sql.NullInt64)
		case equipmentalarm.FieldRemoteAddress:
			values[i] = new(sql.NullString)
		case equipmentalarm.ForeignKeys[0]: // equipment_equipment_alarm
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EquipmentAlarm", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EquipmentAlarm fields.
func (ea *EquipmentAlarm) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipmentalarm.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case equipmentalarm.FieldDtcCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dtc_code", values[i])
			} else if value.Valid {
				ea.DtcCode = value.Int64
			}
		case equipmentalarm.FieldRemoteAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remote_address", values[i])
			} else if value.Valid {
				ea.RemoteAddress = value.String
			}
		case equipmentalarm.FieldTriggerTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trigger_time", values[i])
			} else if value.Valid {
				ea.TriggerTime = value.Int64
			}
		case equipmentalarm.FieldFinalTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field final_time", values[i])
			} else if value.Valid {
				ea.FinalTime = value.Int64
			}
		case equipmentalarm.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				ea.Count = int(value.Int64)
			}
		case equipmentalarm.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field equipment_equipment_alarm", value)
			} else if value.Valid {
				ea.equipment_equipment_alarm = new(int)
				*ea.equipment_equipment_alarm = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEquipment queries the "equipment" edge of the EquipmentAlarm entity.
func (ea *EquipmentAlarm) QueryEquipment() *EquipmentQuery {
	return (&EquipmentAlarmClient{config: ea.config}).QueryEquipment(ea)
}

// Update returns a builder for updating this EquipmentAlarm.
// Note that you need to call EquipmentAlarm.Unwrap() before calling this method if this EquipmentAlarm
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EquipmentAlarm) Update() *EquipmentAlarmUpdateOne {
	return (&EquipmentAlarmClient{config: ea.config}).UpdateOne(ea)
}

// Unwrap unwraps the EquipmentAlarm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EquipmentAlarm) Unwrap() *EquipmentAlarm {
	tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EquipmentAlarm is not a transactional entity")
	}
	ea.config.driver = tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EquipmentAlarm) String() string {
	var builder strings.Builder
	builder.WriteString("EquipmentAlarm(")
	builder.WriteString(fmt.Sprintf("id=%v", ea.ID))
	builder.WriteString(", dtc_code=")
	builder.WriteString(fmt.Sprintf("%v", ea.DtcCode))
	builder.WriteString(", remote_address=")
	builder.WriteString(ea.RemoteAddress)
	builder.WriteString(", trigger_time=")
	builder.WriteString(fmt.Sprintf("%v", ea.TriggerTime))
	builder.WriteString(", final_time=")
	builder.WriteString(fmt.Sprintf("%v", ea.FinalTime))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", ea.Count))
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentAlarms is a parsable slice of EquipmentAlarm.
type EquipmentAlarms []*EquipmentAlarm

func (ea EquipmentAlarms) config(cfg config) {
	for _i := range ea {
		ea[_i].config = cfg
	}
}
