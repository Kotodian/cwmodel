// Code generated by ent, DO NOT EDIT.

package equipmentinfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/gokit/datasource"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EquipmentSn applies equality check predicate on the "equipment_sn" field. It's identical to EquipmentSnEQ.
func EquipmentSn(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipmentSn), v))
	})
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModelID), vc))
	})
}

// ManufacturerID applies equality check predicate on the "manufacturer_id" field. It's identical to ManufacturerIDEQ.
func ManufacturerID(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturerID), vc))
	})
}

// FirmwareID applies equality check predicate on the "firmware_id" field. It's identical to FirmwareIDEQ.
func FirmwareID(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirmwareID), vc))
	})
}

// AccessPod applies equality check predicate on the "access_pod" field. It's identical to AccessPodEQ.
func AccessPod(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPod), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v bool) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// EquipmentSnEQ applies the EQ predicate on the "equipment_sn" field.
func EquipmentSnEQ(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnNEQ applies the NEQ predicate on the "equipment_sn" field.
func EquipmentSnNEQ(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnIn applies the In predicate on the "equipment_sn" field.
func EquipmentSnIn(vs ...string) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEquipmentSn), v...))
	})
}

// EquipmentSnNotIn applies the NotIn predicate on the "equipment_sn" field.
func EquipmentSnNotIn(vs ...string) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEquipmentSn), v...))
	})
}

// EquipmentSnGT applies the GT predicate on the "equipment_sn" field.
func EquipmentSnGT(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnGTE applies the GTE predicate on the "equipment_sn" field.
func EquipmentSnGTE(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnLT applies the LT predicate on the "equipment_sn" field.
func EquipmentSnLT(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnLTE applies the LTE predicate on the "equipment_sn" field.
func EquipmentSnLTE(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnContains applies the Contains predicate on the "equipment_sn" field.
func EquipmentSnContains(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnHasPrefix applies the HasPrefix predicate on the "equipment_sn" field.
func EquipmentSnHasPrefix(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnHasSuffix applies the HasSuffix predicate on the "equipment_sn" field.
func EquipmentSnHasSuffix(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnEqualFold applies the EqualFold predicate on the "equipment_sn" field.
func EquipmentSnEqualFold(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEquipmentSn), v))
	})
}

// EquipmentSnContainsFold applies the ContainsFold predicate on the "equipment_sn" field.
func EquipmentSnContainsFold(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEquipmentSn), v))
	})
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModelID), vc))
	})
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModelID), vc))
	})
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...datasource.UUID) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldModelID), v...))
	})
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...datasource.UUID) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldModelID), v...))
	})
}

// ModelIDGT applies the GT predicate on the "model_id" field.
func ModelIDGT(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModelID), vc))
	})
}

// ModelIDGTE applies the GTE predicate on the "model_id" field.
func ModelIDGTE(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModelID), vc))
	})
}

// ModelIDLT applies the LT predicate on the "model_id" field.
func ModelIDLT(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModelID), vc))
	})
}

// ModelIDLTE applies the LTE predicate on the "model_id" field.
func ModelIDLTE(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModelID), vc))
	})
}

// ManufacturerIDEQ applies the EQ predicate on the "manufacturer_id" field.
func ManufacturerIDEQ(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturerID), vc))
	})
}

// ManufacturerIDNEQ applies the NEQ predicate on the "manufacturer_id" field.
func ManufacturerIDNEQ(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManufacturerID), vc))
	})
}

// ManufacturerIDIn applies the In predicate on the "manufacturer_id" field.
func ManufacturerIDIn(vs ...datasource.UUID) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldManufacturerID), v...))
	})
}

// ManufacturerIDNotIn applies the NotIn predicate on the "manufacturer_id" field.
func ManufacturerIDNotIn(vs ...datasource.UUID) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldManufacturerID), v...))
	})
}

// ManufacturerIDGT applies the GT predicate on the "manufacturer_id" field.
func ManufacturerIDGT(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManufacturerID), vc))
	})
}

// ManufacturerIDGTE applies the GTE predicate on the "manufacturer_id" field.
func ManufacturerIDGTE(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManufacturerID), vc))
	})
}

// ManufacturerIDLT applies the LT predicate on the "manufacturer_id" field.
func ManufacturerIDLT(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManufacturerID), vc))
	})
}

// ManufacturerIDLTE applies the LTE predicate on the "manufacturer_id" field.
func ManufacturerIDLTE(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManufacturerID), vc))
	})
}

// FirmwareIDEQ applies the EQ predicate on the "firmware_id" field.
func FirmwareIDEQ(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirmwareID), vc))
	})
}

// FirmwareIDNEQ applies the NEQ predicate on the "firmware_id" field.
func FirmwareIDNEQ(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirmwareID), vc))
	})
}

// FirmwareIDIn applies the In predicate on the "firmware_id" field.
func FirmwareIDIn(vs ...datasource.UUID) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirmwareID), v...))
	})
}

// FirmwareIDNotIn applies the NotIn predicate on the "firmware_id" field.
func FirmwareIDNotIn(vs ...datasource.UUID) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirmwareID), v...))
	})
}

// FirmwareIDGT applies the GT predicate on the "firmware_id" field.
func FirmwareIDGT(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirmwareID), vc))
	})
}

// FirmwareIDGTE applies the GTE predicate on the "firmware_id" field.
func FirmwareIDGTE(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirmwareID), vc))
	})
}

// FirmwareIDLT applies the LT predicate on the "firmware_id" field.
func FirmwareIDLT(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirmwareID), vc))
	})
}

// FirmwareIDLTE applies the LTE predicate on the "firmware_id" field.
func FirmwareIDLTE(v datasource.UUID) predicate.EquipmentInfo {
	vc := uint64(v)
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirmwareID), vc))
	})
}

// AccessPodEQ applies the EQ predicate on the "access_pod" field.
func AccessPodEQ(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPod), v))
	})
}

// AccessPodNEQ applies the NEQ predicate on the "access_pod" field.
func AccessPodNEQ(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessPod), v))
	})
}

// AccessPodIn applies the In predicate on the "access_pod" field.
func AccessPodIn(vs ...string) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccessPod), v...))
	})
}

// AccessPodNotIn applies the NotIn predicate on the "access_pod" field.
func AccessPodNotIn(vs ...string) predicate.EquipmentInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccessPod), v...))
	})
}

// AccessPodGT applies the GT predicate on the "access_pod" field.
func AccessPodGT(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessPod), v))
	})
}

// AccessPodGTE applies the GTE predicate on the "access_pod" field.
func AccessPodGTE(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessPod), v))
	})
}

// AccessPodLT applies the LT predicate on the "access_pod" field.
func AccessPodLT(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessPod), v))
	})
}

// AccessPodLTE applies the LTE predicate on the "access_pod" field.
func AccessPodLTE(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessPod), v))
	})
}

// AccessPodContains applies the Contains predicate on the "access_pod" field.
func AccessPodContains(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessPod), v))
	})
}

// AccessPodHasPrefix applies the HasPrefix predicate on the "access_pod" field.
func AccessPodHasPrefix(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessPod), v))
	})
}

// AccessPodHasSuffix applies the HasSuffix predicate on the "access_pod" field.
func AccessPodHasSuffix(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessPod), v))
	})
}

// AccessPodEqualFold applies the EqualFold predicate on the "access_pod" field.
func AccessPodEqualFold(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessPod), v))
	})
}

// AccessPodContainsFold applies the ContainsFold predicate on the "access_pod" field.
func AccessPodContainsFold(v string) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessPod), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v bool) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v bool) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EquipmentInfo) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EquipmentInfo) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EquipmentInfo) predicate.EquipmentInfo {
	return predicate.EquipmentInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
