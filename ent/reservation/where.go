// Code generated by ent, DO NOT EDIT.

package reservation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Kotodian/ent-practice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ReservationID applies equality check predicate on the "reservation_id" field. It's identical to ReservationIDEQ.
func ReservationID(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservationID), v))
	})
}

// AuthorizationMode applies equality check predicate on the "authorization_mode" field. It's identical to AuthorizationModeEQ.
func AuthorizationMode(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizationMode), v))
	})
}

// AuthorizationID applies equality check predicate on the "authorization_id" field. It's identical to AuthorizationIDEQ.
func AuthorizationID(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizationID), v))
	})
}

// Additional applies equality check predicate on the "additional" field. It's identical to AdditionalEQ.
func Additional(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditional), v))
	})
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// Expired applies equality check predicate on the "expired" field. It's identical to ExpiredEQ.
func Expired(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// ReservationIDEQ applies the EQ predicate on the "reservation_id" field.
func ReservationIDEQ(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservationID), v))
	})
}

// ReservationIDNEQ applies the NEQ predicate on the "reservation_id" field.
func ReservationIDNEQ(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReservationID), v))
	})
}

// ReservationIDIn applies the In predicate on the "reservation_id" field.
func ReservationIDIn(vs ...int64) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReservationID), v...))
	})
}

// ReservationIDNotIn applies the NotIn predicate on the "reservation_id" field.
func ReservationIDNotIn(vs ...int64) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReservationID), v...))
	})
}

// ReservationIDGT applies the GT predicate on the "reservation_id" field.
func ReservationIDGT(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReservationID), v))
	})
}

// ReservationIDGTE applies the GTE predicate on the "reservation_id" field.
func ReservationIDGTE(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReservationID), v))
	})
}

// ReservationIDLT applies the LT predicate on the "reservation_id" field.
func ReservationIDLT(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReservationID), v))
	})
}

// ReservationIDLTE applies the LTE predicate on the "reservation_id" field.
func ReservationIDLTE(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReservationID), v))
	})
}

// AuthorizationModeEQ applies the EQ predicate on the "authorization_mode" field.
func AuthorizationModeEQ(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizationMode), v))
	})
}

// AuthorizationModeNEQ applies the NEQ predicate on the "authorization_mode" field.
func AuthorizationModeNEQ(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorizationMode), v))
	})
}

// AuthorizationModeIn applies the In predicate on the "authorization_mode" field.
func AuthorizationModeIn(vs ...int) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAuthorizationMode), v...))
	})
}

// AuthorizationModeNotIn applies the NotIn predicate on the "authorization_mode" field.
func AuthorizationModeNotIn(vs ...int) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAuthorizationMode), v...))
	})
}

// AuthorizationModeGT applies the GT predicate on the "authorization_mode" field.
func AuthorizationModeGT(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthorizationMode), v))
	})
}

// AuthorizationModeGTE applies the GTE predicate on the "authorization_mode" field.
func AuthorizationModeGTE(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthorizationMode), v))
	})
}

// AuthorizationModeLT applies the LT predicate on the "authorization_mode" field.
func AuthorizationModeLT(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthorizationMode), v))
	})
}

// AuthorizationModeLTE applies the LTE predicate on the "authorization_mode" field.
func AuthorizationModeLTE(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthorizationMode), v))
	})
}

// AuthorizationIDEQ applies the EQ predicate on the "authorization_id" field.
func AuthorizationIDEQ(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDNEQ applies the NEQ predicate on the "authorization_id" field.
func AuthorizationIDNEQ(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDIn applies the In predicate on the "authorization_id" field.
func AuthorizationIDIn(vs ...string) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAuthorizationID), v...))
	})
}

// AuthorizationIDNotIn applies the NotIn predicate on the "authorization_id" field.
func AuthorizationIDNotIn(vs ...string) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAuthorizationID), v...))
	})
}

// AuthorizationIDGT applies the GT predicate on the "authorization_id" field.
func AuthorizationIDGT(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDGTE applies the GTE predicate on the "authorization_id" field.
func AuthorizationIDGTE(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDLT applies the LT predicate on the "authorization_id" field.
func AuthorizationIDLT(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDLTE applies the LTE predicate on the "authorization_id" field.
func AuthorizationIDLTE(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDContains applies the Contains predicate on the "authorization_id" field.
func AuthorizationIDContains(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDHasPrefix applies the HasPrefix predicate on the "authorization_id" field.
func AuthorizationIDHasPrefix(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDHasSuffix applies the HasSuffix predicate on the "authorization_id" field.
func AuthorizationIDHasSuffix(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDEqualFold applies the EqualFold predicate on the "authorization_id" field.
func AuthorizationIDEqualFold(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthorizationID), v))
	})
}

// AuthorizationIDContainsFold applies the ContainsFold predicate on the "authorization_id" field.
func AuthorizationIDContainsFold(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthorizationID), v))
	})
}

// AdditionalEQ applies the EQ predicate on the "additional" field.
func AdditionalEQ(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditional), v))
	})
}

// AdditionalNEQ applies the NEQ predicate on the "additional" field.
func AdditionalNEQ(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdditional), v))
	})
}

// AdditionalIn applies the In predicate on the "additional" field.
func AdditionalIn(vs ...string) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAdditional), v...))
	})
}

// AdditionalNotIn applies the NotIn predicate on the "additional" field.
func AdditionalNotIn(vs ...string) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAdditional), v...))
	})
}

// AdditionalGT applies the GT predicate on the "additional" field.
func AdditionalGT(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdditional), v))
	})
}

// AdditionalGTE applies the GTE predicate on the "additional" field.
func AdditionalGTE(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdditional), v))
	})
}

// AdditionalLT applies the LT predicate on the "additional" field.
func AdditionalLT(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdditional), v))
	})
}

// AdditionalLTE applies the LTE predicate on the "additional" field.
func AdditionalLTE(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdditional), v))
	})
}

// AdditionalContains applies the Contains predicate on the "additional" field.
func AdditionalContains(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdditional), v))
	})
}

// AdditionalHasPrefix applies the HasPrefix predicate on the "additional" field.
func AdditionalHasPrefix(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdditional), v))
	})
}

// AdditionalHasSuffix applies the HasSuffix predicate on the "additional" field.
func AdditionalHasSuffix(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdditional), v))
	})
}

// AdditionalIsNil applies the IsNil predicate on the "additional" field.
func AdditionalIsNil() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdditional)))
	})
}

// AdditionalNotNil applies the NotNil predicate on the "additional" field.
func AdditionalNotNil() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdditional)))
	})
}

// AdditionalEqualFold applies the EqualFold predicate on the "additional" field.
func AdditionalEqualFold(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdditional), v))
	})
}

// AdditionalContainsFold applies the ContainsFold predicate on the "additional" field.
func AdditionalContainsFold(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdditional), v))
	})
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerID), v))
	})
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerID), v))
	})
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerID), v))
	})
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerID), v))
	})
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerID), v))
	})
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerID), v))
	})
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerID), v))
	})
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCustomerID)))
	})
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCustomerID)))
	})
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerID), v))
	})
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerID), v))
	})
}

// ExpiredEQ applies the EQ predicate on the "expired" field.
func ExpiredEQ(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpired), v))
	})
}

// ExpiredNEQ applies the NEQ predicate on the "expired" field.
func ExpiredNEQ(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpired), v))
	})
}

// ExpiredIn applies the In predicate on the "expired" field.
func ExpiredIn(vs ...int64) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExpired), v...))
	})
}

// ExpiredNotIn applies the NotIn predicate on the "expired" field.
func ExpiredNotIn(vs ...int64) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExpired), v...))
	})
}

// ExpiredGT applies the GT predicate on the "expired" field.
func ExpiredGT(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpired), v))
	})
}

// ExpiredGTE applies the GTE predicate on the "expired" field.
func ExpiredGTE(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpired), v))
	})
}

// ExpiredLT applies the LT predicate on the "expired" field.
func ExpiredLT(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpired), v))
	})
}

// ExpiredLTE applies the LTE predicate on the "expired" field.
func ExpiredLTE(v int64) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpired), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.Reservation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnector applies the HasEdge predicate on the "connector" edge.
func HasConnector() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConnectorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectorTable, ConnectorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectorWith applies the HasEdge predicate on the "connector" edge with a given conditions (other predicates).
func HasConnectorWith(preds ...predicate.Connector) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConnectorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectorTable, ConnectorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		p(s.Not())
	})
}
