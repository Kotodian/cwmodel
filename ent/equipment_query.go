// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/ent-practice/ent/connector"
	"github.com/Kotodian/ent-practice/ent/equipment"
	"github.com/Kotodian/ent-practice/ent/equipmentalarm"
	"github.com/Kotodian/ent-practice/ent/equipmentfirmwareeffect"
	"github.com/Kotodian/ent-practice/ent/equipmentinfo"
	"github.com/Kotodian/ent-practice/ent/equipmentiot"
	"github.com/Kotodian/ent-practice/ent/evse"
	"github.com/Kotodian/ent-practice/ent/orderinfo"
	"github.com/Kotodian/ent-practice/ent/predicate"
	"github.com/Kotodian/ent-practice/ent/reservation"
)

// EquipmentQuery is the builder for querying Equipment entities.
type EquipmentQuery struct {
	config
	limit                       *int
	offset                      *int
	unique                      *bool
	order                       []OrderFunc
	fields                      []string
	predicates                  []predicate.Equipment
	withEquipmentInfo           *EquipmentInfoQuery
	withEvse                    *EvseQuery
	withConnector               *ConnectorQuery
	withEquipmentAlarm          *EquipmentAlarmQuery
	withEquipmentIot            *EquipmentIotQuery
	withEquipmentFirmwareEffect *EquipmentFirmwareEffectQuery
	withOrderInfo               *OrderInfoQuery
	withReservation             *ReservationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EquipmentQuery builder.
func (eq *EquipmentQuery) Where(ps ...predicate.Equipment) *EquipmentQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *EquipmentQuery) Limit(limit int) *EquipmentQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *EquipmentQuery) Offset(offset int) *EquipmentQuery {
	eq.offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EquipmentQuery) Unique(unique bool) *EquipmentQuery {
	eq.unique = &unique
	return eq
}

// Order adds an order step to the query.
func (eq *EquipmentQuery) Order(o ...OrderFunc) *EquipmentQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryEquipmentInfo chains the current query on the "equipment_info" edge.
func (eq *EquipmentQuery) QueryEquipmentInfo() *EquipmentInfoQuery {
	query := &EquipmentInfoQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(equipmentinfo.Table, equipmentinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.EquipmentInfoTable, equipment.EquipmentInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvse chains the current query on the "evse" edge.
func (eq *EquipmentQuery) QueryEvse() *EvseQuery {
	query := &EvseQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(evse.Table, evse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EvseTable, equipment.EvseColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnector chains the current query on the "connector" edge.
func (eq *EquipmentQuery) QueryConnector() *ConnectorQuery {
	query := &ConnectorQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.ConnectorTable, equipment.ConnectorColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEquipmentAlarm chains the current query on the "equipment_alarm" edge.
func (eq *EquipmentQuery) QueryEquipmentAlarm() *EquipmentAlarmQuery {
	query := &EquipmentAlarmQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(equipmentalarm.Table, equipmentalarm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EquipmentAlarmTable, equipment.EquipmentAlarmColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEquipmentIot chains the current query on the "equipment_iot" edge.
func (eq *EquipmentQuery) QueryEquipmentIot() *EquipmentIotQuery {
	query := &EquipmentIotQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(equipmentiot.Table, equipmentiot.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipment.EquipmentIotTable, equipment.EquipmentIotColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEquipmentFirmwareEffect chains the current query on the "equipment_firmware_effect" edge.
func (eq *EquipmentQuery) QueryEquipmentFirmwareEffect() *EquipmentFirmwareEffectQuery {
	query := &EquipmentFirmwareEffectQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(equipmentfirmwareeffect.Table, equipmentfirmwareeffect.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EquipmentFirmwareEffectTable, equipment.EquipmentFirmwareEffectColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderInfo chains the current query on the "order_info" edge.
func (eq *EquipmentQuery) QueryOrderInfo() *OrderInfoQuery {
	query := &OrderInfoQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(orderinfo.Table, orderinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.OrderInfoTable, equipment.OrderInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReservation chains the current query on the "reservation" edge.
func (eq *EquipmentQuery) QueryReservation() *ReservationQuery {
	query := &ReservationQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, selector),
			sqlgraph.To(reservation.Table, reservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.ReservationTable, equipment.ReservationColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Equipment entity from the query.
// Returns a *NotFoundError when no Equipment was found.
func (eq *EquipmentQuery) First(ctx context.Context) (*Equipment, error) {
	nodes, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{equipment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EquipmentQuery) FirstX(ctx context.Context) *Equipment {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Equipment ID from the query.
// Returns a *NotFoundError when no Equipment ID was found.
func (eq *EquipmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{equipment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EquipmentQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Equipment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Equipment entity is found.
// Returns a *NotFoundError when no Equipment entities are found.
func (eq *EquipmentQuery) Only(ctx context.Context) (*Equipment, error) {
	nodes, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{equipment.Label}
	default:
		return nil, &NotSingularError{equipment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EquipmentQuery) OnlyX(ctx context.Context) *Equipment {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Equipment ID in the query.
// Returns a *NotSingularError when more than one Equipment ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EquipmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{equipment.Label}
	default:
		err = &NotSingularError{equipment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EquipmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EquipmentSlice.
func (eq *EquipmentQuery) All(ctx context.Context) ([]*Equipment, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *EquipmentQuery) AllX(ctx context.Context) []*Equipment {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Equipment IDs.
func (eq *EquipmentQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := eq.Select(equipment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EquipmentQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EquipmentQuery) Count(ctx context.Context) (int, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EquipmentQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EquipmentQuery) Exist(ctx context.Context) (bool, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EquipmentQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EquipmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EquipmentQuery) Clone() *EquipmentQuery {
	if eq == nil {
		return nil
	}
	return &EquipmentQuery{
		config:                      eq.config,
		limit:                       eq.limit,
		offset:                      eq.offset,
		order:                       append([]OrderFunc{}, eq.order...),
		predicates:                  append([]predicate.Equipment{}, eq.predicates...),
		withEquipmentInfo:           eq.withEquipmentInfo.Clone(),
		withEvse:                    eq.withEvse.Clone(),
		withConnector:               eq.withConnector.Clone(),
		withEquipmentAlarm:          eq.withEquipmentAlarm.Clone(),
		withEquipmentIot:            eq.withEquipmentIot.Clone(),
		withEquipmentFirmwareEffect: eq.withEquipmentFirmwareEffect.Clone(),
		withOrderInfo:               eq.withOrderInfo.Clone(),
		withReservation:             eq.withReservation.Clone(),
		// clone intermediate query.
		sql:    eq.sql.Clone(),
		path:   eq.path,
		unique: eq.unique,
	}
}

// WithEquipmentInfo tells the query-builder to eager-load the nodes that are connected to
// the "equipment_info" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithEquipmentInfo(opts ...func(*EquipmentInfoQuery)) *EquipmentQuery {
	query := &EquipmentInfoQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEquipmentInfo = query
	return eq
}

// WithEvse tells the query-builder to eager-load the nodes that are connected to
// the "evse" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithEvse(opts ...func(*EvseQuery)) *EquipmentQuery {
	query := &EvseQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEvse = query
	return eq
}

// WithConnector tells the query-builder to eager-load the nodes that are connected to
// the "connector" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithConnector(opts ...func(*ConnectorQuery)) *EquipmentQuery {
	query := &ConnectorQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withConnector = query
	return eq
}

// WithEquipmentAlarm tells the query-builder to eager-load the nodes that are connected to
// the "equipment_alarm" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithEquipmentAlarm(opts ...func(*EquipmentAlarmQuery)) *EquipmentQuery {
	query := &EquipmentAlarmQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEquipmentAlarm = query
	return eq
}

// WithEquipmentIot tells the query-builder to eager-load the nodes that are connected to
// the "equipment_iot" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithEquipmentIot(opts ...func(*EquipmentIotQuery)) *EquipmentQuery {
	query := &EquipmentIotQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEquipmentIot = query
	return eq
}

// WithEquipmentFirmwareEffect tells the query-builder to eager-load the nodes that are connected to
// the "equipment_firmware_effect" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithEquipmentFirmwareEffect(opts ...func(*EquipmentFirmwareEffectQuery)) *EquipmentQuery {
	query := &EquipmentFirmwareEffectQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEquipmentFirmwareEffect = query
	return eq
}

// WithOrderInfo tells the query-builder to eager-load the nodes that are connected to
// the "order_info" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithOrderInfo(opts ...func(*OrderInfoQuery)) *EquipmentQuery {
	query := &OrderInfoQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withOrderInfo = query
	return eq
}

// WithReservation tells the query-builder to eager-load the nodes that are connected to
// the "reservation" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EquipmentQuery) WithReservation(opts ...func(*ReservationQuery)) *EquipmentQuery {
	query := &ReservationQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withReservation = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Sn string `json:"sn,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Equipment.Query().
//		GroupBy(equipment.FieldSn).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EquipmentQuery) GroupBy(field string, fields ...string) *EquipmentGroupBy {
	grbuild := &EquipmentGroupBy{config: eq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(ctx), nil
	}
	grbuild.label = equipment.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Sn string `json:"sn,omitempty"`
//	}
//
//	client.Equipment.Query().
//		Select(equipment.FieldSn).
//		Scan(ctx, &v)
func (eq *EquipmentQuery) Select(fields ...string) *EquipmentSelect {
	eq.fields = append(eq.fields, fields...)
	selbuild := &EquipmentSelect{EquipmentQuery: eq}
	selbuild.label = equipment.Label
	selbuild.flds, selbuild.scan = &eq.fields, selbuild.Scan
	return selbuild
}

func (eq *EquipmentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eq.fields {
		if !equipment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EquipmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Equipment, error) {
	var (
		nodes       = []*Equipment{}
		_spec       = eq.querySpec()
		loadedTypes = [8]bool{
			eq.withEquipmentInfo != nil,
			eq.withEvse != nil,
			eq.withConnector != nil,
			eq.withEquipmentAlarm != nil,
			eq.withEquipmentIot != nil,
			eq.withEquipmentFirmwareEffect != nil,
			eq.withOrderInfo != nil,
			eq.withReservation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Equipment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Equipment{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withEquipmentInfo; query != nil {
		if err := eq.loadEquipmentInfo(ctx, query, nodes, nil,
			func(n *Equipment, e *EquipmentInfo) { n.Edges.EquipmentInfo = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEvse; query != nil {
		if err := eq.loadEvse(ctx, query, nodes,
			func(n *Equipment) { n.Edges.Evse = []*Evse{} },
			func(n *Equipment, e *Evse) { n.Edges.Evse = append(n.Edges.Evse, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withConnector; query != nil {
		if err := eq.loadConnector(ctx, query, nodes,
			func(n *Equipment) { n.Edges.Connector = []*Connector{} },
			func(n *Equipment, e *Connector) { n.Edges.Connector = append(n.Edges.Connector, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEquipmentAlarm; query != nil {
		if err := eq.loadEquipmentAlarm(ctx, query, nodes,
			func(n *Equipment) { n.Edges.EquipmentAlarm = []*EquipmentAlarm{} },
			func(n *Equipment, e *EquipmentAlarm) { n.Edges.EquipmentAlarm = append(n.Edges.EquipmentAlarm, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEquipmentIot; query != nil {
		if err := eq.loadEquipmentIot(ctx, query, nodes, nil,
			func(n *Equipment, e *EquipmentIot) { n.Edges.EquipmentIot = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEquipmentFirmwareEffect; query != nil {
		if err := eq.loadEquipmentFirmwareEffect(ctx, query, nodes,
			func(n *Equipment) { n.Edges.EquipmentFirmwareEffect = []*EquipmentFirmwareEffect{} },
			func(n *Equipment, e *EquipmentFirmwareEffect) {
				n.Edges.EquipmentFirmwareEffect = append(n.Edges.EquipmentFirmwareEffect, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withOrderInfo; query != nil {
		if err := eq.loadOrderInfo(ctx, query, nodes,
			func(n *Equipment) { n.Edges.OrderInfo = []*OrderInfo{} },
			func(n *Equipment, e *OrderInfo) { n.Edges.OrderInfo = append(n.Edges.OrderInfo, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withReservation; query != nil {
		if err := eq.loadReservation(ctx, query, nodes,
			func(n *Equipment) { n.Edges.Reservation = []*Reservation{} },
			func(n *Equipment, e *Reservation) { n.Edges.Reservation = append(n.Edges.Reservation, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EquipmentQuery) loadEquipmentInfo(ctx context.Context, query *EquipmentInfoQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *EquipmentInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.EquipmentInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.EquipmentInfoColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EquipmentQuery) loadEvse(ctx context.Context, query *EvseQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *Evse)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Evse(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.EvseColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EquipmentQuery) loadConnector(ctx context.Context, query *ConnectorQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *Connector)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.ConnectorColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EquipmentQuery) loadEquipmentAlarm(ctx context.Context, query *EquipmentAlarmQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *EquipmentAlarm)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EquipmentAlarm(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.EquipmentAlarmColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EquipmentQuery) loadEquipmentIot(ctx context.Context, query *EquipmentIotQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *EquipmentIot)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.EquipmentIot(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.EquipmentIotColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EquipmentQuery) loadEquipmentFirmwareEffect(ctx context.Context, query *EquipmentFirmwareEffectQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *EquipmentFirmwareEffect)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EquipmentFirmwareEffect(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.EquipmentFirmwareEffectColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EquipmentQuery) loadOrderInfo(ctx context.Context, query *OrderInfoQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *OrderInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.OrderInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.OrderInfoColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EquipmentQuery) loadReservation(ctx context.Context, query *ReservationQuery, nodes []*Equipment, init func(*Equipment), assign func(*Equipment, *Reservation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Equipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.InValues(equipment.ReservationColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.equipment_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "equipment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "equipment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *EquipmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.fields
	if len(eq.fields) > 0 {
		_spec.Unique = eq.unique != nil && *eq.unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EquipmentQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (eq *EquipmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipment.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if unique := eq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipment.FieldID)
		for i := range fields {
			if fields[i] != equipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EquipmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(equipment.Table)
	columns := eq.fields
	if len(columns) == 0 {
		columns = equipment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.unique != nil && *eq.unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EquipmentGroupBy is the group-by builder for Equipment entities.
type EquipmentGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EquipmentGroupBy) Aggregate(fns ...AggregateFunc) *EquipmentGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scans the result into the given value.
func (egb *EquipmentGroupBy) Scan(ctx context.Context, v any) error {
	query, err := egb.path(ctx)
	if err != nil {
		return err
	}
	egb.sql = query
	return egb.sqlScan(ctx, v)
}

func (egb *EquipmentGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range egb.fields {
		if !equipment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := egb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *EquipmentGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql.Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(egb.fields)+len(egb.fns))
		for _, f := range egb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(egb.fields...)...)
}

// EquipmentSelect is the builder for selecting fields of Equipment entities.
type EquipmentSelect struct {
	*EquipmentQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (es *EquipmentSelect) Scan(ctx context.Context, v any) error {
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	es.sql = es.EquipmentQuery.sqlQuery(ctx)
	return es.sqlScan(ctx, v)
}

func (es *EquipmentSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := es.sql.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
