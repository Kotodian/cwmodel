// Code generated by ent, DO NOT EDIT.

package cwmodel

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Kotodian/cwmodel/equipment"
	"github.com/Kotodian/cwmodel/equipmentalarm"
	"github.com/Kotodian/gokit/datasource"
)

// EquipmentAlarmCreate is the builder for creating a EquipmentAlarm entity.
type EquipmentAlarmCreate struct {
	config
	mutation *EquipmentAlarmMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (eac *EquipmentAlarmCreate) SetVersion(i int64) *EquipmentAlarmCreate {
	eac.mutation.SetVersion(i)
	return eac
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableVersion(i *int64) *EquipmentAlarmCreate {
	if i != nil {
		eac.SetVersion(*i)
	}
	return eac
}

// SetCreatedBy sets the "created_by" field.
func (eac *EquipmentAlarmCreate) SetCreatedBy(d datasource.UUID) *EquipmentAlarmCreate {
	eac.mutation.SetCreatedBy(d)
	return eac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableCreatedBy(d *datasource.UUID) *EquipmentAlarmCreate {
	if d != nil {
		eac.SetCreatedBy(*d)
	}
	return eac
}

// SetCreatedAt sets the "created_at" field.
func (eac *EquipmentAlarmCreate) SetCreatedAt(i int64) *EquipmentAlarmCreate {
	eac.mutation.SetCreatedAt(i)
	return eac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableCreatedAt(i *int64) *EquipmentAlarmCreate {
	if i != nil {
		eac.SetCreatedAt(*i)
	}
	return eac
}

// SetUpdatedBy sets the "updated_by" field.
func (eac *EquipmentAlarmCreate) SetUpdatedBy(d datasource.UUID) *EquipmentAlarmCreate {
	eac.mutation.SetUpdatedBy(d)
	return eac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableUpdatedBy(d *datasource.UUID) *EquipmentAlarmCreate {
	if d != nil {
		eac.SetUpdatedBy(*d)
	}
	return eac
}

// SetUpdatedAt sets the "updated_at" field.
func (eac *EquipmentAlarmCreate) SetUpdatedAt(i int64) *EquipmentAlarmCreate {
	eac.mutation.SetUpdatedAt(i)
	return eac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableUpdatedAt(i *int64) *EquipmentAlarmCreate {
	if i != nil {
		eac.SetUpdatedAt(*i)
	}
	return eac
}

// SetEquipmentID sets the "equipment_id" field.
func (eac *EquipmentAlarmCreate) SetEquipmentID(d datasource.UUID) *EquipmentAlarmCreate {
	eac.mutation.SetEquipmentID(d)
	return eac
}

// SetDtcCode sets the "dtc_code" field.
func (eac *EquipmentAlarmCreate) SetDtcCode(i int64) *EquipmentAlarmCreate {
	eac.mutation.SetDtcCode(i)
	return eac
}

// SetRemoteAddress sets the "remote_address" field.
func (eac *EquipmentAlarmCreate) SetRemoteAddress(s string) *EquipmentAlarmCreate {
	eac.mutation.SetRemoteAddress(s)
	return eac
}

// SetTriggerTime sets the "trigger_time" field.
func (eac *EquipmentAlarmCreate) SetTriggerTime(i int64) *EquipmentAlarmCreate {
	eac.mutation.SetTriggerTime(i)
	return eac
}

// SetNillableTriggerTime sets the "trigger_time" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableTriggerTime(i *int64) *EquipmentAlarmCreate {
	if i != nil {
		eac.SetTriggerTime(*i)
	}
	return eac
}

// SetFinalTime sets the "final_time" field.
func (eac *EquipmentAlarmCreate) SetFinalTime(i int64) *EquipmentAlarmCreate {
	eac.mutation.SetFinalTime(i)
	return eac
}

// SetNillableFinalTime sets the "final_time" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableFinalTime(i *int64) *EquipmentAlarmCreate {
	if i != nil {
		eac.SetFinalTime(*i)
	}
	return eac
}

// SetCount sets the "count" field.
func (eac *EquipmentAlarmCreate) SetCount(i int) *EquipmentAlarmCreate {
	eac.mutation.SetCount(i)
	return eac
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableCount(i *int) *EquipmentAlarmCreate {
	if i != nil {
		eac.SetCount(*i)
	}
	return eac
}

// SetID sets the "id" field.
func (eac *EquipmentAlarmCreate) SetID(d datasource.UUID) *EquipmentAlarmCreate {
	eac.mutation.SetID(d)
	return eac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (eac *EquipmentAlarmCreate) SetNillableID(d *datasource.UUID) *EquipmentAlarmCreate {
	if d != nil {
		eac.SetID(*d)
	}
	return eac
}

// SetEquipment sets the "equipment" edge to the Equipment entity.
func (eac *EquipmentAlarmCreate) SetEquipment(e *Equipment) *EquipmentAlarmCreate {
	return eac.SetEquipmentID(e.ID)
}

// Mutation returns the EquipmentAlarmMutation object of the builder.
func (eac *EquipmentAlarmCreate) Mutation() *EquipmentAlarmMutation {
	return eac.mutation
}

// Save creates the EquipmentAlarm in the database.
func (eac *EquipmentAlarmCreate) Save(ctx context.Context) (*EquipmentAlarm, error) {
	var (
		err  error
		node *EquipmentAlarm
	)
	eac.defaults()
	if len(eac.hooks) == 0 {
		if err = eac.check(); err != nil {
			return nil, err
		}
		node, err = eac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentAlarmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eac.check(); err != nil {
				return nil, err
			}
			eac.mutation = mutation
			if node, err = eac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(eac.hooks) - 1; i >= 0; i-- {
			if eac.hooks[i] == nil {
				return nil, fmt.Errorf("cwmodel: uninitialized hook (forgotten import cwmodel/runtime?)")
			}
			mut = eac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EquipmentAlarm)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EquipmentAlarmMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EquipmentAlarmCreate) SaveX(ctx context.Context) *EquipmentAlarm {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eac *EquipmentAlarmCreate) Exec(ctx context.Context) error {
	_, err := eac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eac *EquipmentAlarmCreate) ExecX(ctx context.Context) {
	if err := eac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eac *EquipmentAlarmCreate) defaults() {
	if _, ok := eac.mutation.Version(); !ok {
		v := equipmentalarm.DefaultVersion
		eac.mutation.SetVersion(v)
	}
	if _, ok := eac.mutation.CreatedBy(); !ok {
		v := equipmentalarm.DefaultCreatedBy
		eac.mutation.SetCreatedBy(v)
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		v := equipmentalarm.DefaultCreatedAt
		eac.mutation.SetCreatedAt(v)
	}
	if _, ok := eac.mutation.UpdatedBy(); !ok {
		v := equipmentalarm.DefaultUpdatedBy
		eac.mutation.SetUpdatedBy(v)
	}
	if _, ok := eac.mutation.UpdatedAt(); !ok {
		v := equipmentalarm.DefaultUpdatedAt
		eac.mutation.SetUpdatedAt(v)
	}
	if _, ok := eac.mutation.Count(); !ok {
		v := equipmentalarm.DefaultCount
		eac.mutation.SetCount(v)
	}
	if _, ok := eac.mutation.ID(); !ok {
		v := equipmentalarm.DefaultID
		eac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eac *EquipmentAlarmCreate) check() error {
	if _, ok := eac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.version"`)}
	}
	if _, ok := eac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.created_by"`)}
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.created_at"`)}
	}
	if _, ok := eac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.updated_by"`)}
	}
	if _, ok := eac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.updated_at"`)}
	}
	if _, ok := eac.mutation.EquipmentID(); !ok {
		return &ValidationError{Name: "equipment_id", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.equipment_id"`)}
	}
	if _, ok := eac.mutation.DtcCode(); !ok {
		return &ValidationError{Name: "dtc_code", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.dtc_code"`)}
	}
	if _, ok := eac.mutation.RemoteAddress(); !ok {
		return &ValidationError{Name: "remote_address", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.remote_address"`)}
	}
	if _, ok := eac.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`cwmodel: missing required field "EquipmentAlarm.count"`)}
	}
	if _, ok := eac.mutation.EquipmentID(); !ok {
		return &ValidationError{Name: "equipment", err: errors.New(`cwmodel: missing required edge "EquipmentAlarm.equipment"`)}
	}
	return nil
}

func (eac *EquipmentAlarmCreate) sqlSave(ctx context.Context) (*EquipmentAlarm, error) {
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = datasource.UUID(id)
	}
	return _node, nil
}

func (eac *EquipmentAlarmCreate) createSpec() (*EquipmentAlarm, *sqlgraph.CreateSpec) {
	var (
		_node = &EquipmentAlarm{config: eac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: equipmentalarm.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: equipmentalarm.FieldID,
			},
		}
	)
	if id, ok := eac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eac.mutation.Version(); ok {
		_spec.SetField(equipmentalarm.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := eac.mutation.CreatedBy(); ok {
		_spec.SetField(equipmentalarm.FieldCreatedBy, field.TypeUint64, value)
		_node.CreatedBy = value
	}
	if value, ok := eac.mutation.CreatedAt(); ok {
		_spec.SetField(equipmentalarm.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := eac.mutation.UpdatedBy(); ok {
		_spec.SetField(equipmentalarm.FieldUpdatedBy, field.TypeUint64, value)
		_node.UpdatedBy = value
	}
	if value, ok := eac.mutation.UpdatedAt(); ok {
		_spec.SetField(equipmentalarm.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := eac.mutation.DtcCode(); ok {
		_spec.SetField(equipmentalarm.FieldDtcCode, field.TypeInt64, value)
		_node.DtcCode = value
	}
	if value, ok := eac.mutation.RemoteAddress(); ok {
		_spec.SetField(equipmentalarm.FieldRemoteAddress, field.TypeString, value)
		_node.RemoteAddress = value
	}
	if value, ok := eac.mutation.TriggerTime(); ok {
		_spec.SetField(equipmentalarm.FieldTriggerTime, field.TypeInt64, value)
		_node.TriggerTime = &value
	}
	if value, ok := eac.mutation.FinalTime(); ok {
		_spec.SetField(equipmentalarm.FieldFinalTime, field.TypeInt64, value)
		_node.FinalTime = &value
	}
	if value, ok := eac.mutation.Count(); ok {
		_spec.SetField(equipmentalarm.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if nodes := eac.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentalarm.EquipmentTable,
			Columns: []string{equipmentalarm.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EquipmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EquipmentAlarmCreateBulk is the builder for creating many EquipmentAlarm entities in bulk.
type EquipmentAlarmCreateBulk struct {
	config
	builders []*EquipmentAlarmCreate
}

// Save creates the EquipmentAlarm entities in the database.
func (eacb *EquipmentAlarmCreateBulk) Save(ctx context.Context) ([]*EquipmentAlarm, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EquipmentAlarm, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EquipmentAlarmMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = datasource.UUID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EquipmentAlarmCreateBulk) SaveX(ctx context.Context) []*EquipmentAlarm {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eacb *EquipmentAlarmCreateBulk) Exec(ctx context.Context) error {
	_, err := eacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eacb *EquipmentAlarmCreateBulk) ExecX(ctx context.Context) {
	if err := eacb.Exec(ctx); err != nil {
		panic(err)
	}
}
